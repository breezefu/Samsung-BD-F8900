#!/usr/bin/perl
##############################################################################
#
#               (c) Cambridge Silicon Radio Limited 2009
#
#                All rights reserved and confidential information of CSR
#
##############################################################################

use strict;
use warnings;
use Term::ReadKey;
use Cwd;

my %techHashVersion = ();
my %selectedTechHash = ();
my $cwd;
my $cName = "";

sub getTech
{
    my $realTech;

    open(TECH,"tech.txt");
    while(<TECH>)
    {
        my ($tech,$techVer) = ($_ =~m/(.*)\/(.*)/);

        $_ = $tech;
        $tech =~ s/\.\///g;

        if ($tech eq "frw")
        {
            $tech ="fw";
            $realTech="frw";
        }
        else
        {
            $realTech=$tech;
        }        

        $techHashVersion{$tech} .= $techVer . "=" . "$realTech"; 
        $techHashVersion{$tech} .= "@"; 

    }

    close (TECH);
}

sub dumpTech
{
    foreach my $key (keys %techHashVersion)
    {
        print "$key: $techHashVersion{$key}\n";
    }
}

sub selectTechVersion
{
    my ($tech) = @_;
    my $idx;
    my $v;
    my @verRealTech = ();
    my $select;
    my $i;
    my $root;
    my $size;
    my $noSets;
    my $set;
    my $ver;
    my $realTech;

    @verRealTech = split (/@/,$techHashVersion{$tech});

    $size = @verRealTech;

    $noSets = int($size / 9) + 1;

    $select = 1;
    $set = 0;
    while ($select)
    {
        print "\n\n\n";
        print "Installed Synergy $tech versions\n";
        print "----------------------------------------------\n";

        $idx = 1;
        for (my $j = $set*9;(($j<$size) && ($j < ($set+1)*9));$j++)
        {
            ($ver,$realTech) = split(/=/,$verRealTech[$j]);

            print "$idx  :  $ver\n";
            $idx ++;
        }
        print "----------------------------------------------\n";

        if ($noSets > 1)
        {
            if ($set == 0)
            {
                print "Please select version to use (n for next set, s to skip): ";
            }
            elsif ($set == $noSets-1) 
            {
                print "Please select version to use (p for prev set, s to skip): ";
            }
            else
            {
                print "Please select version to use (p/n for prev/next set, s to skip): ";
            }
        }
        else
        {
            print "Please select version to use (s to skip) : ";          
        }

        $i = <STDIN>;
        chomp($i);

        if (($i eq "n") || ($i eq "N"))
        {
            if (($noSets > 1) && ($set < $noSets-1))
            {
                $set ++;
            }
            else
            {
                print "** Illegal selection, please try again**\n\n";
            }
        }
        elsif (($i eq "p") || ($i eq "P"))
        {
            if (($noSets > 1) && ($set>=1))
            {
                $set --;            
            }
            else
            {
                print "** Illegal selection, please try again**\n\n";
            }
        }
        elsif (($i eq "s") || ($i eq "S"))
        {
            $select = 0;
        }
        else
        {
            $i -= "0";   # normalize;

            if (($i<1) || ($i >= $idx))
            {
                print "** Illegal selection, please try again**\n\n";
            }
            else
            {
                $i += ($set * 9);
                
                $select = 0;

                $selectedTechHash{$tech} = $verRealTech[$i-1];
            }
        }
    }
}

sub configSetup
{
    my $fName = "";

    system ("clear");
    
    print "\nPlease enter Synergy Configuration name: ";

    $cName = <STDIN>;
    chop($cName);
    
    $fName = "./config/" . $cName . ".mk";

    open (CONFIG,">$fName");
    printf CONFIG "##################################################\n";
    printf CONFIG "# This file is autogenerated, so please do not \n";
    printf CONFIG "# make any changes to it \n";
    printf CONFIG "##################################################\n";

    print "\n";

    foreach my $key (keys %techHashVersion)
    {
        selectTechVersion($key);
    }
}

sub writeConfig
{
    my $root;
    my $v;
    my $tkey;
    my $root1;
    my $v1;
    my $tkey1;
    my $r;

    # First write the ROOT's
    foreach my $key (keys %selectedTechHash)
    {
        ($v,$r) = split(/=/,$selectedTechHash{$key});

        $tkey = $r;
        $tkey =~ tr/[a-z]/[A-Z]/;
        if ($tkey eq "FRW")
        {
            $tkey ="FW";
        }
        $root = $tkey . "_ROOT";

        printf CONFIG "export $root := $cwd/$r/$v\n";
    }

    printf CONFIG "\n\n";
    printf CONFIG "list:\n";
    printf CONFIG "\t\@echo CFG = $cName\n";

    foreach my $key (keys %selectedTechHash)
    {
        $v = $selectedTechHash{$key};

        $tkey = $key;
        $tkey =~ tr/[a-z]/[A-Z]/;
        $root = $tkey . "_ROOT";

        printf CONFIG "\t\@echo $root = \$\($root\)\n";
    }

    printf CONFIG "\n\n";
    printf CONFIG "all lib bin clean veryclean:\n";

    foreach my $key (keys %selectedTechHash)
    {
        $v = $selectedTechHash{$key};

        $tkey = $key;
        $tkey =~ tr/[a-z]/[A-Z]/;
        $root = $tkey . "_ROOT";

        printf CONFIG "\t\$(MAKE) -C \$\($root\) \$\@ ";

        foreach my $key1 (keys %selectedTechHash)
        {
            $v1 = $selectedTechHash{$key};
			
			if ($key eq $key1)
			{
				next;
			}

            $tkey1 = $key1;
            $tkey1 =~ tr/[a-z]/[A-Z]/;
            $root1 = $tkey1 . "_ROOT";
            
            printf CONFIG "$root1=\"\$\($root1\)\" ";
        }

        printf CONFIG "\n";
    }

    close(CONFIG);
}

$cwd = cwd();
$cwd =~ s/\\/\//g;
$cwd =~ s/ /\\ /g;
$cwd = `cygpath -m -a $cwd`;
$cwd =~ s/ /\\ /g;
chop($cwd);

getTech();
configSetup();
writeConfig();

