// =============================================================================
// 
// Created by patchmaker.pl $Revision: #17 $ $Date: 2007/03/07 $
// Creation date: Fri May 25 14:19:09 2007
// 
// Patch is for build 1958 odj_4hci_rom_bt2.0_19p2_0503071059_encr128
// Input file: build_1958_patches.xap.
// Depot file: //depot/bc/19p2/dev/patches/1958/build_1958_patches.xap
// File revision: 13
// 
// This patch is B-10910. It fixes B-8062, B-6989, B-8710, B-6002, B-6334,
// B-21798 and optionally B-5329 and B-4509.
// 
// B-8062
// A race condition has been identified within the BlueCore firmware which
// can cause packet transmission failure under some circumstances. This 
// causes reduced link performance.
// 
// B-6989
// Enhancements to the EDR temperature compensation algorithm to reduce the drop
// in EDR output power at high temperatures. Must be used with
// PSKEY_TEMPERATURE_VS_DELTA_TX_BB_MR_PAYLOAD &
// PSKEY_TEMPERATURE_VS_DELTA_TX_BB_MR_HEADER containing entries at 54 and 55°C.
// The recommended settings for these PSKEYS are 
//  For PSKEY_TEMPERATURE_VS_DELTA_TX_BB_MR_PAYLOAD:
//   { -30, 8 }, { 0, 4 }, { 25, 0 }, { 54, 0 }, { 55, 10 }, { 85, 4 },
//     { 105, 4 }
//  or as raw words:
//   0xffe2, 0x0008, 0x0000, 0x0004, 0x0019, 0x0000, 0x0036, 0x0000, 0x0037,
//   0x000a, 0x0055, 0x0004, 0x0069, 0x0004 
// 
//  For PSKEY_TEMPERATURE_VS_DELTA_TX_BB_MR_HEADER:
//    { -30, 5 }, { 0, 4 }, { 25, 0 }, { 54, -4 }, { 55, 5 }, { 85, 4 },
//     { 105, 4 }
//  or as raw words:
//   0xffe2, 0x0005, 0x0000, 0x0004, 0x0019, 0x0000, 0x0036, 0xfffc, 0x0037,
//   0x0005, 0x0055, 0x0004, 0x0069, 0x0004
// 
// B-8710
// Data stalls have been observed for EDR devices placed within a few
// centimetres of each other, where BlueCore cannot receive the EDR packet and
// so continuously NAKs or does not respond. This is caused by a fault in the
// chip's automatic gain control (AGC) software. The stall eventually clears,
// but has been observed to cause up to 5 seconds of delay on an EDR connection
// when data is transfered before power control has had a chance to reduce the
// sender's transmit power. The stall will only occur when the device has
// performed an inquiry since it was last reset.
// 
// This patch assumes that PSKEY_RX_ATTEN_BACKOFF and
// PSKEY_RX_ATTEN_UPDATE_RATE remain set to their default values.
// 
// B-5329
// An issue has been identified in BlueCore ROM parts which are used in a
// configuration such that the host's clock request is an input on PIO[3]
// and is combined internally with BlueCore's clock request logic; the
// resulting composite clock request being an output on PIO[2]. This is the
// behavior enabled by setting PSKEY_CLOCK_REQUEST_ENABLE to 3.
// 
// Unfortunately, the clock request output will glitch to "inactive" (0)
// for around 3uS, around 200ms after reset. This may cause issues within
// the host system, because a typical use case will be to boot the Bluecore
// device, download host-specific configuration data (such as a Bluetooth
// address) and then perform a warm reset.
// 
// This patch will restore the correct behaviour, which is that the clock
// request output from the chip will be placed into a Hi-Z state for the
// duration of the reset, to be pulled by an external resistor, and will
// not be actively driven low.
// 
// This patch is commented-out by default in this patch file, because not
// every application uses this clock request functionality.  To enable the
// patch, uncomment the patch:
// 
// 	patch patch_38, PSKEY_PATCH38 (0x00bc, 188) 
// 
// And, using the host software, also set PSKEY_CLOCK_REQUEST_ENABLE
// (0x246, 582) to zero.  In effect, the patch disables the code wired to
// PSKEY_CLOCK_REQUEST_ENABLE and replaces it with code which asserts the
// clock requst signal at a later point in the chip boot sequence.  The
// drive direction of the clock request pin is thereby set up correctly
// before the drive to the pin is enabled, thus removing the glitch.  
// 
// B-6002, B-6334
// When BlueCore is on link with EDR eSCO but not EDR ACL, EDR eSCO packets are
// not transmitted or received correctly. This is caused by an oversight in the
// firmware, which fails to enable certain hardware required for EDR. The
// supplied patch remedies this. Also, BlueCore does not disable the hardware
// when an EDR eSCO or ACL link is disconnected, which uses power unnecessarily.
// The patch also remedies this.
// 
// B-4509
// When Bluecore is configured to use the H4DS host transport, it is 
// possible for the host interface to stall. This happens following certain
// patterns of UART activity which can cause Bluecore to enter an infinite
// cycle of sending You-May-Sleep and Wake-Up messages. This patch prevents
// the problem from occurring.
// 
// NOTE: This patch, PSKEY_PATCH37 (0x00BB), is only applicable to the H4DS
// host transport. The patch need not be applied when using any other host
// transport.
// 
// B-21798
// When we receive an inbound connection from a device that we think is already
// connected we drop the old connection and use the new one in preference. This
// is because typically what has happened is the old device has been reset and
// has reconnected before the supervision timeout for the old connection.
// 
// Unfortunately, when this happens, we don't freeze the old HCI handle (see
// PSKEY_HCI_HANDLE_FREEZE_PERIOD). If the host writes to the old handle after
// we've disconnected it but, presumably, before the host has processed the
// disconnection complete event, then the chip will panic.
// 
// This patch ensures that the old handle is frozen correctly as it would be
// after a real supervision timeout.
// 
// B-19265:
// Occasionally, after the chip performs a self-calibration procedure, it
// can leave part of the radio hardware in a slightly odd state. This means
// that the next packet we transmit can contain the wrong data. Typically,
// this data is from further ahead in the data stream, but it could also be
// from earlier in the data stream, from a different data stream or garbage.
// 
// This fix is to set up the hardware better at the start of a calibration
// to make sure that the state is consistent at the end.
// 
// B-19706:
// The firmware can get into a state whereby it transmits packets at the
// wrong time. This typically happens when mixing packets at different
// power levels. Specifically, a low power (short range) basic rate link
// may be affected if there's a high power basic rate link, any EDR link
// or a page, inquiry, page scan or inquiry scan recently.
// 
// The problem was caused by a cache of a timing calculation being incorrectly
// marked as valid when switching between the different power levels. It should
// have been marked as invalid and the fix is simply to update it correctly.
// 
// For most devices the effect is pretty much harmless. This problem has been
// observed only when we are master. Our transmit timing will jitter out of
// spec but within the 10 us timing window the slave allows. However, if the
// basic rate link is at very low power, the jitter could be more than 10 us.
// If the slave doesn't implement active mode receive window widening, it
// could lose us completely. CSR slaves always implement active mode receive
// window widening so don't see this problem. Active mode receive window
// widening is also explicitly recommended in later versions of the BT spec.
// 
// B-11615
// This patch is B-11615. It fixes B-6692 and B-11614. It applies to Bluecore
// chips configured to use the BCSP host interface only.
// 
// B-11615 fixes B-6692
// BC4 ROM build 1958, when configured to use a UART host transport with
// a baud rate greater than 1Mbps, may occasionally drop a byte of inbound
// UART data. This patch solves the problem by disabling shallow sleep when
// the chip is configured to use a baud rate greater than 1Mbps.
// 
// B-11615 fixes B-11614
// BC4 ROM build 1958, when configured to use the BCSP host transport may
// occasionally enter a power saving mode (deep sleep) during the transmission
// of a UART packet to the host. This can sometimes prevent the Bluecore from
// transmitting any further UART data to the host.
// 
// The code associated with this bug will be commented out until needed. 
// This patch should only be applied if the application is using the BCSP 
// host transport.

// patch_spare5, PSKEY_PATCH34 (0x00b8, 184)
&00b8 = 0002 8416 031b 4216 22f4 4316 0684 1ff0 9015 08c4 16f0 9511 9515 fdc4 9525 9015 08b4 9025 9715 01b4 9725 ff00 6f15 fdc4 ff00 6f25 ff00 5315 20b4 ff00 5325 9521 0118 ff2b ff0e 8400 1218 00e2 0113 3f30 e721 0118 ff2b ff0e 8400 1918 00e2 5d46

// patch_spare4, PSKEY_PATCH33 (0x00b7, 183)
&00b7 = 0003 3041 0014 fe27 0114 ff27 0218 ff2b ff0e 3000 4418 00e2 63c2

// patch_spare6, PSKEY_PATCH35 (0x00b9, 185)
&00b9 = 0002 b6bf 0117 b800 e184 07f4 b800 f184 04f4 b800 1784 12f0 e300 b519 06f4 1412 15b2 0cf0 001a fcf0 fc3c 0014 0327 0118 ff2b ff0e 4400 7818 00e2 043c fe0e ffe3 8cd3

// patch_bc_boot, PSKEY_PATCH1 (0x0097, 151)
&0097 = 045c 032b 020a 0014 0027 2100 b434 0018 012b 010e f100 4018 009e 0084 10f4 f225 f219 0116 0012 001b 003b 003b fd00 7a38 0022 0126 f215 a000 fe54 0226 0017 0134 0027 0884 e3fc 2100 bc14 0018 012b 010e f100 4018 009e 0084 08f4 1410 0123 010e a000 0054 0127 019f 020e 043c ffe3 2a15

// patch_spare7, PSKEY_PATCH36 (0x00ba, 186)
&00ba = 0001 03f3 1414 de00 bc25 e000 6b15 a000 e354 de00 bd25 0114 fe00 8c25 0400 3e14 fe00 8d25 fe00 8e15 3134 fe00 8e25 0018 ff2b ff0e 0400 f918 00e2 ff2b 0084 11ec 9811 4000 00c0 e921 0010 9025 9815 4000 00c4 e9d5 05f0 0130 4000 0180 f8fc ffe3 0008 0000 ffe3 0114 fe00 8c25 0400 f314 fe00 8d25 fe00 8e15 3154 fe00 8e25 de00 bd19 a000 1338 0814 0026 ffe3 389c

// patch_spare3, PSKEY_PATCH32 (0x00b6, 182)
&00b6 = 0001 23bf de00 9f15 2384 04e4 ff00 ffc0 03e0 0100 00b0 e721 e515 0018 ff2b ff0e 2400 d718 00e2 73b8

// patch_bg_usleep, PSKEY_PATCH4 (0x009a, 154)
// Remove '//' on next line to activate patch for B-11615
//&009a = fe0a ff2b fe3c dd00 6015 0184 2df0 5d15 1000 0084 04fc 0014 de00 b425 e700 a615 93c5 01c4 15f4 e700 a815 4ed5 fa25 e700 a715 4dd5 fab5 0cf0 b415 e700 a955 0884 13fc 0014 0027 000e 5700 4d18 009e 9315 e700 a625 4d15 e700 a725 4e15 e700 a825 b415 e700 a925 023c fe0e ffe3 83b4

// patch_38, PSKEY_PATCH38 (0x00bc, 188)
&00bc = 9511 fdc0 9515 9521 9711 4000 00b0 9721 6111 04b0 6121 ff00 5211 01b0 ff00 5221 9525 00e2 db18

// patch_spare2, PSKEY_PATCH31 (0x00b5, 181)
&00b5 = 0001 1e07 0010 0521 de00 6819 2f12 de00 6719 3016 03f4 3116 02f0 2f22 de00 6715 de00 6811 0018 ff2b ff0e 1e00 0b18 00e2 dfa5

// patch_37, PSKEY_PATCH37 (0x00bb, 187)
&00bb = 0002 0ec1 0018 ff2b ff0e 6800 a718 009e 023c fe0e ffe3 ead4

// patch_radiotest_tx_start, PSKEY_PATCH17 (0x00a7, 167)
&00a7 = 0513 00f6 ff00 5311 de00 9f15 2384 04e4 ff00 ffc0 03e0 0100 00b0 ff00 5321 00e2 b2cd

// patch_lc_rx_hw_set, PSKEY_PATCH25 (0x00af, 175)
&00af = 0915 0184 00f2 0214 0925 00e2 f019

// patch_spare1, PSKEY_PATCH30 (0x00b4, 180)
&00b4 = 0002 b264 1414 0118 ff2b ff0e b200 6718 00e2 27ff
