#ifndef _CSR_BT_AMPM_SEND_HCI_COMMAND_H_
#define _CSR_BT_AMPM_SEND_HCI_COMMAND_H_

#include "csr_synergy.h"
/****************************************************************************

              (c) Cambridge Silicon Radio Limited 2009

              All rights reserved and confidential information of CSR

              Warning: This file was autogenerated from 'bt_amp_hci.xml'

****************************************************************************/

#include "csr_pmem.h"
#include "csr_bt_amp_hci.h"
#include "csr_bt_ampm_prim.h"
#include "csr_bt_ampm_main.h"
#include "csr_bt_ampm_local.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Generates the HCI command structure for CsrBtAmpHciNoOperationCmd  */
void CsrBtAmpmSendHciNoOperation(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender);

/* Generates the HCI command structure for CsrBtAmpHciCreatePhysicalLinkCmd  */
void CsrBtAmpmSendHciCreatePhysicalLink(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint8 physicalLinkHandle,
    CsrUint8 dedicatedAmpKeyLength,
    CsrBtAmpLinkKeyType dedicatedAmpKeyType,
    CsrUint8 *dedicatedAmpKey);

/* Generates the HCI command structure for CsrBtAmpHciAcceptPhysicalLinkRequestCmd  */
void CsrBtAmpmSendHciAcceptPhysicalLinkRequest(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint8 physicalLinkHandle,
    CsrUint8 dedicatedAmpKeyLength,
    CsrBtAmpLinkKeyType dedicatedAmpKeyType,
    CsrUint8 *dedicatedAmpKey);

/* Generates the HCI command structure for CsrBtAmpHciDisconnectPhysicalLinkCmd  */
void CsrBtAmpmSendHciDisconnectPhysicalLink(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint8 physicalLinkHandle,
    CsrBtAmpHciStatusCode reason);

/* Generates the HCI command structure for CsrBtAmpHciCreateLogicalLinkCmd  */
void CsrBtAmpmSendHciCreateLogicalLink(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint8 physicalLinkHandle,
    CsrBtAmpAmpFlowSpec txFlowSpec,
    CsrBtAmpAmpFlowSpec rxFlowSpec);

/* Generates the HCI command structure for CsrBtAmpHciAcceptLogicalLinkCmd  */
void CsrBtAmpmSendHciAcceptLogicalLink(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint8 physicalLinkHandle,
    CsrBtAmpAmpFlowSpec txFlowSpec,
    CsrBtAmpAmpFlowSpec rxFlowSpec);

/* Generates the HCI command structure for CsrBtAmpHciDisconnectLogicalLinkCmd  */
void CsrBtAmpmSendHciDisconnectLogicalLink(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 logicalLinkHandle);

/* Generates the HCI command structure for CsrBtAmpHciLogicalLinkCancelCmd  */
void CsrBtAmpmSendHciLogicalLinkCancel(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint8 physicalLinkHandle,
    CsrUint8 txFlowSpecId);

/* Generates the HCI command structure for CsrBtAmpHciFlowSpecModifyCmd  */
void CsrBtAmpmSendHciFlowSpecModify(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 handle,
    CsrBtAmpAmpFlowSpec txFlowSpec,
    CsrBtAmpAmpFlowSpec rxFlowSpec);

/* Generates the HCI command structure for CsrBtAmpHciSetEventMaskCmd  */
void CsrBtAmpmSendHciSetEventMask(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrBtAmpEventMask eventMask);

/* Generates the HCI command structure for CsrBtAmpHciResetCmd  */
void CsrBtAmpmSendHciReset(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender);

/* Generates the HCI command structure for CsrBtAmpHciFlushCmd  */
void CsrBtAmpmSendHciFlush(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 handle);

/* Generates the HCI command structure for CsrBtAmpHciReadConnectionAcceptTimeoutCmd  */
void CsrBtAmpmSendHciReadConnectionAcceptTimeout(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender);

/* Generates the HCI command structure for CsrBtAmpHciWriteConnectionAcceptTimeoutCmd  */
void CsrBtAmpmSendHciWriteConnectionAcceptTimeout(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 connAcceptTimeout);

/* Generates the HCI command structure for CsrBtAmpHciReadLinkSupervisionTimeoutCmd  */
void CsrBtAmpmSendHciReadLinkSupervisionTimeout(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 handle);

/* Generates the HCI command structure for CsrBtAmpHciWriteLinkSupervisionTimeoutCmd  */
void CsrBtAmpmSendHciWriteLinkSupervisionTimeout(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 handle,
    CsrUint16 linkSupervisionTimeout);

/* Generates the HCI command structure for CsrBtAmpHciEnhancedFlushCmd  */
void CsrBtAmpmSendHciEnhancedFlush(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 handle,
    CsrBtAmpPacketType packetType);

/* Generates the HCI command structure for CsrBtAmpHciReadLogicalLinkAcceptTimeoutCmd  */
void CsrBtAmpmSendHciReadLogicalLinkAcceptTimeout(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender);

/* Generates the HCI command structure for CsrBtAmpHciWriteLogicalLinkAcceptTimeoutCmd  */
void CsrBtAmpmSendHciWriteLogicalLinkAcceptTimeout(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 logicalLinkAcceptTimeout);

/* Generates the HCI command structure for CsrBtAmpHciSetEventMaskPage2Cmd  */
void CsrBtAmpmSendHciSetEventMaskPage2(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrBtAmpEventMaskPage2 eventMaskPage2);

/* Generates the HCI command structure for CsrBtAmpHciReadLocationDataCmd  */
void CsrBtAmpmSendHciReadLocationData(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender);

/* Generates the HCI command structure for CsrBtAmpHciWriteLocationDataCmd  */
void CsrBtAmpmSendHciWriteLocationData(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrBtAmpLocationDomainAware locationDomainAware,
    CsrUint16 locationDomain,
    CsrBtAmpLocationDomainOptions locationDomainOptions,
    CsrBtAmpLocationOptions locationOptions);

/* Generates the HCI command structure for CsrBtAmpHciReadBestEffortFlushTimeoutCmd  */
void CsrBtAmpmSendHciReadBestEffortFlushTimeout(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 logicalLinkHandle);

/* Generates the HCI command structure for CsrBtAmpHciWriteBestEffortFlushTimeoutCmd  */
void CsrBtAmpmSendHciWriteBestEffortFlushTimeout(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 logicalLinkHandle,
    CsrUint32 bestEffortFlushTimeout);

/* Generates the HCI command structure for CsrBtAmpHciShortRangeModeCmd  */
void CsrBtAmpmSendHciShortRangeMode(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint8 physicalLinkHandle,
    CsrBtAmpShortRangeMode shortRangeMode);

/* Generates the HCI command structure for CsrBtAmpHciReadLocalVersionInformationCmd  */
void CsrBtAmpmSendHciReadLocalVersionInformation(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender);

/* Generates the HCI command structure for CsrBtAmpHciReadLocalSupportedCommandsCmd  */
void CsrBtAmpmSendHciReadLocalSupportedCommands(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender);

/* Generates the HCI command structure for CsrBtAmpHciReadDataBlockSizeCmd  */
void CsrBtAmpmSendHciReadDataBlockSize(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender);

/* Generates the HCI command structure for CsrBtAmpHciReadFailedContactCounterCmd  */
void CsrBtAmpmSendHciReadFailedContactCounter(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 handle);

/* Generates the HCI command structure for CsrBtAmpHciResetFailedContactCounterCmd  */
void CsrBtAmpmSendHciResetFailedContactCounter(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 handle);

/* Generates the HCI command structure for CsrBtAmpHciReadLinkQualityCmd  */
void CsrBtAmpmSendHciReadLinkQuality(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 handle);

/* Generates the HCI command structure for CsrBtAmpHciReadRssiCmd  */
void CsrBtAmpmSendHciReadRssi(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint16 handle);

/* Generates the HCI command structure for CsrBtAmpHciReadLocalAmpInfoCmd  */
void CsrBtAmpmSendHciReadLocalAmpInfo(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender);

/* Generates the HCI command structure for CsrBtAmpHciReadLocalAmpAssocCmd  */
void CsrBtAmpmSendHciReadLocalAmpAssoc(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint8 physicalLinkHandle,
    CsrUint16 lengthSoFar,
    CsrUint16 maxRemoteAmpAssocLength);

/* Generates the HCI command structure for CsrBtAmpHciWriteRemoteAmpAssocCmd  */
void CsrBtAmpmSendHciWriteRemoteAmpAssoc(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint8 physicalLinkHandle,
    CsrUint16 lengthSoFar,
    CsrUint16 remainingLength,
    CsrBtAmpAmpAssoc assocFragment);

/* Generates the HCI command structure for CsrBtAmpHciReadLoopbackModeCmd  */
void CsrBtAmpmSendHciReadLoopbackMode(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender);

/* Generates the HCI command structure for CsrBtAmpHciWriteLoopbackModeCmd  */
void CsrBtAmpmSendHciWriteLoopbackMode(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrBtAmpHciLoopbackMode loopbackMode);

/* Generates the HCI command structure for CsrBtAmpHciEnableAmpTestModeCmd  */
void CsrBtAmpmSendHciEnableAmpTestMode(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrBtAmpTestMode enable);

/* Generates the HCI command structure for CsrBtAmpHciSetAmpTransmitPowerTestCmd  */
void CsrBtAmpmSendHciSetAmpTransmitPowerTest(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint8 powerLevel);

/* Generates the HCI command structure for CsrBtAmpHciEnableAmpReceiverReportsCmd  */
void CsrBtAmpmSendHciEnableAmpReceiverReports(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint8 enable,
    CsrUint8 interval);

/* Generates the HCI command structure for CsrBtAmpHciTransmitterAmpTestCmd  */
void CsrBtAmpmSendHciTransmitterAmpTest(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint8 testScenario);

/* Generates the HCI command structure for CsrBtAmpHciReceiverAmpTestCmd  */
void CsrBtAmpmSendHciReceiverAmpTest(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender,
    CsrUint8 testScenario);

/* Generates the HCI command structure for CsrBtAmpHciAmpTestEndCmd  */
void CsrBtAmpmSendHciAmpTestEnd(
    CsrBtAmpmInstance *inst,
    CsrUint8 ampId,
    void *sender);

#ifdef __cplusplus
}
#endif

#endif /* _CSR_BT_AMPM_SEND_HCI_COMMAND_H_ */

