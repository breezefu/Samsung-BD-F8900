#ifndef CSR_BT_HID_SERVICE_RECORD_H__
#define CSR_BT_HID_SERVICE_RECORD_H__

#include "csr_synergy.h"
/****************************************************************************

               (c) Cambridge Silicon Radio Limited 2009

               All rights reserved and confidential information of CSR

REVISION:      $Revision: #1 $
****************************************************************************/

#ifdef __cplusplus
extern "C" {
#endif

static const CsrUint8 hid_device_service_record[] =
{
    0x09,0x00,0x01,         /* AttrID , ServiceClassIDList */
    0x35,0x03,              /* 3 bytes in total DataElSeq */
    0x19,0x12,0x00,         /* 2 byte UUID, Service class = PnpInformation */

    0x09, 0x01, 0x01,       /* ServiceDescription(0x0101)*/
    0x25, 0x0e,             /* Text string, length:14 */
    'C','S','R',' ','H','I','D',' ','D','E','V','I','C','E',

    0x09, 0x02, 0x00,       /* AttrID, SpecificationID */
    0x09, 0x01, 0x02,       /* CsrUint16, version: 1.2 */

    0x09, 0x02, 0x01,       /* AttrID, VendorID */
    0x09, 0x00, 0x0a,       /* CsrUint16, CompanyID: 10 (CSR) */

    0x09, 0x02, 0x02,       /* AttrID, ProduceID */
    0x09, 0x12, 0x34,       /* CsrUint16, company product number: 0x1234 */

    0x09, 0x02, 0x03,       /* AttrID, Version */
    0x09, 0x01, 0x00,       /* CsrUint16, version in this device */

    0x09, 0x02, 0x04,       /* AttrID, Primary Record */
    0x28, 0x01,             /* CsrBool, primary device ID sdp: FALSE */

    0x09, 0x02, 0x05,       /* AttrID, VendorIDSource */
    0x09, 0x00, 0x01,       /* uint16_t, origin of the VendorID: BluetoothSIG (0x0001)*/

    /* BrowseGroupList    */
    0x09, 0x00, 0x05,      /* AttrId = BrowseGroupList */
    0x35, 0x03,            /* Data element seq. 3 bytes */
    0x19, 0x10, 0x02,      /* 2 byte UUID, PublicBrowseGroup = 0x1002 */
};


static const CsrUint8 hid_keyboard_service_record[] =
{
    0x09, 0x00, 0x01,       /* ServiceClassIDList(0x0001) */
    0x35, 0x03,             /* DataElSeq 3 bytes */
    0x19, 0x11, 0x24,       /* uuid16_t HID(0x1124) */

    0x09, 0x00, 0x04,       /* ProtocolDescriptorList(0x0004) */
    0x35, 0x0d,             /* DataElSeq 13 bytes */
    0x35, 0x06,             /* DataElSeq 6 bytes */
    0x19, 0x01, 0x00,       /* uuid16_t L2CAP(0x0100) */
    0x09, 0x00, 0x11,       /* CsrUint16 0x0011 */
    0x35, 0x03,             /* DataElSeq 3 bytes */
    0x19, 0x00, 0x11,       /* uuid16_t HIDP(0x0011) */

    /* BrowseGroupList    */
    0x09, 0x00, 0x05,      /* AttrId = BrowseGroupList */
    0x35, 0x03,            /* Data element seq. 3 bytes */
    0x19, 0x10, 0x02,      /* 2 byte UUID, PublicBrowseGroup = 0x1002 */

    0x09, 0x00, 0x06,       /* LanguageBaseAttributeIDList(0x0006) */
    0x35, 0x09,             /* DataElSeq 9 bytes */
    0x09, 0x65, 0x6e,       /* CsrUint16 0x656e */
    0x09, 0x00, 0x6a,       /* CsrUint16 0x006a */
    0x09, 0x01, 0x00,       /* CsrUint16 0x0100 */

    0x09, 0x00, 0x09,       /* BluetoothProfileDescriptorList(0x0009) */
    0x35, 0x08,             /* DataElSeq 8 bytes */
    0x35, 0x06,             /* DataElSeq 6 bytes */
    0x19, 0x11, 0x24,       /* uuid16_t HID(0x1124) */
    0x09, 0x01, 0x00,       /* CsrUint16 0x0100 */

    0x09, 0x00, 0x0d,       /* AdditionalProtocolDescriptorList(0x000d) */
    0x35, 0x0f,             /* DataElSeq 15 bytes */
    0x35, 0x0d,             /* DataElSeq 13 bytes */
    0x35, 0x06,             /* DataElSeq 6 bytes */
    0x19, 0x01, 0x00,       /* uuid16_t L2CAP(0x0100) */
    0x09, 0x00, 0x13,       /* CsrUint16 0x0013 */
    0x35, 0x03,             /* DataElSeq 3 bytes */
    0x19, 0x00, 0x11,       /* uuid16_t HIDP(0x0011) */

    0x09, 0x01, 0x00,       /* ServiceName(0x0100) = "CSR Keyboard" */
    0x25, 0x0c,             /* String length 12 */
    'C','S','R',' ','K','e','y','b','o','a','r','d',

    0x09, 0x01, 0x01,       /* ServiceDescription(0x0101) = "Keyboard" */
    0x25, 0x08,             /* String length 8 */
    'K','e','y','b','o','a','r','d',

    0x09, 0x01, 0x02,       /* ProviderName(0x0102) = "CSR HIDEngine" */
    0x25, 0x0d,             /* String length 13 */
    'C','S','R',' ','H','I','D','E','n','g','i','n','e',

    0x09, 0x02, 0x00,       /* HIDDeviceReleaseNumber(0x0200) = "0x0100" */
    0x09, 0x01, 0x00,       /* CsrUint16 0x0100 */
    0x09, 0x02, 0x01,       /* HIDParserVersion(0x0201) = "0x0100" */
    0x09, 0x01, 0x00,       /* CsrUint16 0x0100 */

    0x09, 0x02, 0x02,       /* HIDDeviceSubclass(0x0202) = "0x40" */
    0x08, 0x40,             /* CsrUint8 0x40 */
    0x09, 0x02, 0x03,       /* HIDCountryCode(0x0203) = "0x33" */
    0x08, 0x33,             /* CsrUint8 0x33 */

    0x09, 0x02, 0x04,       /* HIDVirtualCable(0x0204) = "true" */
    0x28, 0x01,             /* CsrBool true */

    0x09, 0x02, 0x05,       /* HIDReconnectInitiate(0x0205) = "true" */
    0x28, 0x01,             /* CsrBool true */

    0x09, 0x02, 0x06,       /* HIDDescriptorList(0x0206) */
    0x35, 0x49,             /* DataElSeq 73 bytes */
    0x35, 0x47,             /* DataElSeq 71 bytes */
    0x08, 0x22,             /* CsrUint8 0x22 */
    0x25,0x43,              /* HID Descriptor Length 67 bytes */
    /* Start of Raw Data */
    0x05,0x01, /* USAGE_PAGE(Generic Desktop) */
    0x09,0x06, /* USAGE (Joystick) */
    0xa1,0x01, /* COLLECTION (Application) */
    0x05,0x07, /* USAGE_PAGE (Keypad) */
    0x85,0x01, /* REPORT_ID (0x01) */
    0x19,0xe0, /* USAGE_MIN (0xe0) */
    0x29,0xe7, /* USAGE_MAX (0xe7) */
    0x15,0x00, /* LOGICAL_MIN (0x0) */
    0x25,0x01, /* LOGICAL_MAX (0x1) */
    0x75,0x01, /* REPORT_SIZE (0x1) */
    0x95,0x08, /* REPORT_COUNT (0x8) */
    0x81,0x02, /* INPUT (data/var/abs) */
    0x95,0x01, /* REPORT_COUNT (0x1) */
    0x75,0x08, /* REPORT_SIZE (0x8) */
    0x81,0x01, /* INPUT (const/array/abs) */
    0x95,0x05, /* REPORT_COUNT (0x5) */
    0x75,0x01, /* REPORT_SIZE (0x1) */
    0x05,0x08, /* USAGE_PAGE (LEDS) */
    0x85,0x01, /* REPORT_ID (0x01) */
    0x19,0x01, /* USAGE_MIN (0x01) */
    0x29,0x05, /* USAGE_MAX (0x05) */
    0x91,0x02, /* OUTPUT (Var) */
    0x95,0x01, /* REPORT_COUNT (0x1) */
    0x75,0x03, /* REPORT_SIZE (0x3) */
    0x91,0x03, /* OUTPUT (Const) */
    0x95,0x06, /* REPORT_COUNT (0x6) */
    0x75,0x08, /* REPORT_SIZE (0x8) */
    0x15,0x00, /* LOGICAL_MIN (0x0) */
    0x25,0x65, /* LOGICAL_MAX (0x65) */
    0x05,0x07, /* USAGE_PAGE (Keypad) */
    0x19,0x00, /* USAGE_MIN (0x0) */
    0x29,0x65, /* USAGE_MAX (0x65) */
    0x81,0x00, /* INPUT (data/array/abs) */
    0xc0, /* END_COLLECTION */
    /* End of Raw Data */
    0x09, /* HIDLANGIDBaseList(0x0207) */
    0x02,
    0x07,
    0x35, /* DataElSeq 8 bytes */ /*270*/
    0x08,
    0x35, /* DataElSeq 6 bytes */
    0x06,
    0x09, /* CsrUint16 0x0409 */
    0x04,
    0x09,
    0x09, /* CsrUint16 0x0100 */
    0x01,
    0x00,
    0x09, /* HIDSDPDisable(0x0208) = "false" */
    0x02,
    0x08,
    0x28, /* CsrBool false */
    0x00,
    0x09, /* HIDBatteryPower(0x0209) = "true" */
    0x02,
    0x09,
    0x28, /* CsrBool true */
    0x01,
    0x09, /* HIDRemoteWake(0x020a) = "true" */ /*290*/
    0x02,
    0x0a,
    0x28, /* CsrBool true */
    0x01,
    0x09, /* HIDProfileVersion(0x020b) = "0x0100" */
    0x02,
    0x0b,
    0x09, /* CsrUint16 0x0100 */
    0x01,
    0x00,
    0x09, /* HIDSupervisionTimeout(0x020c) = "0x1f40" */
    0x02,
    0x0c,
    0x09, /* CsrUint16 0x1f40 */
    0x1f,
    0x40,
    0x09, /* HIDNormallyConnectable(0x020d) = "false" */
    0x02,
    0x0d,
    0x28, /* CsrBool false */ /*310*/
    0x00,
    0x09, /* HIDBootDevice(0x020e) = "false" */
    0x02,
    0x0e,
    0x28, /* CsrBool false */
    0x00
};

static const CsrUint8 hid_mouse_service_record[] =
{
    0x09, /* ServiceClassIDList(0x0001) */
    0x00,
    0x01,
    0x35, /* DataElSeq 3 bytes */
    0x03,
    0x19, /* uuid16_t HID(0x1124) */
    0x11,
    0x24,
    0x09, /* ProtocolDescriptorList(0x0004) */
    0x00,
    0x04,
    0x35, /* DataElSeq 13 bytes */
    0x0d,
    0x35, /* DataElSeq 6 bytes */
    0x06,
    0x19, /* uuid16_t L2CAP(0x0100) */
    0x01,
    0x00,
    0x09, /* CsrUint16 0x0011 */
    0x00,
    0x11,
    0x35, /* DataElSeq 3 bytes */
    0x03,
    0x19, /* uuid16_t HIDP(0x0011) */
    0x00,
    0x11,
    0x09, /* BrowseGroupList    */
    0x00,
    0x05,
    0x35, /* Data element seq. 3 bytes */
    0x03,
    0x19,
    0x10,  /* 2 byte UUID, PublicBrowseGroup = 0x1002 */
    0x02,
    0x09, /* LanguageBaseAttributeIDList(0x0006) */
    0x00,
    0x06,
    0x35, /* DataElSeq 9 bytes */
    0x09,
    0x09, /* CsrUint16 0x656e */
    0x65,
    0x6e,
    0x09, /* CsrUint16 0x006a */
    0x00,
    0x6a,
    0x09, /* CsrUint16 0x0100 */
    0x01,
    0x00,
    0x09, /* BluetoothProfileDescriptorList(0x0009) */
    0x00,
    0x09,
    0x35, /* DataElSeq 8 bytes */
    0x08,
    0x35, /* DataElSeq 6 bytes */
    0x06,
    0x19, /* uuid16_t HID(0x1124) */
    0x11,
    0x24,
    0x09, /* CsrUint16 0x0100 */
    0x01,
    0x00,
    0x09, /* AdditionalProtocolDescriptorList(0x000d) */
    0x00,
    0x0d,
    0x35, /* DataElSeq 15 bytes */
    0x0f,
    0x35, /* DataElSeq 13 bytes */
    0x0d,
    0x35, /* DataElSeq 6 bytes */
    0x06,
    0x19, /* uuid16_t L2CAP(0x0100) */
    0x01,
    0x00,
    0x09, /* CsrUint16 0x0013 */
    0x00,
    0x13,
    0x35, /* DataElSeq 3 bytes */
    0x03,
    0x19, /* uuid16_t HIDP(0x0011) */
    0x00,
    0x11,
    0x09, /* ServiceName(0x0100) = "CSR Mouse" */
    0x01,
    0x00,
    0x25, /* String length 9 */
    0x09,
    'C','S','R',' ','M','o','u','s','e',
    0x09, /* ServiceDescription(0x0101) = "Three Button Mouse" */
    0x01,
    0x01,
    0x25, /* String length 18 */
    0x12,
    'T','h','r','e','e',' ','B','u','t','t','o','n',' ','M','o','u','s','e',
    0x09, /* ProviderName(0x0102) = "CSR HIDEngine" */
    0x01,
    0x02,
    0x25, /* String length 13 */
    0x0d,
    'C','S','R',' ','H','I','D','E','n','g','i','n','e',
    0x09, /* HIDDeviceReleaseNumber(0x0200) = "0x0100" */
    0x02,
    0x00,
    0x09, /* CsrUint16 0x0100 */
    0x01,
    0x00,
    0x09, /* HIDParserVersion(0x0201) = "0x0100" */
    0x02,
    0x01,
    0x09, /* CsrUint16 0x0100 */
    0x01,
    0x00,
    0x09, /* HIDDeviceSubclass(0x0202) = "0x80" */
    0x02,
    0x02,
    0x08, /* CsrUint8 0x80 */
    0x80,
    0x09, /* HIDCountryCode(0x0203) = "0x21" */
    0x02,
    0x03,
    0x08, /* CsrUint8 0x21 */
    0x21,
    0x09, /* HIDVirtualCable(0x0204) = "true" */
    0x02,
    0x04,
    0x28, /* CsrBool true */
    0x01,
    0x09, /* HIDReconnectInitiate(0x0205) = "true" */
    0x02,
    0x05,
    0x28, /* CsrBool true */
    0x01,
    0x09, /* HIDDescriptorList(0x0206) */
    0x02,
    0x06,
    0x35, /* DataElSeq 60 bytes */
    0x3c,
    0x35, /* DataElSeq 58 bytes */
    0x3a,
    0x08, /* CsrUint8 0x22 */
    0x22,
    0x25, 0x36, /* HID Descriptor Length 54 bytes */
    /* Start of Raw Data */
    0x05, 0x01, /* USAGE_PAGE(Generic Desktop) */
    0x09, 0x02, /* USAGE(Mouse) */
    0xa1, 0x01, /* COLLECTION(Application) */
    0x09, 0x01, /* USAGE(Pointer) */
    0xa1, 0x00, /* COLLECTION(Physical) */
    0x85, 0x02, /* ReportID(2) */
    0x05, 0x09, /* USAGE_PAGE(Buttons) */
    0x19, 0x01, /* USAGE_MINIMUM(Button1) */
    0x29, 0x03, /* USAGE_MAXIMUM(Button3) */
    0x15, 0x00, /* LOGICAL_MIN(0) */
    0x25, 0x01, /* LOGICAL_MAX(1) */
    0x95, 0x03, /* REPORT_COUNT(3) */
    0x75, 0x01, /* REPORT_SIZE(1) */
    0x81, 0x02, /* INPUT(Data,Var,Abs) */
    0x95, 0x01, /* REPORT_COUNT(1) */
    0x75, 0x05, /* REPORT_SIZE(5) */
    0x81, 0x03, /* INPUT(Const) */
    0x05, 0x01, /* USAGE_PAGE(Generic Desktop) */
    0x09, 0x30, /* USAGE(x) */
    0x09, 0x31, /* USAGE(y) */
    0x09, 0x38, /* USAGE(wheel) */
    0x15, 0x81, /* LOGICAL_MIN(-127) */
    0x25, 0x7f, /* LOGICAL_MAX(127) */
    0x75, 0x08, /* REPORT_SIZE(8) */
    0x95, 0x03, /* REPORT_COUNT(1) */
    0x81, 0x06, /* INPUT(Data,Var,Rel) */
    0xc0, /* END_COLLECTION */
    0xc0, /* END_COLLECTION */
    /* End of Raw Data */
    0x09, /* HIDLANGIDBaseList(0x0207) */
    0x02,
    0x07,
    0x35, /* DataElSeq 8 bytes */
    0x08,
    0x35, /* DataElSeq 6 bytes */
    0x06,
    0x09, /* CsrUint16 0x0409 */
    0x04,
    0x09,
    0x09, /* CsrUint16 0x0100 */
    0x01,
    0x00,
    0x09, /* HIDSDPDisable(0x0208) = "false" */
    0x02,
    0x08,
    0x28, /* CsrBool false */
    0x00,
    0x09, /* HIDBatteryPower(0x0209) = "true" */
    0x02,
    0x09,
    0x28, /* CsrBool true */
    0x01,
    0x09, /* HIDRemoteWake(0x020a) = "true" */
    0x02,
    0x0a,
    0x28, /* CsrBool true */
    0x01,
    0x09, /* HIDProfileVersion(0x020b) = "0x0100" */
    0x02,
    0x0b,
    0x09, /* CsrUint16 0x0100 */
    0x01,
    0x00,
    0x09, /* HIDSupervisionTimeout(0x020c) = "0x1f40" */
    0x02,
    0x0c,
    0x09, /* CsrUint16 0x1f40 */
    0x1f,
    0x40,
    0x09, /* HIDNormallyConnectable(0x020d) = "false" */
    0x02,
    0x0d,
    0x28, /* CsrBool false */
    0x00,
    0x09, /* HIDBootDevice(0x020e) = "false" */
    0x02,
    0x0e,
    0x28, /* CsrBool false */
    0x00,
};

#ifdef __cplusplus
}
#endif


#endif
