#-*-Makefile-*-
###############################################################################
#
#                (c) Cambridge Silicon Radio Limited 2009
#
#                All rights reserved and confidential information of CSR
#
# REVISION:      $Revision: #3 $
###############################################################################
TOP := .
include $(TOP)/local_rules.mk

STAGE_BIN_RELEASE :=stage/bchs_bin/$(VERSION)

.PHONY: lib bin all release clean

DEFAULT: help

# ----------------------------------------------------------------------
help:
	@$(ECHO) "---------------------"
	@$(ECHO) "Top makefile for Synergy BT"
	@$(ECHO) "---------------------"
	@$(ECHO) "The following targets are supported:"
	@$(ECHO) "   help      : This help"
	@$(ECHO) "   all       : Make lib and bin"
	@$(ECHO) "   bin       : Make all binaries."
	@$(ECHO) "   lib       : Make all libraries."
	@$(ECHO) "   clean     : Remove all autogenerated files."
	@$(ECHO) "   clean_lib : Cleanup libs"
	@$(ECHO) "   clean_bin : Cleanup binaries"
	@$(ECHO) "   veryclean : Removes all files that may be generated again"
	@$(ECHO) "   clean_dep : Removes all dependency files"
	@$(ECHO) "   version   : List the number of the actual Synergy BT version number."
	@$(ECHO) "   release   : Creates a setup.exe file that is ready for "
	@$(ECHO) "               installation. This is a binary release so "
	@$(ECHO) "               some source directories will not be available."
	@$(ECHO) "               To build a binary release the following tools "
	@$(ECHO) "               need to be installed: "
	@$(ECHO) "                 NSIS version 2.34 or later "
	@$(ECHO) "                      (http://nsis.sourceforge.net)"
	@$(ECHO) "               The 'release' depends on the binaries to have"
	@$(ECHO) "               been built prior to running the 'release'"
	@$(ECHO) "               target, so please remember to run a "
	@$(ECHO) "                   make clean lib TARGET=<arch> "
	@$(ECHO) "               before running the 'make release'"


all: bin

release:
	@if [ -d stage ]; then echo "removing old stageing area"; rm -rf stage; fi
	@echo "Making release area ..."
	@mkdir -p $(STAGE_BIN_RELEASE)

	@echo "Copying files ..."
	-@cp *.pdf $(STAGE_BIN_RELEASE)
	-@cp *.mk $(STAGE_BIN_RELEASE)
	-@cp makefile $(STAGE_BIN_RELEASE)
	-@cp readme.txt $(STAGE_BIN_RELEASE)

	@if [ -d applications ]; \
	then echo "Copying applications ..." ; \
	cp -r applications $(STAGE_BIN_RELEASE); \
	fi

	@if [ -d bluecore_firmware ]; \
	then echo "Copying bluecore_firmware ..."; \
	cp -r bluecore_firmware $(STAGE_BIN_RELEASE); \
	fi

	@echo "Copying drivers ..."
	@mkdir $(STAGE_BIN_RELEASE)/drivers

	@echo "Copying inc ..."
	@cp -r inc $(STAGE_BIN_RELEASE)

	@echo "Copying output ..."
	@cp -r output $(STAGE_BIN_RELEASE)

	@echo "Copying documentation ..."
	@cp -r doc $(STAGE_BIN_RELEASE)

	@if [ -d wireshark-dissector ]; \
	then echo "Copying wireshark-dissector ..."; \
	cp -r wireshark-dissector $(STAGE_BIN_RELEASE); \
	fi

	$(NSIS) /DVERSION=$(VERSION) ./tools/release/bchs-bin.nsi

md5:
	md5sum -c profile_managers/md5.txt

clean_dep:
	find . -name "*.d" -exec rm {} \;

# ----------------------------------------------------------------------
lib_core:
	$(MAKE) -C profile_managers/core_stack lib

lib_profiles:
	$(MAKE) -C profile_managers lib

lib_extras:
ifeq ($(filter -DEXCLUDE_CSR_BT_SC_DB_MEM_MODULE,$(CFLAGS) $(EXTRA_CFLAGS)),)
	$(MAKE) -C porting/sc_db/simple_mem lib
endif	
ifeq ($(filter -DEXCLUDE_CSR_BT_SC_DB_FILE_MODULE,$(CFLAGS) $(EXTRA_CFLAGS)),)
	$(MAKE) -C porting/sc_db/file lib
endif
ifeq ($(filter -DEXCLUDE_CSR_BT_VCARD_MODULE,$(CFLAGS) $(EXTRA_CFLAGS)),)
	$(MAKE) -C profile_managers/vcard lib
endif

ifeq ($(filter -DEXCLUDE_CSR_BT_SBC_MODULE,$(CFLAGS) $(EXTRA_CFLAGS)),)
	$(MAKE) -C porting/sbc/code lib
endif
ifeq  ($(CSR_SAMSUNG_SERVICE),1)
	$(MAKE) -C applications/socket lib
endif	
lib: lib_core lib_profiles lib_extras


app_lib: lib
ifneq ($(filter $(TARGET_PLATFORM),pcwin pclin),)
ifeq ($(HCI_IN_RELEASE),1)
	$(MAKE) -C applications/common -f makefile lib BUILD_TYPE=hci
	$(MAKE) -C applications/bootstrap -f makefile lib BUILD_TYPE=hci
endif
endif
	
ifeq  ($(CSR_SAMSUNG_SERVICE),1)
	$(MAKE) -C applications/ss_server -f makefile lib BUILD_TYPE=hci
	$(MAKE) -C applications/ss_client -f makefile lib BUILD_TYPE=hci
endif


# ----------------------------------------------------------------------
bin: app_lib
ifeq  ($(CSR_SAMSUNG_SERVICE),1)
	$(MAKE) -C applications/ss_demo_test all NO_DEPLIBS=1
	$(MAKE) -C applications/ss_app all NO_DEPLIBS=1
else
ifneq ($(filter $(TARGET_PLATFORM),pcwin pclin),)
	$(MAKE) -C applications/dun_gateway all NO_DEPLIBS=1
	$(MAKE) -C applications/dunc all NO_DEPLIBS=1
	$(MAKE) -C applications/hcrp_server all NO_DEPLIBS=1
	$(MAKE) -C applications/hdp all NO_DEPLIBS=1
	$(MAKE) -C applications/obex_bip all NO_DEPLIBS=1
	$(MAKE) -C applications/obex_bpp all NO_DEPLIBS=1
	$(MAKE) -C applications/obex_map all NO_DEPLIBS=1
	$(MAKE) -C applications/obex_pb all NO_DEPLIBS=1
	$(MAKE) -C applications/obex_push all NO_DEPLIBS=1
	$(MAKE) -C applications/obex_sync all NO_DEPLIBS=1
	$(MAKE) -C applications/sap all NO_DEPLIBS=1
ifeq ($(TARGET_PLATFORM),pcwin)
	$(MAKE) -C applications/tpt all NO_DEPLIBS=1

endif

ifeq ($(HCI_IN_RELEASE),1)
	$(MAKE) -C applications/hid_host all NO_DEPLIBS=1
	$(MAKE) -C applications/hid_device all NO_DEPLIBS=1
	$(MAKE) -C applications/pan all NO_DEPLIBS=1
endif
endif
	$(MAKE) -C applications/generic all NO_DEPLIBS=1
endif
	

# ----------------------------------------------------------------------
clean_bin:
ifeq  ($(CSR_SAMSUNG_SERVICE),1)
	$(MAKE) -C applications/ss_demo_test clean
	$(MAKE) -C applications/ss_app clean NO_DEPLIBS=1
else
ifneq ($(filter $(TARGET_PLATFORM),pcwin pclin),)
	$(MAKE) -C applications/dun_gateway clean
	$(MAKE) -C applications/dunc clean
	$(MAKE) -C applications/hcrp_server clean
	$(MAKE) -C applications/hdp clean
	$(MAKE) -C applications/obex_bip clean
	$(MAKE) -C applications/obex_bpp clean
	$(MAKE) -C applications/obex_map clean
	$(MAKE) -C applications/obex_pb clean
	$(MAKE) -C applications/obex_push clean
	$(MAKE) -C applications/obex_sync clean
	$(MAKE) -C applications/sap clean
ifeq ($(TARGET_PLATFORM),pcwin)
	$(MAKE) -C applications/tpt clean
endif

ifeq ($(HCI_IN_RELEASE),1)
	$(MAKE) -C applications/hid_host clean
	$(MAKE) -C applications/hid_device clean
	$(MAKE) -C applications/pan clean
endif
endif
	$(MAKE) -C applications/generic clean
endif	

clean_lib:
# Common
	$(MAKE) -C profile_managers/core_stack clean
	$(MAKE) -C profile_managers/vcard clean
	$(MAKE) -C profile_managers clean
	$(MAKE) -C porting/sbc/code clean
	$(MAKE) -C porting/sc_db/simple_mem clean
	$(MAKE) -C porting/sc_db/file clean
ifeq  ($(CSR_SAMSUNG_SERVICE),1)	
	$(MAKE) -C applications/socket clean
	$(MAKE) -C applications/ss_client clean
	$(MAKE) -C applications/ss_server clean
endif	
version:
	@echo "Actual Synergy BT version is: $(VERSION)"

clean: clean_lib clean_bin

veryclean:
	find . -depth  \( -name "*.pdb" -or \( \( -path "./drivers*" \
		 -or -path "./applications*" \) \
		 -and -name "*.exe" \) \
		 -or -name obj -type d \
		 -or -name "Debug" -type d \
		 -or -name "details" -type d \
		 -or -name "*.exp" \
		 -or -name "*.suo" \
		 -or -name "*.pdb" \
		 -or -name "*.lib" \
		 -or -name "*.ncb" \
		 -or -name "*.opt" \
		 -or -name "*.plg" \
		 -or -name "sc_db.db" \
		 -or -name "dev*.hid" \
		 -or -name "*.o" \
		 -or -name "*.obj" \
		 -or -name "*.d" \
		 -or -name "*.fti" \
		 -or -name "*.frm" \
		 -or -name "*.cfa" \
		 -or -name "*~" \
		 -or -name "core.*" \
		 -or -name "*.ko" \
		 -or -name "*.mod.*" \
		 -or -name "*.mod.*.d" \
		 -or -name ".*.o.cmd" \
		 -or -name ".*.ko.cmd" \
		 -or -name "out" \
		 -or -name "*_exe.pft" \
		 -or -name "*_pure.ini" \
		 -or -name "*_pure.log" \
		 -or -name ".tmp_versions" \) -print0 | xargs -n1000 -0r rm -rf
