<root>
<function name="g_file_attribute_info_list_add">
<description>
Adds a new attribute with @name to the @list, setting
its @type and @flags.

</description>
<parameters>
<parameter name="list">
<parameter_description> a #GFileAttributeInfoList.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the attribute to add.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GFileAttributeType for the attribute.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFileAttributeInfoFlags for the attribute.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_guess_content_type">
<description>
Tries to guess the type of content stored on @mount. Returns one or
more textual identifiers of well-known content types (typically
prefixed with &quot;x-content/&quot;), e.g. x-content/image-dcf for camera 
memory cards. See the &lt;ulink url=&quot;http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec&quot;&gt;shared-mime-info&lt;/ulink&gt;
specification for more on x-content types.

This is an asynchronous operation (see
g_mount_guess_content_type_sync() for the synchronous version), and
is finished by calling g_mount_guess_content_type_finish() with the
@mount and #GAsyncResult data returned in the @callback.

Since: 2.18

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount
</parameter_description>
</parameter>
<parameter name="force_rescan">
<parameter_description> Whether to force a rescan of the content. 
Otherwise a cached result will be used if available
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_flush_async">
<description>
Flushes a stream asynchronously.
For behaviour details see g_output_stream_flush().

When the operation is finished @callback will be 
called. You can then call g_output_stream_flush_finish() to get the 
result of the operation.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_attribute_info_list_ref">
<description>
References a file attribute info list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GFileAttributeInfoList to reference.
</parameter_description>
</parameter>
</parameters>
<return> #GFileAttributeInfoList or %NULL on error.
</return>
</function>

<function name="g_file_enumerator_is_closed">
<description>
Checks if the file enumerator has been closed.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @enumerator is closed.
</return>
</function>

<function name="g_loadable_icon_load">
<description>
Loads a loadable icon. For the asynchronous version of this function, 
see g_loadable_icon_load_async().


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GLoadableIcon.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> an integer.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description>  a location to store the type of the loaded icon, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream to read the icon from.
</return>
</function>

<function name="g_mount_eject">
<description>
Ejects a mount. This is an asynchronous operation, and is 
finished by calling g_mount_eject_finish() with the @mount 
and #GAsyncResult data returned in the @callback.

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the unmount if required for eject
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_attribute_string">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_drive_is_media_check_automatic">
<description>
Checks if @drive is capabable of automatically detecting media changes.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive is capabable of automatically detecting 
media changes, %FALSE otherwise.
</return>
</function>

<function name="g_cancellable_reset">
<description>
Resets @cancellable to its uncancelled state. 

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_monitor_new">
<description>
Gets a new #GUnixMountMonitor. The default rate limit for which the
monitor will report consecutive changes for the mount and mount
point entry files is the default for a #GFileMonitor. Use
g_unix_mount_monitor_set_rate_limit() to change this.


</description>
<parameters>
</parameters>
<return> a #GUnixMountMonitor. 
</return>
</function>

<function name="g_app_info_delete">
<description>
Tries to delete an #GAppInfo. 

On some platforms, there may be a difference between user-defined
#GAppInfo&lt;!-- --&gt;s which can be deleted, and system-wide ones which
cannot. See g_app_info_can_delete().


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @appinfo has been deleted

Since: 2.20
</return>
</function>

<function name="g_socket_service_is_active">
<description>
Check whether the service is active or not. An active
service will accept new clients that connect, while
a non-active service will let connecting clients queue
up until the service is started.


</description>
<parameters>
<parameter name="service">
<parameter_description> a #GSocketService
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the service is active, %FALSE otherwise

Since: 2.22
</return>
</function>

<function name="g_app_info_add_supports_type">
<description>
Adds a content type to the application information to indicate the 
application is capable of opening files with the given content type.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="content_type">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_file_info_get_size">
<description>
Gets the file's size.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a #goffset containing the file's size. 
</return>
</function>

<function name="g_socket_control_message_get_level">
<description>
Returns: and int describing the level

</description>
<parameters>
<parameter name="message">
<parameter_description> a #GSocketControlMessage
</parameter_description>
</parameter>
</parameters>
<return> and int describing the level

Since: 2.22
</return>
</function>

<function name="g_unix_mount_point_guess_can_eject">
<description>
Guesses whether a Unix mount point can be ejected.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_point is deemed to be ejectable.
</return>
</function>

<function name="g_file_info_set_attribute">
<description>
Sets the @attribute to contain the given value, if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GFileAttributeType
</parameter_description>
</parameter>
<parameter name="value_p">
<parameter_description> pointer to the value
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_make_symbolic_link">
<description>
Creates a symbolic link.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="symlink_value">
<parameter_description> a string with the value of the new symlink.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on the creation of a new symlink, %FALSE otherwise.
</return>
</function>

<function name="g_io_stream_has_pending">
<description>
Checks if a stream has pending actions.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GIOStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream has pending actions. 

Since: 2.22
</return>
</function>

<function name="g_cancellable_disconnect">
<description>
Disconnects a handler from an cancellable instance similar to
g_signal_handler_disconnect() but ensures that once this
function returns the handler will not run anymore in any thread.

This avoids a race condition where a thread cancels at the
same time as the cancellable operation is finished and the
signal handler is removed. See #GCancellable::cancelled for
details on how to use this.

If @cancellable is %NULL or @handler_id is %0 this function does
nothing.

Since: 2.22

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> A #GCancellable or %NULL.
</parameter_description>
</parameter>
<parameter name="handler_id">
<parameter_description> Handler id of the handler to be disconnected, or %0.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_input_stream_skip_finish">
<description>
Finishes a stream skip operation.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> the size of the bytes skipped, or %-1 on error.
</return>
</function>

<function name="g_resolver_set_default">
<description>
Sets @resolver to be the application's default resolver (reffing
@resolver, and unreffing the previous default resolver, if any).
Future calls to g_resolver_get_default() will return this resolver.

This can be used if an application wants to perform any sort of DNS
caching or &quot;pinning&quot;; it can implement its own #GResolver that
calls the original default resolver for DNS operations, and
implements its own cache policies on top of that, and then set
itself as the default resolver for all later code to use.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> the new default #GResolver
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_attribute_boolean">
<description>
Gets the value of a boolean attribute. If the attribute does not
contain a boolean value, %FALSE will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> the boolean value contained within the attribute. 
</return>
</function>

<function name="g_mount_operation_set_domain">
<description>
Sets the mount operation's domain. 

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the domain to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_content_type_from_mime_type">
<description>
Tries to find a content type based on the mime type name.


</description>
<parameters>
<parameter name="mime_type">
<parameter_description> a mime type string.
</parameter_description>
</parameter>
</parameters>
<return> Newly allocated string with content type or NULL when does not know.

Since: 2.18
</return>
</function>

<function name="GUnixMountMonitor">
<description>
Emitted when the unix mount points have changed.

</description>
<parameters>
<parameter name="monitor">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_sort_order">
<description>
Sets the sort order attribute in the file info structure. See 
%G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="sort_order">
<parameter_description> a sort order integer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_resolver_lookup_by_address_async">
<description>
Begins asynchronously reverse-resolving @address to determine its
associated hostname, and eventually calls @callback, which must
call g_resolver_lookup_by_address_finish() to get the final result.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> the address to reverse-resolve
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call after resolution completes
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data for @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_volume_enumerate_identifiers">
<description>
Gets the kinds of &lt;link linkend=&quot;volume-identifier&quot;&gt;identifiers&lt;/link&gt;
that @volume has. Use g_volume_get_identifer() to obtain 
the identifiers themselves.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of strings containing
kinds of identifiers. Use g_strfreev() to free.
</return>
</function>

<function name="g_socket_create_source">
<description>
Creates a %GSource that can be attached to a %GMainContext to monitor
for the availibility of the specified @condition on the socket.

The callback on the source is of the #GSocketSourceFunc type.

It is meaningless to specify %G_IO_ERR or %G_IO_HUP in condition;
these conditions will always be reported output if they are true.

@cancellable if not %NULL can be used to cancel the source, which will
cause the source to trigger, reporting the current condition. You can
check for this in the callback using g_cancellable_is_cancelled().


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> a #GIOCondition mask to monitor
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a %GCancellable or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated %GSource, free with g_source_unref().

Since: 2.22
</return>
</function>

<function name="g_unix_mount_point_is_loopback">
<description>
Checks if a unix mount point is a loopback device.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount point is a loopback. %FALSE otherwise. 
</return>
</function>

<function name="g_mount_operation_get_password">
<description>
Gets a password from the mount operation. 


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the password within @op.
</return>
</function>

<function name="g_output_stream_close">
<description>
Closes the stream, releasing resources related to it.

Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
Closing a stream multiple times will not return an error.

Closing a stream will automatically flush any outstanding buffers in the
stream.

Streams will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure 
resources are released as early as possible.

Some streams might keep the backing store of the stream (e.g. a file descriptor)
open after the stream is closed. See the documentation for the individual
stream for details.

On failure the first error that happened will be reported, but the close
operation will finish as much as possible. A stream that failed to
close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
is important to check and report the error to the user, otherwise
there might be a loss of data as all data might not be written.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
Cancelling a close will still leave the stream closed, but there some streams
can use a faster close that doesn't block to e.g. check errors. On
cancellation (as with any error) there is no guarantee that all written
data will reach the target. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GOutputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure
</return>
</function>

<function name="g_file_enumerator_next_files_async">
<description>
Request information for a number of files from the enumerator asynchronously.
When all i/o for the operation is finished the @callback will be called with
the requested information. 

The callback can be called with less than @num_files files in case of error
or at the end of the enumerator. In case of a partial error the callback will
be called with any succeeding items and no error, and on the next request the
error will be reported. If a request is cancelled the callback will be called
with %G_IO_ERROR_CANCELLED.

During an async request no other sync and async calls are allowed, and will
result in %G_IO_ERROR_PENDING errors. 

Any outstanding i/o request with higher priority (lower numerical value) will
be executed before an outstanding request with lower priority. Default
priority is %G_PRIORITY_DEFAULT.

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="num_files">
<parameter_description> the number of file info objects to request
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;gioscheduler&quot;&gt;io priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_enumerate_children_async">
<description>
Asynchronously gets the requested information about the files in a directory. The result
is a #GFileEnumerator object that will give out #GFileInfo objects for
all the files in the directory.

For more details, see g_file_enumerate_children() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_enumerate_children_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_get_username">
<description>
Get the user name from the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the user name.
</return>
</function>

<function name="g_file_output_stream_query_info_async">
<description>
Asynchronously queries the @stream for a #GFileInfo. When completed,
@callback will be called with a #GAsyncResult which can be used to 
finish the operation with g_file_output_stream_query_info_finish().

For the synchronous version of this function, see 
g_file_output_stream_query_info().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileOutputStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;gio-GIOScheduler&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_file_type">
<description>
Sets the file type in a #GFileInfo to @type.
See %G_FILE_ATTRIBUTE_STANDARD_TYPE.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GFileType.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_int16">
<description>
Reads a 16-bit/2-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_stream_get_byte_order() and g_data_stream_set_byte_order().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a signed 16-bit/2-byte value read from @stream or %0 if 
an error occurred.
</return>
</function>

<function name="g_file_attribute_info_list_new">
<description>
Creates a new file attribute info list.


</description>
<parameters>
</parameters>
<return> a #GFileAttributeInfoList.
</return>
</function>

<function name="g_unix_mount_guess_should_display">
<description>
Guesses whether a Unix mount should be displayed in the UI.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMountEntry
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_entry is deemed to be displayable.
</return>
</function>

<function name="g_async_result_get_user_data">
<description>
Gets the user data from a #GAsyncResult.


</description>
<parameters>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> the user data for @res. 
</return>
</function>

<function name="g_srv_target_list_sort">
<description>
Sorts @targets in place according to the algorithm in RFC 2782.


</description>
<parameters>
<parameter name="targets">
<parameter_description> a #GList of #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return> the head of the sorted list.

Since: 2.22
</return>
</function>

<function name="g_simple_async_result_set_handle_cancellation">
<description>
Sets whether to handle cancellation within the asynchronous operation.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="handle_cancellation">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_get_protocol_id">
<description>
Gets the socket protocol id the socket was created with.
In case the protocol is unknown, -1 is returned.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> a protocol id, or -1 if unknown

Since: 2.22
</return>
</function>

<function name="g_resolver_lookup_by_name">
<description>
Synchronously resolves @hostname to determine its associated IP
address(es). @hostname may be an ASCII-only or UTF-8 hostname, or
the textual form of an IP address (in which case this just becomes
a wrapper around g_inet_address_new_from_string()).

On success, g_resolver_lookup_by_name() will return a #GList of
#GInetAddress, sorted in order of preference. (That is, you should
attempt to connect to the first address first, then the second if
the first fails, etc.)

If the DNS resolution fails, @error (if non-%NULL) will be set to a
value from #GResolverError.

If @cancellable is non-%NULL, it can be used to cancel the
operation, in which case @error (if non-%NULL) will be set to
%G_IO_ERROR_CANCELLED.

If you are planning to connect to a socket on the resolved IP
address, it may be easier to create a #GNetworkAddress and use its
#GSocketConnectable interface.


</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="hostname">
<parameter_description> the hostname to look up
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GInetAddress, or %NULL on error. You
must unref each of the addresses and free the list when you are
done with it. (You can use g_resolver_free_addresses() to do this.)

Since: 2.22
</return>
</function>

<function name="g_unix_socket_address_new">
<description>
Creates a new #GUnixSocketAddress for @path.


</description>
<parameters>
<parameter name="path">
<parameter_description> the socket path
</parameter_description>
</parameter>
</parameters>
<return> a new #GUnixSocketAddress

Since: 2.22
</return>
</function>

<function name="g_file_info_clear_status">
<description>
Clears the status information from @info.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_unshadow">
<description>
Decrements the shadow count on @mount. Usually used by
#GVolumeMonitor implementations when destroying a shadow mount for
@mount, see g_mount_is_shadowed() for more information. The caller
will need to emit the #GMount::changed signal on @mount manually.

Since: 2.20

</description>
<parameters>
<parameter name="mount">
<parameter_description> A #GMount.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_eject_mountable">
<description>
Starts an asynchronous eject on a mountable.  
When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with 
g_file_eject_mountable_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_resolver_lookup_by_name_finish">
<description>
Retrieves the result of a call to
g_resolver_lookup_by_name_async().

If the DNS resolution failed, @error (if non-%NULL) will be set to
a value from #GResolverError. If the operation was cancelled,
@error will be set to %G_IO_ERROR_CANCELLED.


</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the result passed to your #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GInetAddress, or %NULL on error. See
g_resolver_lookup_by_name() for more details.

Since: 2.22
</return>
</function>

<function name="g_file_info_get_is_backup">
<description>
Checks if a file is a backup file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if file is a backup file, %FALSE otherwise.
</return>
</function>

<function name="g_file_find_enclosing_mount_async">
<description>
Asynchronously gets the mount for the file.

For more details, see g_file_find_enclosing_mount() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_find_enclosing_mount_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_volume_set_mount">
<description>

</description>
<parameters>
<parameter name="volume">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="mount">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_resolver_lookup_by_address">
<description>
Synchronously reverse-resolves @address to determine its
associated hostname.

If the DNS resolution fails, @error (if non-%NULL) will be set to
a value from #GResolverError.

If @cancellable is non-%NULL, it can be used to cancel the
operation, in which case @error (if non-%NULL) will be set to
%G_IO_ERROR_CANCELLED.


</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> the address to reverse-resolve
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a hostname (either ASCII-only, or in ASCII-encoded
form), or %NULL on error.

Since: 2.22
</return>
</function>

<function name="g_file_load_contents_async">
<description>
Starts an asynchronous load of the @file's contents.

For more details, see g_file_load_contents() which is
the synchronous version of this call.

When the load operation has completed, @callback will be called 
with @user data. To finish the operation, call 
g_file_load_contents_finish() with the #GAsyncResult returned by 
the @callback.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_file_type">
<description>
Gets a file's type (whether it is a regular file, symlink, etc). 
This is different from the file's content type, see g_file_info_get_content_type().


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileType for the given file.
</return>
</function>

<function name="GFileMonitor">
<description>
Emitted when a file has been changed. 

</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor.
</parameter_description>
</parameter>
<parameter name="file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
<parameter name="other_file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
<parameter name="event_type">
<parameter_description> a #GFileMonitorEvent.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_dup">
<description>
Duplicates a file info structure.


</description>
<parameters>
<parameter name="other">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a duplicate #GFileInfo of @other.
</return>
</function>

<function name="g_file_info_get_is_symlink">
<description>
Checks if a file is a symlink.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the given @info is a symlink.
</return>
</function>

<function name="g_inet_address_new_any">
<description>
Creates a #GInetAddress for the &quot;any&quot; address (unassigned/&quot;don't
care&quot;) for @family.


</description>
<parameters>
<parameter name="family">
<parameter_description> the address family
</parameter_description>
</parameter>
</parameters>
<return> a new #GInetAddress corresponding to the &quot;any&quot; address
for @family.

Since: 2.22
</return>
</function>

<function name="g_mount_can_unmount">
<description>
Checks if @mount can be mounted.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @mount can be unmounted.
</return>
</function>

<function name="g_file_query_filesystem_info_finish">
<description>
Finishes an asynchronous filesystem info query.  See
g_file_query_filesystem_info_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> #GFileInfo for given @file or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_filename_completer_new">
<description>
Creates a new filename completer.


</description>
<parameters>
</parameters>
<return> a #GFilenameCompleter.
</return>
</function>

<function name="g_data_output_stream_put_int16">
<description>
Puts a signed 16-bit integer into the output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #gint16.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_io_extension_point_lookup">
<description>
Looks up an existing extension point.


</description>
<parameters>
<parameter name="name">
<parameter_description> the name of the extension point
</parameter_description>
</parameter>
</parameters>
<return> the #GIOExtensionPoint, or %NULL if there is no
registered extension point with the given name
</return>
</function>

<function name="g_volume_get_identifier">
<description>
Gets the identifier of the given kind for @volume. 
See the &lt;link linkend=&quot;volume-identifier&quot;&gt;introduction&lt;/link&gt;
for more information about volume identifiers.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume
</parameter_description>
</parameter>
<parameter name="kind">
<parameter_description> the kind of identifier to return
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the
requested identfier, or %NULL if the #GVolume
doesn't have this kind of identifier
</return>
</function>

<function name="g_file_info_set_content_type">
<description>
Sets the content type attribute for a given #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="content_type">
<parameter_description> a content type. See #GContentType.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GDesktopAppInfo">
<description>
Information about an installed application from a desktop file.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_point_guess_icon">
<description>
Guesses the icon of a Unix mount point. 


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon
</return>
</function>

<function name="g_io_extension_point_get_required_type">
<description>
Gets the required type for @extension_point.


</description>
<parameters>
<parameter name="extension_point">
<parameter_description> a #GIOExtensionPoint
</parameter_description>
</parameter>
</parameters>
<return> the #GType that all implementations must have, 
or #G_TYPE_INVALID if the extension point has no required type
</return>
</function>

<function name="g_loadable_icon_load_async">
<description>
Loads an icon asynchronously. To finish this function, see 
g_loadable_icon_load_finish(). For the synchronous, blocking 
version of this function, see g_loadable_icon_load().

</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GLoadableIcon.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> an integer.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_set_byte_order">
<description>
This function sets the byte order for the given @stream. All subsequent
reads from the @stream will be read in the given @order.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> a #GDataStreamByteOrder to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_set_display_name_finish">
<description>
Finishes setting a display name started with 
g_file_set_display_name_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFile or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_info_set_edit_name">
<description>
Sets the edit name for the current file.
See %G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="edit_name">
<parameter_description> a string containing an edit name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_point_free">
<description>
Frees a unix mount point.

</description>
<parameters>
<parameter name="mount_point">
<parameter_description> unix mount point to free.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_emblem_get_origin">
<description>
Gets the origin of the emblem.


</description>
<parameters>
<parameter name="emblem">
<parameter_description> a #GEmblem 
</parameter_description>
</parameter>
</parameters>
<return> the origin of the emblem

Since: 2.18
</return>
</function>

<function name="g_filter_input_stream_set_close_base_stream">
<description>
Sets whether the base stream will be closed when @stream is closed.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterInputStream.
</parameter_description>
</parameter>
<parameter name="close_base">
<parameter_description> %TRUE to close the base stream.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_query_info_finish">
<description>
Finishes an asynchronous file info query. 
See g_file_query_info_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> #GFileInfo for given @file or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_attribute_info_list_lookup">
<description>
Gets the file attribute with the name @name from @list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GFileAttributeInfoList.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the attribute to lookup.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeInfo for the @name, or %NULL if an
attribute isn't found.
</return>
</function>

<function name="g_file_enumerator_close_finish">
<description>
Finishes closing a file enumerator, started from g_file_enumerator_close_async().

If the file enumerator was already closed when g_file_enumerator_close_async() 
was called, then this function will report %G_IO_ERROR_CLOSED in @error, and 
return %FALSE. If the file enumerator had pending operation when the close 
operation was started, then this function will report %G_IO_ERROR_PENDING, and
return %FALSE.  If @cancellable was not %NULL, then the operation may have been 
cancelled by triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %FALSE will be 
returned. 


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the close operation has finished successfully.
</return>
</function>

<function name="g_inet_address_get_is_site_local">
<description>
Tests whether @address is a site-local address such as 10.0.0.1
(that is, the address identifies a host on a local network that can
not be reached directly from the Internet, but which may have
outgoing Internet connectivity via a NAT or firewall).


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a site-local address.

Since: 2.22
</return>
</function>

<function name="g_app_info_set_as_default_for_type">
<description>
Sets the application as the default handler for a given type.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="content_type">
<parameter_description> the content type.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="GCancellable">
<description>
Emitted when the operation has been cancelled.

Can be used by implementations of cancellable operations. If the
operation is cancelled from another thread, the signal will be
emitted in the thread that cancelled the operation, not the
thread that is running the operation.

Note that disconnecting from this signal (or any signal) in a
multi-threaded program is prone to race conditions. For instance
it is possible that a signal handler may be invoked even
&lt;emphasis&gt;after&lt;/emphasis&gt; a call to
g_signal_handler_disconnect() for that handler has already
returned.

There is also a problem when cancellation happen
right before connecting to the signal. If this happens the
signal will unexpectedly not be emitted, and checking before
connecting to the signal leaves a race condition where this is
still happening.

In order to make it safe and easy to connect handlers there
are two helper functions: g_cancellable_connect() and
g_cancellable_disconnect() which protect against problems
like this.

An example of how to us this:
|[
/&lt;!-- --&gt;* Make sure we don't do any unnecessary work if already cancelled *&lt;!-- --&gt;/
if (g_cancellable_set_error_if_cancelled (cancellable))
return;

/&lt;!-- --&gt;* Set up all the data needed to be able to
* handle cancellation of the operation *&lt;!-- --&gt;/
my_data = my_data_new (...);

id = 0;
if (cancellable)
id = g_cancellable_connect (cancellable,
G_CALLBACK (cancelled_handler)
data, NULL);

/&lt;!-- --&gt;* cancellable operation here... *&lt;!-- --&gt;/

g_cancellable_disconnect (cancellable, id);

/&lt;!-- --&gt;* cancelled_handler is never called after this, it
* is now safe to free the data *&lt;!-- --&gt;/
my_data_free (my_data);  
]|

Note that the cancelled signal is emitted in the thread that
the user cancelled from, which may be the main thread. So, the
cancellable signal should not do something that can block.

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_filter_input_stream_get_close_base_stream">
<description>
Return value: %TRUE if the base stream will be closed.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterInputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the base stream will be closed.
</return>
</function>

<function name="g_file_monitor">
<description>
Obtains a file or directory monitor for the given file, depending
on the type of the file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileMonitorFlags
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileMonitor for the given @file, or %NULL on error.
Free the returned object with g_object_unref().

Since: 2.18
</return>
</function>

<function name="g_file_copy_async">
<description>
Copies the file @source to the location specified by @destination 
asynchronously. For details of the behaviour, see g_file_copy().

If @progress_callback is not %NULL, then that function that will be called
just like in g_file_copy(), however the callback will run in the main loop,
not in the thread that is doing the I/O operation.

When the operation is finished, @callback will be called. You can then call
g_file_copy_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="source">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="destination">
<parameter_description> destination #GFile
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> set of #GFileCopyFlags
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="progress_callback">
<parameter_description> function to callback with progress information
</parameter_description>
</parameter>
<parameter name="progress_callback_data">
<parameter_description> user data to pass to @progress_callback
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_create_readwrite_async">
<description>
Asynchronously creates a new file and returns a stream for reading and writing
to it. The file must not already exist.

For more details, see g_file_create_readwrite() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_create_readwrite_finish() to get the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_resolver_free_targets">
<description>
Frees @targets (which should be the return value from
g_resolver_lookup_service() or g_resolver_lookup_service_finish()).
(This is a convenience method; you can also simply free the
results by hand.)

Since: 2.22

</description>
<parameters>
<parameter name="targets">
<parameter_description> a #GList of #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_icon_new_for_string">
<description>
Generate a #GIcon instance from @str. This function can fail if
@str is not valid - see g_icon_to_string() for discussion.

If your application or library provides one or more #GIcon
implementations you need to ensure that each #GType is registered
with the type system prior to calling g_icon_new_for_string().


</description>
<parameters>
<parameter name="str">
<parameter_description> A string obtained via g_icon_to_string().
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> Return location for error.
</parameter_description>
</parameter>
</parameters>
<return> An object implementing the #GIcon interface or %NULL if
@error is set.

Since: 2.20
</return>
</function>

<function name="g_cancellable_is_cancelled">
<description>
Checks if a cancellable job has been cancelled.


</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable or NULL.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @cancellable is cancelled, 
FALSE if called with %NULL or if item is not cancelled. 
</return>
</function>

<function name="g_initable_init">
<description>
Initializes the object implementing the interface. This must be
done before any real use of the object after initial construction.

Implementations may also support cancellation. If @cancellable is not %NULL,
then initialization can be cancelled by triggering the cancellable object
from another thread. If the operation was cancelled, the error
%G_IO_ERROR_CANCELLED will be returned. If @cancellable is not %NULL and
the object doesn't support cancellable initialization the error
%G_IO_ERROR_NOT_SUPPORTED will be returned.

If this function is not called, or returns with an error then all
operations on the object should fail, generally returning the
error %G_IO_ERROR_NOT_INITIALIZED.

Implementations of this method must be idempotent, i.e. multiple calls
to this function with the same argument should return the same results.
Only the first call initializes the object, further calls return the result
of the first call. This is so that its safe to implement the singleton
pattern in the GObject constructor function.


</description>
<parameters>
<parameter name="initable">
<parameter_description> a #GInitable.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present.

Since: 2.22
</return>
</function>

<function name="g_drive_enumerate_identifiers">
<description>
Gets the kinds of identifiers that @drive has. 
Use g_drive_get_identifer() to obtain the identifiers
themselves.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of strings containing
kinds of identifiers. Use g_strfreev() to free.
</return>
</function>

<function name="g_volume_monitor_get_volumes">
<description>
Gets a list of the volumes on the system.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GVolume objects.
</return>
</function>

<function name="g_memory_input_stream_new_from_data">
<description>
Creates a new #GMemoryInputStream with data in memory of a given size.


</description>
<parameters>
<parameter name="data">
<parameter_description> input data
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of the data, may be -1 if @data is a nul-terminated string
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> function that is called to free @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> new #GInputStream read from @data of @len bytes.
</return>
</function>

<function name="g_desktop_app_info_new_from_keyfile">
<description>
Creates a new #GDesktopAppInfo.


</description>
<parameters>
<parameter name="key_file">
<parameter_description> an opened #GKeyFile
</parameter_description>
</parameter>
</parameters>
<return> a new #GDesktopAppInfo or %NULL on error.

Since: 2.18
</return>
</function>

<function name="g_file_info_get_is_hidden">
<description>
Checks if a file is hidden.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file is a hidden file, %FALSE otherwise.
</return>
</function>

<function name="g_themed_icon_get_names">
<description>
Gets the names of icons from within @icon.


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GThemedIcon.
</parameter_description>
</parameter>
</parameters>
<return> a list of icon names.
</return>
</function>

<function name="g_input_stream_is_closed">
<description>
Checks if an input stream is closed.


</description>
<parameters>
<parameter name="stream">
<parameter_description> input stream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stream is closed.
</return>
</function>

<function name="g_drive_has_volumes">
<description>
Check if @drive has any mountable volumes.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive contains volumes, %FALSE otherwise.
</return>
</function>

<function name="g_app_info_get_description">
<description>
Gets a human-readable description of an installed application.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing a description of the 
application @appinfo, or %NULL if none. 
</return>
</function>

<function name="g_app_info_equal">
<description>
Checks if two #GAppInfos are equal.


</description>
<parameters>
<parameter name="appinfo1">
<parameter_description> the first #GAppInfo.  
</parameter_description>
</parameter>
<parameter name="appinfo2">
<parameter_description> the second #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @appinfo1 is equal to @appinfo2. %FALSE otherwise.
</return>
</function>

<function name="g_mount_remount">
<description>
Remounts a mount. This is an asynchronous operation, and is 
finished by calling g_mount_remount_finish() with the @mount 
and #GAsyncResults data returned in the @callback.

Remounting is useful when some setting affecting the operation
of the volume has been changed, as these may need a remount to
take affect. While this is semantically equivalent with unmounting
and then remounting not all backends might need to actually be
unmounted.

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_is_closed">
<description>
Checks if an output stream has already been closed.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream is closed. %FALSE otherwise. 
</return>
</function>

<function name="g_inet_address_to_bytes">
<description>
Gets the raw binary address data from @address.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> a pointer to an internal array of the bytes in @address,
which should not be modified, stored, or freed.

Since: 2.22
</return>
</function>

<function name="g_vfs_get_supported_uri_schemes">
<description>
Gets a list of URI schemes supported by @vfs.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a #GVfs.
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of strings.
The returned array belongs to GIO and must 
not be freed or modified.
</return>
</function>

<function name="g_input_stream_close_async">
<description>
Requests an asynchronous closes of the stream, releasing resources related to it.
When the operation is finished @callback will be called. 
You can then call g_input_stream_close_finish() to get the result of the 
operation.

For behaviour details see g_input_stream_close().

The asyncronous methods have a default fallback that uses threads to implement
asynchronicity, so they are optional for inheriting classes. However, if you
override one you must override all.

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GInputStream.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_input_stream_query_info">
<description>
Queries a file input stream the given @attributes. This function blocks 
while querying the stream. For the asynchronous (non-blocking) version 
of this function, see g_file_input_stream_query_info_async(). While the 
stream is blocked, the stream will set the pending flag internally, and 
any other operations on the stream will fail with %G_IO_ERROR_PENDING.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileInputStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo, or %NULL on error.
</return>
</function>

<function name="g_volume_can_mount">
<description>
Checks if a volume can be mounted.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @volume can be mounted. %FALSE otherwise.
</return>
</function>

<function name="g_simple_async_result_get_source_tag">
<description>
Gets the source tag for the #GSimpleAsyncResult.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> a #gpointer to the source object for the #GSimpleAsyncResult.
</return>
</function>

<function name="g_file_append_to">
<description>
Gets an output stream for appending data to the file. If
the file doesn't already exist it is created.

By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in @flags the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

Some file systems don't allow all file names, and may
return an %G_IO_ERROR_INVALID_FILENAME error.
If the file is a directory the %G_IO_ERROR_IS_DIRECTORY error will be
returned. Other errors are possible too, and depend on what kind of
filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream, or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_volume_monitor_get">
<description>
Gets the volume monitor used by gio.


</description>
<parameters>
</parameters>
<return> a reference to the #GVolumeMonitor used by gio. Call
g_object_unref() when done with it.
</return>
</function>

<function name="g_data_input_stream_read_until_finish">
<description>
Finish an asynchronous call started by
g_data_input_stream_read_until_async().

Since: 2.20


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the #GAsyncResult that was provided to the callback.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a #gsize to get the length of the data read in.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a string with the data that was read before encountering
any of the stop characters. Set @length to a #gsize to get the length
of the string. This function will return %NULL on an error.
</return>
</function>

<function name="g_file_make_directory_with_parents">
<description>
Creates a directory and any parent directories that may not exist similar to
'mkdir -p'. If the file system does not support creating directories, this
function will fail, setting @error to %G_IO_ERROR_NOT_SUPPORTED.

For a local #GFile the newly created directories will have the default
(current) ownership and permissions of the current process.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if all directories have been successfully created, %FALSE
otherwise.

Since: 2.18
</return>
</function>

<function name="g_buffered_input_stream_peek_buffer">
<description>
Returns: read-only buffer

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> a #gsize to get the number of bytes available in the buffer.
</parameter_description>
</parameter>
</parameters>
<return> read-only buffer
</return>
</function>

<function name="GDrive">
<description>
Emitted when the physical eject button (if any) of a drive has
been pressed.

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_mount_enclosing_volume_finish">
<description>
Finishes a mount operation started by g_file_mount_enclosing_volume().


</description>
<parameters>
<parameter name="location">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present.
</return>
</function>

<function name="g_threaded_socket_service_new">
<description>
Creates a new #GThreadedSocketService with no listeners.  Listeners
must be added with g_socket_service_add_listeners().

</description>
<parameters>
</parameters>
<return> a new #GSocketService.
</return>
</function>

<function name="g_input_stream_set_pending">
<description>
Sets @stream to have actions pending. If the pending flag is
already set or @stream is closed, it will return %FALSE and set
@error.


</description>
<parameters>
<parameter name="stream">
<parameter_description> input stream
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if pending was previously unset and is now set.
</return>
</function>

<function name="g_resolver_lookup_service_async">
<description>
Begins asynchronously performing a DNS SRV lookup for the given
@service and @protocol in the given @domain, and eventually calls
@callback, which must call g_resolver_lookup_service_finish() to
get the final result. See g_resolver_lookup_service() for more
details.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="service">
<parameter_description> the service type to look up (eg, &quot;ldap&quot;)
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the networking protocol to use for @service (eg, &quot;tcp&quot;)
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the DNS domain to look up the service in
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call after resolution completes
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data for @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_address_enumerator_next">
<description>
Retrieves the next #GSocketAddress from @enumerator. Note that this
may block for some amount of time. (Eg, a #GNetworkAddress may need
to do a DNS lookup before it can return an address.) Use
g_socket_address_enumerator_next_async() if you need to avoid
blocking.

If @enumerator is expected to yield addresses, but for some reason
is unable to (eg, because of a DNS error), then the first call to
g_socket_address_enumerator_next() will return an appropriate error
in *@error. However, if the first call to
g_socket_address_enumerator_next() succeeds, then any further
internal errors (other than @cancellable being triggered) will be
ignored.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GSocketAddressEnumerator
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddress (owned by the caller), or %NULL on
error (in which case *@error will be set) or if there are no more
addresses.
</return>
</function>

<function name="g_file_monitor_cancel">
<description>
Cancels a file monitor.


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if monitor was cancelled.
</return>
</function>

<function name="g_data_output_stream_new">
<description>
Creates a new data output stream for @base_stream.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> #GDataOutputStream.
</return>
</function>

<function name="g_file_read_finish">
<description>
Finishes an asynchronous file read operation started with 
g_file_read_async(). 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInputStream or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_mount_get_root">
<description>
Gets the root directory on @mount.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile. 
The returned object should be unreffed with 
g_object_unref() when no longer needed.
</return>
</function>

<function name="g_cancellable_make_pollfd">
<description>
Creates a #GPollFD corresponding to @cancellable; this can be passed
to g_poll() and used to poll for cancellation. This is useful both
for unix systems without a native poll and for portability to
windows.

You are not supposed to read from the fd yourself, just check for
readable status. Reading to unset the readable status is done
with g_cancellable_reset().


</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable.
</parameter_description>
</parameter>
<parameter name="pollfd">
<parameter_description> a pointer to a #GPollFD
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_icon_get_file">
<description>
Gets the #GFile associated with the given @icon.


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GIcon.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile, or %NULL.
</return>
</function>

<function name="g_unix_input_stream_new">
<description>
Creates a new #GUnixInputStream for the given @fd. 

If @close_fd is %TRUE, the file descriptor will be closed 
when the stream is closed.


</description>
<parameters>
<parameter name="fd">
<parameter_description> a UNIX file descriptor
</parameter_description>
</parameter>
<parameter name="close_fd">
<parameter_description> %TRUE to close the file descriptor when done
</parameter_description>
</parameter>
</parameters>
<return> a new #GUnixInputStream
</return>
</function>

<function name="GSocketService">
<description>
The ::incoming signal is emitted when a new incoming connection
to @service needs to be handled.  The handler must initiate the
handling of @connection, but may not block; in essence,
asynchronous operations must be used.

If %TRUE is returned then no other handlers are called.

</description>
<parameters>
<parameter name="service">
<parameter_description> the #GSocketService.
</parameter_description>
</parameter>
<parameter name="connection">
<parameter_description> a new #GSocketConnection object.
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> the source_object passed to g_socket_listener_add_address().
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @connection has been handled.
</return>
</function>

<function name="g_app_info_launch">
<description>
Launches the application. Passes @files to the launched application 
as arguments, using the optional @launch_context to get information
about the details of the launcher (like what screen it is on).
On error, @error will be set accordingly.

To lauch the application without arguments pass a %NULL @files list.

Note that even if the launch is successful the application launched
can fail to start if it runs into problems during startup. There is
no way to detect this.

Some URIs can be changed when passed through a GFile (for instance
unsupported uris with strange formats like mailto:), so if you have
a textual uri you want to pass in as argument, consider using
g_app_info_launch_uris() instead.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
<parameter name="files">
<parameter_description> a #GList of #GFile objects
</parameter_description>
</parameter>
<parameter name="launch_context">
<parameter_description> a #GAppLaunchContext or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful launch, %FALSE otherwise. 
</return>
</function>

<function name="g_file_make_directory">
<description>
Creates a directory. Note that this will only create a child directory of
the immediate parent directory of the path or URI given by the #GFile. To 
recursively create directories, see g_file_make_directory_with_parents().
This function will fail if the parent directory does not exist, setting 
@error to %G_IO_ERROR_NOT_FOUND. If the file system doesn't support creating
directories, this function will fail, setting @error to 
%G_IO_ERROR_NOT_SUPPORTED.

For a local #GFile the newly created directory will have the default
(current) ownership and permissions of the current process.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful creation, %FALSE otherwise.
</return>
</function>

<function name="g_file_delete">
<description>
Deletes a file. If the @file is a directory, it will only be deleted if it 
is empty.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file was deleted. %FALSE otherwise.
</return>
</function>

<function name="g_seekable_seek">
<description>
Seeks in the stream by the given @offset, modified by @type.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> a #goffset.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GSeekType.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present.
</return>
</function>

<function name="g_desktop_app_info_new_from_filename">
<description>
Creates a new #GDesktopAppInfo.


</description>
<parameters>
<parameter name="filename">
<parameter_description> the path of a desktop file, in the GLib filename encoding
</parameter_description>
</parameter>
</parameters>
<return> a new #GDesktopAppInfo or %NULL on error.
</return>
</function>

<function name="g_io_extension_point_get_extension_by_name">
<description>
Finds a #GIOExtension for an extension point by name.


</description>
<parameters>
<parameter name="extension_point">
<parameter_description> a #GIOExtensionPoint
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> the name of the extension to get
</parameter_description>
</parameter>
</parameters>
<return> the #GIOExtension for @extension_point that has the
given name, or %NULL if there is no extension with that name
</return>
</function>

<function name="g_file_set_attribute">
<description>
Sets an attribute in the file with attribute name @attribute to @value.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> The type of the attribute
</parameter_description>
</parameter>
<parameter name="value_p">
<parameter_description> a pointer to the value (or the pointer itself if the type is a pointer type)
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the attribute was set, %FALSE otherwise.
</return>
</function>

<function name="g_data_input_stream_get_newline_type">
<description>
Gets the current newline type for the @stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
</parameters>
<return> #GDataStreamNewlineType for the given @stream.
</return>
</function>

<function name="g_data_input_stream_read_line_async">
<description>
The asynchronous version of g_data_input_stream_read_line().  It is
an error to have two outstanding calls to this function.

When the operation is finished, @callback will be called. You
can then call g_data_input_stream_read_line_finish() to get
the result of the operation.

Since: 2.20

</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_drive_can_poll_for_media">
<description>
Checks if a drive can be polled for media changes.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive can be polled for media changes,
%FALSE otherwise.
</return>
</function>

<function name="g_output_stream_write_finish">
<description>
Finishes a stream write operation.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #gssize containing the number of bytes written to the stream.
</return>
</function>

<function name="g_memory_input_stream_new">
<description>
Creates a new empty #GMemoryInputStream. 


</description>
<parameters>
</parameters>
<return> a new #GInputStream
</return>
</function>

<function name="g_socket_address_to_native">
<description>
Converts a #GSocketAddress to a native &lt;type&gt;struct
sockaddr&lt;/type&gt;, which can be passed to low-level functions like
connect() or bind().


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GSocketAddress
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> a pointer to a memory location that will contain the native
&lt;type&gt;struct sockaddr&lt;/type&gt;.
</parameter_description>
</parameter>
<parameter name="destlen">
<parameter_description> the size of @dest. Must be at least as large as
g_socket_address_get_native_size().
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @dest was filled in, %FALSE if @address is invalid
or @destlen is too small.

Since: 2.22
</return>
</function>

<function name="g_volume_can_eject">
<description>
Checks if a volume can be ejected.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @volume can be ejected. %FALSE otherwise.
</return>
</function>

<function name="g_socket_client_connect">
<description>
Tries to resolve the @connectable and make a network connection to it..

Upon a successful connection, a new #GSocketConnection is constructed
and returned.  The caller owns this new object and must drop their
reference to it when finished with it.

The type of the #GSocketConnection object returned depends on the type of
the underlying socket that is used. For instance, for a TCP/IP connection
it will be a #GTcpConnection.

The socket created will be the same family as the the address that the
@connectable resolves to, unless family is set with g_socket_client_set_family()
or indirectly via g_socket_client_set_local_address(). The socket type
defaults to %G_SOCKET_TYPE_STREAM but can be set with
g_socket_client_set_socket_type().

If a local address is specified with g_socket_client_set_local_address() the
socket will be bound to this address before connecting.


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="connectable">
<parameter_description> a #GSocketConnectable specifying the remote address.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection on success, %NULL on error.

Since: 2.22
</return>
</function>

<function name="g_app_info_create_from_commandline">
<description>
Creates a new #GAppInfo from the given information.


</description>
<parameters>
<parameter name="commandline">
<parameter_description> the commandline to use
</parameter_description>
</parameter>
<parameter name="application_name">
<parameter_description> the application name, or %NULL to use @commandline
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags that can specify details of the created #GAppInfo
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> new #GAppInfo for given command.
</return>
</function>

<function name="g_socket_client_get_protocol">
<description>
Gets the protocol name type of the socket client.

See g_socket_client_set_protocol() for details.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> a string or %NULL. don't free

Since: 2.22
</return>
</function>

<function name="g_io_scheduler_job_send_to_mainloop_async">
<description>
Used from an I/O job to send a callback to be run asynchronously 
in the main loop (main thread). The callback will be run when the 
main loop is available, but at that time the I/O job might have 
finished. The return value from the callback is ignored.

Note that if you are passing the @user_data from g_io_scheduler_push_job()
on to this function you have to ensure that it is not freed before
@func is called, either by passing %NULL as @notify to 
g_io_scheduler_push_job() or by using refcounting for @user_data.

</description>
<parameters>
<parameter name="job">
<parameter_description> a #GIOSchedulerJob
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GSourceFunc callback that will be called in the main thread
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a #GDestroyNotify for @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_byte">
<description>
Reads an unsigned 8-bit/1-byte value from @stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 8-bit/1-byte value read from the @stream or %0 
if an error occurred.
</return>
</function>

<function name="g_filename_completer_get_completions">
<description>
Gets an array of completion strings for a given initial text.


</description>
<parameters>
<parameter name="completer">
<parameter_description> the filename completer.
</parameter_description>
</parameter>
<parameter name="initial_text">
<parameter_description> text to be completed.
</parameter_description>
</parameter>
</parameters>
<return> array of strings with possible completions for @initial_text.
This array must be freed by g_strfreev() when finished. 
</return>
</function>

<function name="g_inet_address_get_family">
<description>
Gets @address's family


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> @address's family

Since: 2.22
</return>
</function>

<function name="g_desktop_app_info_new">
<description>
Creates a new #GDesktopAppInfo based on a desktop file id. 

A desktop file id is the basename of the desktop file, including the 
.desktop extension. GIO is looking for a desktop file with this name 
in the &lt;filename&gt;applications&lt;/filename&gt; subdirectories of the XDG data
directories (i.e. the directories specified in the 
&lt;envar&gt;XDG_DATA_HOME&lt;/envar&gt; and &lt;envar&gt;XDG_DATA_DIRS&lt;/envar&gt; environment 
variables). GIO also supports the prefix-to-subdirectory mapping that is
described in the &lt;ulink url=&quot;http://standards.freedesktop.org/menu-spec/latest/&quot;&gt;Menu Spec&lt;/ulink&gt; 
(i.e. a desktop id of kde-foo.desktop will match
&lt;filename&gt;/usr/share/applications/kde/foo.desktop&lt;/filename&gt;).


</description>
<parameters>
<parameter name="desktop_id">
<parameter_description> the desktop file id
</parameter_description>
</parameter>
</parameters>
<return> a new #GDesktopAppInfo, or %NULL if no desktop file with that id
</return>
</function>

<function name="g_socket_client_connect_to_host_finish">
<description>
Finishes an async connect operation. See g_socket_client_connect_to_host_async()


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection on success, %NULL on error.

Since: 2.22
</return>
</function>

<function name="GNetworkAddress">
<description>
A #GSocketConnectable for resolving a hostname and connecting to
that host.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_dummy_file_new">
<description>

</description>
<parameters>
<parameter name="uri">
<parameter_description> Universal Resource Identifier for the dummy file object.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFile. 
</return>
</function>

<function name="g_mount_is_shadowed">
<description>
Determines if @mount is shadowed. Applications or libraries should
avoid displaying @mount in the user interface if it is shadowed.

A mount is said to be shadowed if there exists one or more user
visible objects (currently #GMount objects) with a root that is
inside the root of @mount.

One application of shadow mounts is when exposing a single file
system that is used to address several logical volumes. In this
situation, a #GVolumeMonitor implementation would create two
#GVolume objects (for example, one for the camera functionality of
the device and one for a SD card reader on the device) with
activation URIs &lt;literal&gt;gphoto2://[usb:001,002]/store1/&lt;/literal&gt;
and &lt;literal&gt;gphoto2://[usb:001,002]/store2/&lt;/literal&gt;. When the
underlying mount (with root
&lt;literal&gt;gphoto2://[usb:001,002]/&lt;/literal&gt;) is mounted, said
#GVolumeMonitor implementation would create two #GMount objects
(each with their root matching the corresponding volume activation
root) that would shadow the original mount.

The proxy monitor in GVfs 2.26 and later, automatically creates and
manage shadow mounts (and shadows the underlying mount) if the
activation root on a #GVolume is set.


</description>
<parameters>
<parameter name="mount">
<parameter_description> A #GMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount is shadowed.

Since: 2.20
</return>
</function>

<function name="fen_add">
<description>
Won't hold a ref, we have a timout callback to clean unused fdata.
If there is no value for a key, add it and return it; else return the old
one.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_icon">
<description>
Gets the icon for a file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> #GIcon for the given @info.
</return>
</function>

<function name="g_filter_output_stream_set_close_base_stream">
<description>
Sets whether the base stream will be closed when @stream is closed.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterOutputStream.
</parameter_description>
</parameter>
<parameter name="close_base">
<parameter_description> %TRUE to close the base stream.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_set_display_name">
<description>
Renames @file to the specified display name.

The display name is converted from UTF8 to the correct encoding for the target
filesystem if possible and the @file is renamed to this.

If you want to implement a rename operation in the user interface the edit name
(#G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME) should be used as the initial value in the rename
widget, and then the result after editing should be passed to g_file_set_display_name().

On success the resulting converted filename is returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="display_name">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFile specifying what @file was renamed to, or %NULL 
if there was an error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_info_set_attribute_int64">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> attribute name to set.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> int64 value to set attribute to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_uint16">
<description>
Reads an unsigned 16-bit/2-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_stream_get_byte_order() and g_data_stream_set_byte_order(). 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 16-bit/2-byte value read from the @stream or %0 if 
an error occurred. 
</return>
</function>

<function name="g_socket_client_set_socket_type">
<description>
Sets the socket type of the socket client.
The sockets created by this object will be of the specified
type.

It doesn't make sense to specify a type of %G_SOCKET_TYPE_DATAGRAM,
as GSocketClient is used for connection oriented services.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GSocketType
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_remount_finish">
<description>
Finishes remounting a mount. If any errors occurred during the operation, 
@error will be set to contain the errors and %FALSE will be returned.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount was successfully remounted. %FALSE otherwise.
</return>
</function>

<function name="g_simple_async_result_set_from_error">
<description>
Sets the result from a #GError. 

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_new_for_commandline_arg">
<description>
Creates a #GFile with the given argument from the command line. The value of
@arg can be either a URI, an absolute path or a relative path resolved
relative to the current working directory.
This operation never fails, but the returned object might not support any
I/O operation if @arg points to a malformed path.


</description>
<parameters>
<parameter name="arg">
<parameter_description> a command line string.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFile. 
</return>
</function>

<function name="g_io_error_quark">
<description>
Gets the GIO Error Quark.


</description>
<parameters>
</parameters>
<return> a #GQuark.
</return>
</function>

<function name="g_io_extension_point_set_required_type">
<description>
Sets the required type for @extension_point to @type. 
All implementations must henceforth have this type.

</description>
<parameters>
<parameter name="extension_point">
<parameter_description> a #GIOExtensionPoint
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GType to require
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_network_service_get_domain">
<description>
Gets the domain that @srv serves. This might be either UTF-8 or
ASCII-encoded, depending on what @srv was created with.


</description>
<parameters>
<parameter name="srv">
<parameter_description> a #GNetworkService
</parameter_description>
</parameter>
</parameters>
<return> @srv's domain name

Since: 2.22
</return>
</function>

<function name="GVolume">
<description>
This signal is emitted when the #GVolume have been removed. If
the recipient is holding references to the object they should
release them so the object can be finalized.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_socket_address_enumerator_next_async">
<description>
Asynchronously retrieves the next #GSocketAddress from @enumerator
and then calls @callback, which must call
g_socket_address_enumerator_next_finish() to get the result.

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GSocketAddressEnumerator
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GDataOutputStream">
<description>
Determines the byte ordering that is used when writing 
multi-byte entities (such as integers) to the stream.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_point_get_fs_type">
<description>
Gets the file system type for the mount point.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the file system type.
</return>
</function>

<function name="g_volume_monitor_get_mounts">
<description>
Gets a list of the mounts on the system.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GMount objects.
</return>
</function>

<function name="g_file_query_info_async">
<description>
Asynchronously gets the requested information about specified @file. The result
is a #GFileInfo object that contains key-value attributes (such as type or size
for the file).

For more details, see g_file_query_info() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_query_info_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_app_info_remove_supports_type">
<description>
Removes a supported type from an application, if possible.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="content_type">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_io_scheduler_push_job">
<description>
Schedules the I/O job to run. 

@notify will be called on @user_data after @job_func has returned,
regardless whether the job was cancelled or has run to completion.

If @cancellable is not %NULL, it can be used to cancel the I/O job
by calling g_cancellable_cancel() or by calling 
g_io_scheduler_cancel_all_jobs().

</description>
<parameters>
<parameter name="job_func">
<parameter_description> a #GIOSchedulerJobFunc.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @job_func
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a #GDestroyNotify for @user_data, or %NULL
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;gioscheduler&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_set_attribute_byte_string">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_BYTE_STRING to @value. 
If @attribute is of a different type, this operation will fail, 
returning %FALSE. 

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string containing the attribute's new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set to @value 
in the @file, %FALSE otherwise.
</return>
</function>

<function name="g_unix_output_stream_get_close_fd">
<description>
Return value: %TRUE if the file descriptor is closed when done

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GUnixOutputStream
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file descriptor is closed when done

Since: 2.20
</return>
</function>

<function name="g_data_input_stream_set_newline_type">
<description>
Sets the newline type for the @stream.

Note that using G_DATA_STREAM_NEWLINE_TYPE_ANY is slightly unsafe. If a read
chunk ends in &quot;CR&quot; we must read an additional byte to know if this is &quot;CR&quot; or
&quot;CR LF&quot;, and this might block if there is no more data availible.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the type of new line return as #GDataStreamNewlineType.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_set_op_res_gboolean">
<description>
Sets the operation result to a boolean within the asynchronous result.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="op_res">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_inet_socket_address_new">
<description>
Creates a new #GInetSocketAddress for @address and @port.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> a port number
</parameter_description>
</parameter>
</parameters>
<return> a new #GInetSocketAddress

Since: 2.22
</return>
</function>

<function name="g_buffered_input_stream_peek">
<description>
Peeks in the buffer, copying data of size @count into @buffer, 
offset @offset bytes.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a pointer to an allocated chunk of memory.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
</parameters>
<return> a #gsize of the number of bytes peeked, or %-1 on error.
</return>
</function>

<function name="g_srv_target_get_weight">
<description>
Gets @target's weight. You should not need to look at this;
#GResolver already sorts the targets according to the algorithm in
RFC 2782.


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return> @target's weight

Since: 2.22
</return>
</function>

<function name="g_mount_operation_set_password">
<description>
Sets the mount operation's password to @password.  


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="password">
<parameter_description> password to set.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_winhttp_file_output_stream_new">
<description>

</description>
<parameters>
<parameter name="file">
<parameter_description> the GWinHttpFile being read
</parameter_description>
</parameter>
<parameter name="connection">
<parameter_description> handle to the HTTP connection, as from WinHttpConnect()
</parameter_description>
</parameter>
<parameter name="request">
<parameter_description> handle to the HTTP request, as from WinHttpOpenRequest
</parameter_description>
</parameter>
</parameters>
<return> #GFileOutputStream for the given request
</return>
</function>

<function name="g_socket_listen">
<description>
Marks the socket as a server socket, i.e. a socket that is used
to accept incoming requests using g_socket_accept().

Before calling this the socket must be bound to a local address using
g_socket_bind().


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.

Since: 2.22
</return>
</function>

<function name="g_initable_new">
<description>
Helper function for constructing #GInitiable object. This is
similar to g_object_newv() but also initializes the object
and returns %NULL, setting an error on failure.


</description>
<parameters>
<parameter name="object_type">
<parameter_description> a #GType supporting #GInitable.
</parameter_description>
</parameter>
<parameter name="n_parameters">
<parameter_description> the number of parameters in @parameters
</parameter_description>
</parameter>
<parameter name="parameters">
<parameter_description> the parameters to use to construct the object
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GObject, or %NULL on error

Since: 2.22
</return>
</function>

<function name="g_file_query_writable_namespaces">
<description>
Obtain the list of attribute namespaces where new attributes 
can be created by a user. An example of this is extended
attributes (in the &quot;xattr&quot; namespace).

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeInfoList describing the writable namespaces.
When you are done with it, release it with g_file_attribute_info_list_unref()
</return>
</function>

<function name="g_file_info_set_attribute_uint32">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> an unsigned 32-bit integer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_volume_get_name">
<description>
Gets the name of @volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> the name for the given @volume. The returned string should 
be freed with g_free() when no longer needed.
</return>
</function>

<function name="g_simple_async_result_complete_in_idle">
<description>
Completes an asynchronous function in the main event loop using 
an idle function.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_flush_finish">
<description>
Finishes flushing an output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if flush operation suceeded, %FALSE otherwise.
</return>
</function>

<function name="g_file_info_set_attribute_byte_string">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a byte string.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_inet_address_get_is_link_local">
<description>
Tests whether @address is a link-local address (that is, if it
identifies a host on a local network that is not connected to the
Internet).


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a link-local address.

Since: 2.22
</return>
</function>

<function name="g_emblem_new_with_origin">
<description>
Creates a new emblem for @icon.


</description>
<parameters>
<parameter name="icon">
<parameter_description> a GIcon containing the icon.
</parameter_description>
</parameter>
<parameter name="origin">
<parameter_description> a GEmblemOrigin enum defining the emblem's origin
</parameter_description>
</parameter>
</parameters>
<return> a new #GEmblem.

Since: 2.18
</return>
</function>

<function name="g_drive_has_media">
<description>
Checks if the @drive has media. Note that the OS may not be polling
the drive for media changes; see g_drive_is_media_check_automatic()
for more details.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @drive has media, %FALSE otherwise.
</return>
</function>

<function name="g_file_attribute_matcher_enumerate_namespace">
<description>
Checks if the matcher will match all of the keys in a given namespace.
This will always return %TRUE if a wildcard character is in use (e.g. if 
matcher was created with &quot;standard::*&quot; and @ns is &quot;standard&quot;, or if matcher was created
using &quot;*&quot; and namespace is anything.) 

TODO: this is awkwardly worded.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
<parameter name="ns">
<parameter_description> a string containing a file attribute namespace.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the matcher matches all of the entries
in the given @ns, %FALSE otherwise.
</return>
</function>

<function name="g_simple_async_result_get_op_res_gboolean">
<description>
Gets the operation result boolean from within the asynchronous result.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation's result was %TRUE, %FALSE 
if the operation's result was %FALSE. 
</return>
</function>

<function name="g_memory_output_stream_get_size">
<description>
Gets the size of the currently allocated data area (availible from
g_memory_output_stream_get_data()). If the stream isn't
growable (no realloc was passed to g_memory_output_stream_new()) then
this is the maximum size of the stream and further writes
will return %G_IO_ERROR_NO_SPACE.

Note that for growable streams the returned size may become invalid on
the next write or truncate operation on the stream.

If you want the number of bytes currently written to the stream, use
g_memory_output_stream_get_data_size().


</description>
<parameters>
<parameter name="ostream">
<parameter_description> a #GMemoryOutputStream
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes allocated for the data buffer
</return>
</function>

<function name="port_add_internal">
<description>
&lt; private &gt;
Unsafe, need lock fen_lock.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_set_op_res_gssize">
<description>
Sets the operation result within the asynchronous result to 
the given @op_res. 

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="op_res">
<parameter_description> a #gssize.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_get_local_address">
<description>
Try to get the local address of a bound socket. This is only
useful if the socket has been bound to a local address.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddress or %NULL on error.

Since: 2.22
</return>
</function>

<function name="g_content_type_get_icon">
<description>
Gets the icon for a content type.


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string.
</parameter_description>
</parameter>
</parameters>
<return> #GIcon corresponding to the content type.
</return>
</function>

<function name="g_unix_output_stream_get_fd">
<description>
Return the UNIX file descriptor that the stream writes to.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GUnixOutputStream
</parameter_description>
</parameter>
</parameters>
<return> The file descriptor of @stream

Since: 2.20
</return>
</function>

<function name="mime_info_cache_reload">
<description>
Reload the mime information for the @dir.

</description>
<parameters>
<parameter name="dir">
<parameter_description> directory path which needs reloading.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_loadable_icon_load_finish">
<description>
Finishes an asynchronous icon load started in g_loadable_icon_load_async().


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GLoadableIcon.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a location to store the type of the loaded icon, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream to read the icon from.
</return>
</function>

<function name="g_resolver_get_default">
<description>
Gets the default #GResolver. You should unref it when you are done
with it. #GResolver may use its reference count as a hint about how
many threads/processes, etc it should allocate for concurrent DNS
resolutions.


</description>
<parameters>
</parameters>
<return> the #GResolver.

Since: 2.22
</return>
</function>

<function name="g_file_query_info">
<description>
Gets the requested information about specified @file. The result
is a #GFileInfo object that contains key-value attributes (such as 
the type or size of the file).

The @attribute value is a string that specifies the file attributes that
should be gathered. It is not an error if it's not possible to read a particular
requested attribute from a file - it just won't be set. @attribute should
be a comma-separated list of attribute or attribute wildcards. The wildcard &quot;*&quot;
means all attributes, and a wildcard like &quot;standard::*&quot; means all attributes in the standard
namespace. An example attribute query be &quot;standard::*,owner::user&quot;.
The standard attributes are available as defines, like #G_FILE_ATTRIBUTE_STANDARD_NAME.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

For symlinks, normally the information about the target of the
symlink is returned, rather than information about the symlink itself.
However if you pass #G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS in @flags the
information about the symlink itself will be returned. Also, for symlinks
that point to non-existing files the information about the symlink itself
will be returned.

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo for the given @file, or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_info_has_attribute">
<description>
Checks if a file info structure has an attribute named @attribute.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @Ginfo has an attribute named @attribute, 
%FALSE otherwise.
</return>
</function>

<function name="g_drive_get_volumes">
<description>
Get a list of mountable volumes for @drive.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> #GList containing any #GVolume objects on the given @drive.
</return>
</function>

<function name="g_desktop_app_info_set_desktop_env">
<description>
Sets the name of the desktop that the application is running in.
This is used by g_app_info_should_show() to evaluate the
&lt;literal&gt;OnlyShowIn&lt;/literal&gt; and &lt;literal&gt;NotShowIn&lt;/literal&gt;
desktop entry fields.

The &lt;ulink url=&quot;http://standards.freedesktop.org/menu-spec/latest/&quot;&gt;Desktop 
Menu specification&lt;/ulink&gt; recognizes the following:
&lt;simplelist&gt;
&lt;member&gt;GNOME&lt;/member&gt;
&lt;member&gt;KDE&lt;/member&gt;
&lt;member&gt;ROX&lt;/member&gt;
&lt;member&gt;XFCE&lt;/member&gt;
&lt;member&gt;Old&lt;/member&gt; 
&lt;/simplelist&gt;

Should be called only once; subsequent calls are ignored.

</description>
<parameters>
<parameter name="desktop_env">
<parameter_description> a string specifying what desktop this is
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_winhttp_vfs_new">
<description>
Returns: a new #GVfs handle.

</description>
<parameters>
</parameters>
<return> a new #GVfs handle.
</return>
</function>

<function name="g_file_io_stream_query_info">
<description>
Queries a file io stream for the given @attributes.
This function blocks while querying the stream. For the asynchronous
version of this function, see g_file_io_stream_query_info_async().
While the stream is blocked, the stream will set the pending flag
internally, and any other operations on the stream will fail with
%G_IO_ERROR_PENDING.

Can fail if the stream was already closed (with @error being set to
%G_IO_ERROR_CLOSED), the stream has pending operations (with @error being
set to %G_IO_ERROR_PENDING), or if querying info is not supported for
the stream's interface (with @error being set to %G_IO_ERROR_NOT_SUPPORTED). I
all cases of failure, %NULL will be returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %NULL will
be returned.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileIOStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo for the @stream, or %NULL on error.

Since: 2.22
</return>
</function>

<function name="GMount">
<description>
This signal is emitted when the #GMount is about to be
unmounted.

Since: 2.22.

</description>
<parameters>
<parameter name="mount">
<parameter_description> the object on which the signal is emitted
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_eject_finish">
<description>
Finishes ejecting a mount. If any errors occurred during the operation, 
@error will be set to contain the errors and %FALSE will be returned.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount was successfully ejected. %FALSE otherwise.
</return>
</function>

<function name="GUnixSocketAddress">
<description>
A UNIX-domain (local) socket address, corresponding to a
&lt;type&gt;struct sockaddr_un&lt;/type&gt;.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_output_stream_set_pending">
<description>
Sets @stream to have actions pending. If the pending flag is
already set or @stream is closed, it will return %FALSE and set
@error.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if pending was previously unset and is now set.
</return>
</function>

<function name="g_file_info_get_attribute_status">
<description>
Gets the attribute status for an attribute key.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeStatus for the given @attribute, or 
%G_FILE_ATTRIBUTE_STATUS_UNSET if the key is invalid.

</return>
</function>

<function name="g_cancellable_new">
<description>
Creates a new #GCancellable object.

Applications that want to start one or more operations
that should be cancellable should create a #GCancellable
and pass it to the operations.

One #GCancellable can be used in multiple consecutive
operations, but not in multiple concurrent operations.


</description>
<parameters>
</parameters>
<return> a #GCancellable.
</return>
</function>

<function name="g_input_stream_skip">
<description>
Tries to skip @count bytes from the stream. Will block during the operation.

This is identical to g_input_stream_read(), from a behaviour standpoint,
but the bytes that are skipped are not returned to the user. Some
streams have an implementation that is more efficient than reading the data.

This function is optional for inherited classes, as the default implementation
emulates it using read.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be skipped from the stream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes skipped, or -1 on error
</return>
</function>

<function name="g_mount_operation_set_password_save">
<description>
Sets the state of saving passwords for the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="save">
<parameter_description> a set of #GPasswordSave flags.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_app_info_launch_default_for_uri">
<description>
Utility function that launches the default application 
registered to handle the specified uri. Synchronous I/O
is done on the uri to detect the type of the file if
required.


</description>
<parameters>
<parameter name="uri">
<parameter_description> the uri to show
</parameter_description>
</parameter>
<parameter name="launch_context">
<parameter_description> an optional #GAppLaunchContext.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_data_output_stream_set_byte_order">
<description>
Sets the byte order of the data output stream to @order.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="order">
<parameter_description> a %GDataStreamByteOrder.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_extension_get_priority">
<description>
Gets the priority with which @extension was registered.


</description>
<parameters>
<parameter name="extension">
<parameter_description> a #GIOExtension
</parameter_description>
</parameter>
</parameters>
<return> the priority of @extension
</return>
</function>

<function name="g_file_enumerator_set_pending">
<description>
Sets the file enumerator as having pending operations.

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="pending">
<parameter_description> a boolean value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_get_fd">
<description>
Gets the file descriptor for a cancellable job. This can be used to
implement cancellable operations on Unix systems. The returned fd will
turn readable when @cancellable is cancelled.

You are not supposed to read from the fd yourself, just check for
readable status. Reading to unset the readable status is done
with g_cancellable_reset().

See also g_cancellable_make_pollfd().


</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable.
</parameter_description>
</parameter>
</parameters>
<return> A valid file descriptor. %-1 if the file descriptor 
is not supported, or on errors. 
</return>
</function>

<function name="GNetworkService">
<description>
A #GSocketConnectable for resolving a SRV record and connecting to
that service.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_buffered_input_stream_fill_finish">
<description>
Finishes an asynchronous read.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #gssize of the read stream, or %-1 on an error. 
</return>
</function>

<function name="g_mount_get_icon">
<description>
Gets the icon for @mount.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon.
The returned object should be unreffed with 
g_object_unref() when no longer needed.
</return>
</function>

<function name="g_mount_operation_reply">
<description>
Emits the #GMountOperation::reply signal.

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GMountOperationResult
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_themed_icon_new_with_default_fallbacks">
<description>
Creates a new themed icon for @iconname, and all the names
that can be created by shortening @iconname at '-' characters.

In the following example, @icon1 and @icon2 are equivalent:
|[
const char *names[] = { 
&quot;gnome-dev-cdrom-audio&quot;,
&quot;gnome-dev-cdrom&quot;,
&quot;gnome-dev&quot;,
&quot;gnome&quot;
};

icon1 = g_themed_icon_new_from_names (names, 4);
icon2 = g_themed_icon_new_with_default_fallbacks (&quot;gnome-dev-cdrom-audio&quot;);
]|


</description>
<parameters>
<parameter name="iconname">
<parameter_description> a string containing an icon name
</parameter_description>
</parameter>
</parameters>
<return> a new #GThemedIcon.
</return>
</function>

<function name="g_file_attribute_matcher_matches_only">
<description>
Checks if a attribute matcher only matches a given attribute. Always
Returns: %TRUE if the matcher only matches @attribute. %FALSE otherwise.

</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the matcher only matches @attribute. %FALSE otherwise.
</return>
</function>

<function name="g_drive_can_eject">
<description>
Checks if a drive can be ejected.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @drive can be ejected, %FALSE otherwise.
</return>
</function>

<function name="g_socket_address_new_from_native">
<description>
Creates a #GSocketAddress subclass corresponding to the native
&lt;type&gt;struct sockaddr&lt;/type&gt; @native.


</description>
<parameters>
<parameter name="native">
<parameter_description> a pointer to a &lt;type&gt;struct sockaddr&lt;/type&gt;
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the size of the memory location pointed to by @native
</parameter_description>
</parameter>
</parameters>
<return> a new #GSocketAddress if @native could successfully be converted,
otherwise %NULL.

Since: 2.22
</return>
</function>

<function name="g_file_enumerator_get_container">
<description>
Get the #GFile container which is being enumerated.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator
</parameter_description>
</parameter>
</parameters>
<return> the #GFile which is being enumerated.

Since: 2.18.
</return>
</function>

<function name="g_buffered_input_stream_fill_async">
<description>
Reads data into @stream's buffer asynchronously, up to @count size.
@io_priority can be used to prioritize reads. For the synchronous
version of this function, see g_buffered_input_stream_fill().

If @count is -1 then the attempted read size is equal to the number
of bytes that are required to fill the buffer.

</description>
<parameters>
<parameter name="stream">
<parameter_description> #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a #gpointer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_close_finish">
<description>
Closes an output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if stream was successfully closed, %FALSE otherwise.
</return>
</function>

<function name="g_inet_address_get_is_mc_node_local">
<description>
Tests whether @address is a node-local multicast address.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a node-local multicast address.

Since: 2.22
</return>
</function>

<function name="g_socket_listener_accept_socket_async">
<description>
This is the asynchronous version of g_socket_listener_accept().

When the operation is finished @callback will be
called. You can then call g_socket_listener_accept_socket() to get
the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_push_current">
<description>
Pushes @cancellable onto the cancellable stack. The current
cancllable can then be recieved using g_cancellable_get_current().

This is useful when implementing cancellable operations in
code that does not allow you to pass down the cancellable object.

This is typically called automatically by e.g. #GFile operations,
so you rarely have to call this yourself.

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_write_async">
<description>
Request an asynchronous write of @count bytes from @buffer into 
the stream. When the operation is finished @callback will be called.
You can then call g_output_stream_write_finish() to get the result of the 
operation.

During an async request no other sync and async calls are allowed, 
and will result in %G_IO_ERROR_PENDING errors. 

A value of @count larger than %G_MAXSSIZE will cause a 
%G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes written will be passed to the
@callback. It is not an error if this is not the same as the 
requested size, as it can happen e.g. on a partial I/O error, 
but generally we try to write as many bytes as requested. 

Any outstanding I/O request with higher priority (lower numerical 
value) will be executed before an outstanding request with lower 
priority. Default priority is %G_PRIORITY_DEFAULT.

The asyncronous methods have a default fallback that uses threads 
to implement asynchronicity, so they are optional for inheriting 
classes. However, if you override one you must override all.

For the synchronous, blocking version of this function, see 
g_output_stream_write().

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GOutputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the buffer containing the data to write. 
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes to write
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="get_all_desktop_entries_for_mime_type">
<description>
Return value: a #GList containing the desktop ids which claim

</description>
<parameters>
<parameter name="mime_type">
<parameter_description> a mime type.
</parameter_description>
</parameter>
<parameter name="except">
<parameter_description> NULL or a strv list
</parameter_description>
</parameter>
</parameters>
<return> a #GList containing the desktop ids which claim
to handle @mime_type.
</return>
</function>

<function name="g_socket_set_keepalive">
<description>
Setting @keepalive to %TRUE enables the sending of periodic ping requests
on idle connections in order to keep the connection alive. This is only
useful for connection oriented sockets. The exact period used between
each ping is system and protocol dependent.

Sending keepalive requests like this has a few disadvantages. For instance,
it uses more network bandwidth, and it makes your application more sensitive
to temporary outages in the network (i.e. if a cable is pulled your otherwise
idle connection could be terminated, whereas otherwise it would survive unless
actually used before the cable was reinserted). However, it is sometimes
useful to ensure that connections are eventually terminated if e.g. the
remote side is disconnected, so as to avoid leaking resources forever.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="keepalive">
<parameter_description> Whether to use try to keep the connection alive or not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_fd_message_steal_fds">
<description>

</description>
<parameters>
<parameter name="message">
<parameter_description> a #GUnixFDMessage
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> pointer to the length of the returned array, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> an array of file descriptors
the array of file descriptors that is contained in this
object.

After this call, the descriptors are no longer contained in
@message.  Further calls will return an empty list (unless more
descriptors have been added).

The return result of this function must be freed with g_free().
The caller is also responsible for closing all of the file
descriptors.

If @length is non-%NULL then it is set to the number of file
descriptors in the returned array.  The returned array is also
terminated with -1.

This function never returns NULL.  In case there are no file
descriptors contained in @message, an empty array is returned.
</return>
</function>

<function name="g_content_types_get_registered">
<description>
Gets a list of strings containing all the registered content types
known to the system. The list and its data should be freed using 
@g_list_foreach(list, g_free, NULL) and @g_list_free(list)

</description>
<parameters>
</parameters>
<return> #GList of the registered content types.
</return>
</function>

<function name="g_emblemed_icon_add_emblem">
<description>
Adds @emblem to the #GList of #GEmblem &lt;!-- --&gt;s.

Since: 2.18

</description>
<parameters>
<parameter name="emblemed">
<parameter_description> a #GEmblemedIcon
</parameter_description>
</parameter>
<parameter name="emblem">
<parameter_description> a #GEmblem
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_condition_wait">
<description>
Waits for @condition to become true on @socket.  When the condition
becomes true, %TRUE is returned.

If @cancellable is cancelled before the condition becomes true then
%FALSE is returned and @error, if non-%NULL, is set to %G_IO_ERROR_CANCELLED.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> a #GIOCondition mask to wait for
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError pointer, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the condition was met, %FALSE otherwise

Since: 2.22
</return>
</function>

<function name="g_emblem_get_icon">
<description>
Gives back the icon from @emblem.


</description>
<parameters>
<parameter name="emblem">
<parameter_description> a #GEmblem from which the icon should be extracted.
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon. The returned object belongs to the emblem
and should not be modified or freed.

Since: 2.18
</return>
</function>

<function name="g_unix_mount_point_is_readonly">
<description>
Checks if a unix mount point is read only.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if a mount point is read only.
</return>
</function>

<function name="g_file_enumerator_next_file">
<description>
Return value: A #GFileInfo or %NULL on error or end of enumerator.

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> A #GFileInfo or %NULL on error or end of enumerator.
Free the returned object with g_object_unref() when no longer needed.
</return>
</function>

<function name="g_file_info_set_symlink_target">
<description>
Sets the %G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET attribute in the file info 
to the given symlink target.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="symlink_target">
<parameter_description> a static string containing a path to a symlink target.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_get_domain">
<description>
Gets the domain of the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> a string set to the domain. 
</return>
</function>

<function name="g_unix_mount_point_compare">
<description>
Compares two unix mount points.


</description>
<parameters>
<parameter name="mount1">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
<parameter name="mount2">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> 1, 0 or -1 if @mount1 is greater than, equal to,
or less than @mount2, respectively.
</return>
</function>

<function name="g_drive_get_identifier">
<description>
Gets the identifier of the given kind for @drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive
</parameter_description>
</parameter>
<parameter name="kind">
<parameter_description> the kind of identifier to return
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated string containing the
requested identfier, or %NULL if the #GDrive
doesn't have this kind of identifier.
</return>
</function>

<function name="GThreadedSocketService">
<description>
The ::run signal is emitted in a worker thread in response to an
incoming connection.  This thread is dedicated to handling
@connection and may perform blocking IO.  The signal handler need
not return until the connection is closed.

If %TRUE is returned then no other handlers are called.

</description>
<parameters>
<parameter name="service">
<parameter_description> the #GThreadedSocketService.
</parameter_description>
</parameter>
<parameter name="connection">
<parameter_description> a new #GSocketConnection object.
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> the source_object passed to g_socket_listener_add_address().
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @connection has been handled.
</return>
</function>

<function name="g_file_info_get_attribute_int32">
<description>
Gets a signed 32-bit integer contained within the attribute. If the 
attribute does not contain a signed 32-bit integer, or is invalid, 
0 will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a signed 32-bit integer from the attribute.
</return>
</function>

<function name="g_network_service_get_service">
<description>
Gets @srv's service name (eg, &quot;ldap&quot;).


</description>
<parameters>
<parameter name="srv">
<parameter_description> a #GNetworkService
</parameter_description>
</parameter>
</parameters>
<return> @srv's service name

Since: 2.22
</return>
</function>

<function name="g_io_stream_set_pending">
<description>
Sets @stream to have actions pending. If the pending flag is
already set or @stream is closed, it will return %FALSE and set
@error.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GIOStream.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if pending was previously unset and is now set.

Since: 2.22
</return>
</function>

<function name="g_simple_async_result_is_valid">
<description>
Ensures that the data passed to the _finish function of an async
operation is consistent.  Three checks are performed.

First, @result is checked to ensure that it is really a
#GSimpleAsyncResult.  Second, @source is checked to ensure that it
matches the source object of @result.  Third, @source_tag is
checked to ensure that it is equal to the source_tag argument given
to g_simple_async_result_new() (which, by convention, is a pointer
to the _async function corresponding to the _finish function from
which this function is called).


</description>
<parameters>
<parameter name="result">
<parameter_description> the #GAsyncResult passed to the _finish function.
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> the #GObject passed to the _finish function.
</parameter_description>
</parameter>
<parameter name="source_tag">
<parameter_description> the asynchronous function.
</parameter_description>
</parameter>
</parameters>
<return> #TRUE if all checks passed or #FALSE if any failed.
</return>
</function>

<function name="g_file_unmount_mountable_finish">
<description>
Finishes an unmount operation, see g_file_unmount_mountable() for details.

Finish an asynchronous unmount operation that was started 
with g_file_unmount_mountable().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the operation finished successfully. %FALSE
otherwise.
</return>
</function>

<function name="g_file_set_attribute_uint32">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_UINT32 to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #guint32 containing the attribute's new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set to @value 
in the @file, %FALSE otherwise.
</return>
</function>

<function name="g_unix_volume_monitor_new">
<description>

</description>
<parameters>
</parameters>
<return>  a new #GVolumeMonitor.
</return>
</function>

<function name="g_volume_get_mount">
<description>
Gets the mount for the @volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> a #GMount or %NULL if @volume isn't mounted.
The returned object should be unreffed with g_object_unref()
when no longer needed.
</return>
</function>

<function name="g_app_launch_context_get_startup_notify_id">
<description>
Initiates startup notification for the application and returns the
DESKTOP_STARTUP_ID for the launched operation, if supported.

Startup notification IDs are defined in the &lt;ulink
url=&quot;http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt&quot;&gt;
FreeDesktop.Org Startup Notifications standard&lt;/ulink&gt;.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GAppLaunchContext
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
<parameter name="files">
<parameter_description> a #GList of of #GFile objects
</parameter_description>
</parameter>
</parameters>
<return> a startup notification ID for the application, or %NULL if 
not supported.
</return>
</function>

<function name="g_file_has_prefix">
<description>
Checks whether @file has the prefix specified by @prefix. In other word, 
if the names of inital elements of @file&lt;!-- --&gt;s pathname match @prefix.
Only full pathname elements are matched, so a path like /foo is not
considered a prefix of /foobar, only of /foo/bar.

This call does no i/o, as it works purely on names. As such it can 
sometimes return %FALSE even if @file is inside a @prefix (from a 
filesystem point of view), because the prefix of @file is an alias 
of @prefix.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="prefix">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return>  %TRUE if the @files's parent, grandparent, etc is @prefix. 
%FALSE otherwise.
</return>
</function>

<function name="g_unix_output_stream_set_close_fd">
<description>
Sets whether the file descriptor of @stream shall be closed
when the stream is closed.

Since: 2.20

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GUnixOutputStream
</parameter_description>
</parameter>
<parameter name="close_fd">
<parameter_description> %TRUE to close the file descriptor when done
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_get_drive">
<description>
Gets the drive for the @mount.

This is a convenience method for getting the #GVolume and then
using that object to get the #GDrive.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> a #GDrive or %NULL if @mount is not associated with a volume or a drive.
The returned object should be unreffed with 
g_object_unref() when no longer needed.
</return>
</function>

<function name="g_drive_eject">
<description>
Asynchronously ejects a drive.

When the operation is finished, @callback will be called.
You can then call g_drive_eject_finish() to obtain the
result of the operation.

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the unmount if required for eject
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_get_parse_name">
<description>
Gets the parse name of the @file.
A parse name is a UTF-8 string that describes the
file such that one can get the #GFile back using
g_file_parse_name().

This is generally used to show the #GFile as a nice
full-pathname kind of string in a user interface,
like in a location entry.

For local files with names that can safely be converted
to UTF8 the pathname is used, otherwise the IRI is used
(a form of URI that allows UTF8 characters unescaped).

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the #GFile's parse name. The returned 
string should be freed with g_free() when no longer needed.
</return>
</function>

<function name="g_io_module_new">
<description>
Creates a new GIOModule that will load the specific
shared library when in use.


</description>
<parameters>
<parameter name="filename">
<parameter_description> filename of the shared library module.
</parameter_description>
</parameter>
</parameters>
<return> a #GIOModule from given @filename, 
or %NULL on error.
</return>
</function>

<function name="g_resolver_lookup_by_name_async">
<description>
Begins asynchronously resolving @hostname to determine its
associated IP address(es), and eventually calls @callback, which
must call g_resolver_lookup_by_name_finish() to get the result.
See g_resolver_lookup_by_name() for more details.

Since: 2.22

</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="hostname">
<parameter_description> the hostname to look up the address of
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call after resolution completes
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data for @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_local_file_input_stream_new">
<description>

</description>
<parameters>
<parameter name="fd">
<parameter_description> File Descriptor.
</parameter_description>
</parameter>
</parameters>
<return> #GFileInputStream for the given file descriptor.
</return>
</function>

<function name="g_filter_input_stream_get_base_stream">
<description>
Gets the base stream for the filter stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterInputStream.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream.
</return>
</function>

<function name="g_file_equal">
<description>
Checks equality of two given #GFile&lt;!-- --&gt;s. Note that two
#GFile&lt;!-- --&gt;s that differ can still refer to the same
file on the filesystem due to various forms of filename
aliasing.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file1">
<parameter_description> the first #GFile.
</parameter_description>
</parameter>
<parameter name="file2">
<parameter_description> the second #GFile.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @file1 and @file2 are equal.
%FALSE if either is not a #GFile.
</return>
</function>

<function name="g_file_set_attributes_async">
<description>
Asynchronously sets the attributes of @file with @info.

For more details, see g_file_set_attributes_from_info() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_set_attributes_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback. 
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> a #gpointer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_inet_address_get_is_mc_global">
<description>
Tests whether @address is a global multicast address.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a global multicast address.

Since: 2.22
</return>
</function>

<function name="g_file_create_readwrite_finish">
<description>
Finishes an asynchronous file create operation started with
g_file_create_readwrite_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileIOStream or %NULL on error.
Free the returned object with g_object_unref().

Since: 2.22
</return>
</function>

<function name="g_socket_close">
<description>
Closes the socket, shutting down any active connection.

Closing a socket does not wait for all outstanding I/O operations to finish,
so the caller should not rely on them to be guaranteed to complete even
if the close returns with no error.

Once the socket is closed, all other operations will return %G_IO_ERROR_CLOSED.
Closing a stream multiple times will not return an error.

Sockets will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure
resources are released as early as possible.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error

Since: 2.22
</return>
</function>

<function name="g_io_stream_clear_pending">
<description>
Clears the pending flag on @stream.

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> output stream
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_volume_new">
<description>

</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
<parameter name="mountpoint">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> a #GUnixVolume for the given #GUnixMountPoint.
</return>
</function>

<function name="g_file_monitor_set_rate_limit">
<description>
Sets the rate limit to which the @monitor will report
consecutive change events to the same file. 


</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor.
</parameter_description>
</parameter>
<parameter name="limit_msecs">
<parameter_description> a integer with the limit in milliseconds to 
poll for changes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_set_error_if_cancelled">
<description>
If the @cancellable is cancelled, sets the error to notify
that the operation was cancelled.


</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable object.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError to append error state to.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @cancellable was cancelled, %FALSE if it was not.
</return>
</function>

<function name="g_file_get_child">
<description>
Gets a child of @file with basename equal to @name.

Note that the file with that specific name might not exist, but
you can still have a #GFile that points to it. You can use this
for instance to create that file.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> string containing the child's basename.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile to a child specified by @name.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_create_finish">
<description>
Finishes an asynchronous file create operation started with 
g_file_create_async(). 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_unix_input_stream_get_close_fd">
<description>
Return value: %TRUE if the file descriptor is closed when done

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GUnixInputStream
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file descriptor is closed when done

Since: 2.20
</return>
</function>

<function name="g_output_stream_close_async">
<description>
Requests an asynchronous close of the stream, releasing resources 
related to it. When the operation is finished @callback will be 
called. You can then call g_output_stream_close_finish() to get 
the result of the operation.

For behaviour details see g_output_stream_close().

The asyncronous methods have a default fallback that uses threads 
to implement asynchronicity, so they are optional for inheriting 
classes. However, if you override one you must override all.

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GOutputStream.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_get_password_save">
<description>
Gets the state of saving passwords for the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> a #GPasswordSave flag. 
</return>
</function>

<function name="g_data_output_stream_put_uint32">
<description>
Puts an unsigned 32-bit integer into the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #guint32.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_socket_client_get_local_address">
<description>
Gets the local address of the socket client.

See g_socket_client_set_local_address() for details.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddres or %NULL. don't free

Since: 2.22
</return>
</function>

<function name="g_buffered_input_stream_new">
<description>
Creates a new #GInputStream from the given @base_stream, with 
a buffer set to the default size (4 kilobytes).


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream for the given @base_stream.
</return>
</function>

<function name="g_content_type_guess">
<description>
Guesses the content type based on example data. If the function is 
uncertain, @result_uncertain will be set to %TRUE. Either @filename
or @data may be %NULL, in which case the guess will be based solely
on the other argument.


</description>
<parameters>
<parameter name="filename">
<parameter_description> a string, or %NULL
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a stream of data, or %NULL
</parameter_description>
</parameter>
<parameter name="data_size">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="result_uncertain">
<parameter_description> a flag indicating the certainty of the result
</parameter_description>
</parameter>
</parameters>
<return> a string indicating a guessed content type for the 
given data. 
</return>
</function>

<function name="g_network_service_new">
<description>
Creates a new #GNetworkService representing the given @service,
@protocol, and @domain. This will initially be unresolved; use the
#GSocketConnectable interface to resolve it.


</description>
<parameters>
<parameter name="service">
<parameter_description> the service type to look up (eg, &quot;ldap&quot;)
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the networking protocol to use for @service (eg, &quot;tcp&quot;)
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the DNS domain to look up the service in
</parameter_description>
</parameter>
</parameters>
<return> a new #GNetworkService

Since: 2.22
</return>
</function>

<function name="g_socket_client_new">
<description>
Creates a new #GSocketClient with the default options.


</description>
<parameters>
</parameters>
<return> a #GSocketClient.
Free the returned object with g_object_unref().

Since: 2.22
</return>
</function>

<function name="g_file_enumerator_has_pending">
<description>
Checks if the file enumerator has pending operations.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @enumerator has pending operations.
</return>
</function>

<function name="g_socket_send_to">
<description>
Send data to @address on @socket.  This is the most complicated and
fully-featured version of this call. For easier use, see
g_socket_send() and g_socket_send_to().

If @address is %NULL then the message is sent to the default receiver
(set by g_socket_connect()).

@vector must point to an array of #GOutputVector structs and
@num_vectors must be the length of this array.  These structs
describe the buffers that the sent data will be gathered from.
If @num_vector is -1, then @vector is assumed to be terminated
by a #GOutputVector with a %NULL buffer pointer.


@messages, if non-%NULL, is taken to point to an array of @num_messages
#GSocketControlMessage instances. These correspond to the control
messages to be sent on the socket.
If @num_messages is -1 then @messages is treated as a %NULL-terminated
array.

@flags modify how the message sent. The commonly available arguments
for this is available in the #GSocketMsgFlags enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system specific flags too.

If the socket is in blocking mode the call will block until there is
space for the data in the socket queue. If there is no space available
and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
will be returned. To be notified of available space, wait for the %G_IO_OUT
condition.

Note that on Windows you can't rely on a %G_IO_OUT condition
not producing a %G_IO_ERROR_WOULD_BLOCK error, as this is how Winsock
write notification works. However, robust apps should always be able to
handle this since it can easily appear in other cases too.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a #GSocketAddress, or %NULL
</parameter_description>
</parameter>
<parameter name="vectors">
<parameter_description> an array of #GOutputVector structs
</parameter_description>
</parameter>
<parameter name="num_vectors">
<parameter_description> the number of elements in @vectors, or -1
</parameter_description>
</parameter>
<parameter name="messages">
<parameter_description> a pointer to an array of #GSocketControlMessages, or
%NULL.
</parameter_description>
</parameter>
<parameter name="num_messages">
<parameter_description> number of elements in @messages, or -1.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> an int containing #GSocketMsgFlags flags
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes read, or -1 on error

Since: 2.22
</return>
</function>

<function name="g_data_output_stream_get_byte_order">
<description>
Gets the byte order for the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> the #GDataStreamByteOrder for the @stream.
</return>
</function>

<function name="g_file_new_for_uri">
<description>
Constructs a #GFile for a given URI. This operation never 
fails, but the returned object might not support any I/O 
operation if @uri is malformed or if the uri type is 
not supported.


</description>
<parameters>
<parameter name="uri">
<parameter_description> a string containing a URI.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile for the given @uri.
</return>
</function>

<function name="g_mount_operation_set_anonymous">
<description>
Sets the mount operation to use an anonymous user if @anonymous is %TRUE.

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="anonymous">
<parameter_description> boolean value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_line_finish">
<description>
Finish an asynchronous call started by
g_data_input_stream_read_line_async().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the #GAsyncResult that was provided to the callback.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a #gsize to get the length of the data read in.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a string with the line that was read in (without the newlines).
Set @length to a #gsize to get the length of the read line.
On an error, it will return %NULL and @error will be set. If there's no
content to read, it will still return %NULL, but @error won't be set.

Since: 2,20
</return>
</function>

<function name="Adds">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="SECTION">
<description>
Data output stream implements #GOutputStream and includes functions for 
writing data directly to an output stream.


</description>
<parameters>
<parameter name="short_description">
<parameter_description> Data Output Stream
</parameter_description>
</parameter>
<parameter name="include">
<parameter_description> gio/gio.h
</parameter_description>
</parameter>
<parameter name="see_also">
<parameter_description> #GOutputStream
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_set_listen_backlog">
<description>
Sets the maximum number of outstanding connections allowed
when listening on this socket. If more clients than this are
connecting to the socket and the application is not handling them
on time then the new connections will be refused.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="backlog">
<parameter_description> the maximum number of pending connections.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_srv_target_get_priority">
<description>
Gets @target's priority. You should not need to look at this;
#GResolver already sorts the targets according to the algorithm in
RFC 2782.


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return> @target's priority

Since: 2.22
</return>
</function>

<function name="_g_local_directory_monitor_new">
<description>

</description>
<parameters>
<parameter name="dirname">
<parameter_description> filename of the directory to monitor.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFileMonitorFlags.
</parameter_description>
</parameter>
</parameters>
<return> new #GFileMonitor for the given @dirname.
</return>
</function>

<function name="GVolumeMonitor">
<description>
Emitted when the eject button is pressed on @drive.

Since: 2.18

</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> The volume monitor emitting the signal.
</parameter_description>
</parameter>
<parameter name="drive">
<parameter_description> the drive where the eject button was pressed
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_operation_get_choice">
<description>
Gets a choice from the mount operation.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> an integer containing an index of the user's choice from 
the choice's list, or %0.
</return>
</function>

<function name="g_data_input_stream_read_until_async">
<description>
The asynchronous version of g_data_input_stream_read_until().
It is an error to have two outstanding calls to this function.

When the operation is finished, @callback will be called. You
can then call g_data_input_stream_read_until_finish() to get
the result of the operation.

Since: 2.20

</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="stop_chars">
<parameter_description> characters to terminate the read.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_scheduler_cancel_all_jobs">
<description>
Cancels all cancellable I/O jobs. 

A job is cancellable if a #GCancellable was passed into
g_io_scheduler_push_job().

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_socket_connection_factory_create_connection">
<description>
Creates a #GSocketConnection subclass of the right type for
@socket.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection

Since: 2.22
</return>
</function>

<function name="g_drive_poll_for_media">
<description>
Asynchronously polls @drive to see if media has been inserted or removed.

When the operation is finished, @callback will be called.
You can then call g_drive_poll_for_media_finish() to obtain the
result of the operation.

</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data to pass to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_trash">
<description>
Sends @file to the &quot;Trashcan&quot;, if possible. This is similar to
deleting it, but the user can recover it before emptying the trashcan.
Not all file systems support trashing, so this call can return the
%G_IO_ERROR_NOT_SUPPORTED error.


If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> #GFile to send to trash.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful trash, %FALSE otherwise.
</return>
</function>

<function name="g_unix_mounts_get">
<description>
Gets a #GList of strings containing the unix mounts. 
If @time_read is set, it will be filled with the mount 
timestamp, allowing for checking if the mounts have changed 
with g_unix_mounts_changed_since().


</description>
<parameters>
<parameter name="time_read">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of the UNIX mounts. 
</return>
</function>

<function name="g_network_address_get_hostname">
<description>
Gets @addr's hostname. This might be either UTF-8 or ASCII-encoded,
depending on what @addr was created with.


</description>
<parameters>
<parameter name="addr">
<parameter_description> a #GNetworkAddress
</parameter_description>
</parameter>
</parameters>
<return> @addr's hostname

Since: 2.22
</return>
</function>

<function name="g_app_info_get_commandline">
<description>
Gets the commandline with which the application will be
started.  


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
</parameters>
<return> a string containing the @appinfo's commandline, 
or %NULL if this information is not available

Since: 2.20
</return>
</function>

<function name="g_unix_fd_message_append_fd">
<description>
Adds a file descriptor to @message.

The file descriptor is duplicated using dup().  You keep your copy
of the descriptor and the copy contained in @message will be closed
when @message is finalized.

A possible cause of failure is exceeding the per-process or
system-wide file descriptor limit.

</description>
<parameters>
<parameter name="message">
<parameter_description> a #GUnixFDMessage
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a valid open file descriptor
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError pointer
</parameter_description>
</parameter>
</parameters>
<return> %TRUE in case of success, else %FALSE (and @error is set)
</return>
</function>

<function name="g_data_output_stream_put_uint64">
<description>
Puts an unsigned 64-bit integer into the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #guint64.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_file_get_parent">
<description>
Gets the parent directory for the @file. 
If the @file represents the root directory of the 
file system, then %NULL will be returned.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile structure to the parent of the given
#GFile or %NULL if there is no parent. 
Free the returned object with g_object_unref().
</return>
</function>

<function name="GSocketAddress">
<description>
A socket endpoint address, corresponding to &lt;type&gt;struct sockaddr&lt;/type&gt;
or one of its subtypes.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_file_monitor_is_cancelled">
<description>
Returns: %TRUE if monitor is canceled. %FALSE otherwise.

</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if monitor is canceled. %FALSE otherwise.
</return>
</function>

<function name="g_io_stream_close_finish">
<description>
Closes a stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GIOStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if stream was successfully closed, %FALSE otherwise.

Since: 2.22
</return>
</function>

<function name="g_socket_connection_factory_lookup_type">
<description>
Looks up the #GType to be used when creating socket connections on
sockets with the specified @family,@type and @protocol_id.

If no type is registered, the #GSocketConnection base type is returned.


</description>
<parameters>
<parameter name="family">
<parameter_description> a #GSocketFamily.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GSocketType
</parameter_description>
</parameter>
<parameter name="protocol_id">
<parameter_description> a protocol id
</parameter_description>
</parameter>
</parameters>
<return> a #GType
Since: 2.22
</return>
</function>

<function name="g_file_create_async">
<description>
Asynchronously creates a new file and returns an output stream for writing to it.
The file must not already exist.

For more details, see g_file_create() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_create_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_stream_is_closed">
<description>
Checks if a stream is closed.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GIOStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stream is closed.

Since: 2.22
</return>
</function>

<function name="g_file_get_relative_path">
<description>
Gets the path for @descendant relative to @parent. 

This call does no blocking i/o.


</description>
<parameters>
<parameter name="parent">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="descendant">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> string with the relative path from @descendant 
to @parent, or %NULL if @descendant doesn't have @parent as prefix. 
The returned string should be freed with g_free() when no longer needed.
</return>
</function>

<function name="g_inet_address_get_is_loopback">
<description>
Tests whether @address is the loopback address for its family.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is the loopback address for its family.

Since: 2.22
</return>
</function>

<function name="g_app_info_get_name">
<description>
Gets the installed name of the application. 


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> the name of the application for @appinfo.
</return>
</function>

<function name="g_unix_is_mount_path_system_internal">
<description>
Determines if @mount_path is considered an implementation of the
OS. This is primarily used for hiding mountable and mounted volumes
that only are used in the OS and has little to no relevance to the
casual user.


</description>
<parameters>
<parameter name="mount_path">
<parameter_description> a mount path, e.g. &lt;filename&gt;/media/disk&lt;/filename&gt; 
or &lt;filename&gt;/usr&lt;/filename&gt;
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_path is considered an implementation detail 
of the OS.
</return>
</function>

<function name="g_cancellable_get_current">
<description>
Gets the top cancellable from the stack.


</description>
<parameters>
</parameters>
<return> a #GCancellable from the top of the stack, or %NULL
if the stack is empty. 
</return>
</function>

<function name="g_volume_mount_finish">
<description>
Finishes mounting a volume. If any errors occured during the operation,
@error will be set to contain the errors and %FALSE will be returned.

If the mount operation succeeded, g_volume_get_mount() on @volume
is guaranteed to return the mount right after calling this
function; there's no need to listen for the 'mount-added' signal on
#GVolumeMonitor.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store an error, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, %FALSE if operation failed.
</return>
</function>

<function name="g_emblemed_icon_new">
<description>
Creates a new emblemed icon for @icon with the emblem @emblem.


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GIcon
</parameter_description>
</parameter>
<parameter name="emblem">
<parameter_description> a #GEmblem
</parameter_description>
</parameter>
</parameters>
<return> a new #GIcon

Since: 2.18
</return>
</function>

<function name="g_app_info_get_icon">
<description>
Gets the icon for the application.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> the default #GIcon for @appinfo.
</return>
</function>

<function name="g_socket_check_pending_error">
<description>
Checks and resets the pending error for the socket. This is typically
used to check for errors when g_socket_connect() is used in non-blocking mode.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if no error, %FALSE otherwise, setting @error to the error

Since: 2.22
</return>
</function>

<function name="g_file_parse_name">
<description>
Constructs a #GFile with the given @parse_name (i.e. something given by g_file_get_parse_name()).
This operation never fails, but the returned object might not support any I/O
operation if the @parse_name cannot be parsed.


</description>
<parameters>
<parameter name="parse_name">
<parameter_description> a file name or path to be parsed.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFile.
</return>
</function>

<function name="g_file_replace_readwrite_async">
<description>
Asynchronously overwrites the file in read-write mode, replacing the contents,
possibly creating a backup copy of the file first.

For more details, see g_file_replace_readwrite() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_replace_readwrite_finish() to get the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> an &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; for the
current #GFile, or NULL to ignore.
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_volume_monitor_get_connected_drives">
<description>
Gets a list of drives connected to the system.

The returned list should be freed with g_list_free(), after
its elements have been unreffed with g_object_unref().


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of connected #GDrive objects.
</return>
</function>

<function name="g_local_vfs_new">
<description>
Returns: a new #GVfs handle.

</description>
<parameters>
</parameters>
<return> a new #GVfs handle.
</return>
</function>

<function name="g_volume_eject">
<description>
Ejects a volume. This is an asynchronous operation, and is
finished by calling g_volume_eject_finish() with the @volume
and #GAsyncResult returned in the @callback.

</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the unmount if required for eject
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data that gets passed to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_poll_file_monitor_new">
<description>
Polls @file for changes.


</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFileMonitor for the given #GFile. 
</return>
</function>

<function name="g_simple_async_result_new">
<description>
Creates a #GSimpleAsyncResult.


</description>
<parameters>
<parameter name="source_object">
<parameter_description> a #GObject the asynchronous function was called with,
or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="source_tag">
<parameter_description> the asynchronous function.
</parameter_description>
</parameter>
</parameters>
<return> a #GSimpleAsyncResult.
</return>
</function>

<function name="g_output_stream_has_pending">
<description>
Checks if an ouput stream has pending actions.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream has pending actions. 
</return>
</function>

<function name="g_filter_output_stream_get_base_stream">
<description>
Gets the base stream for the filter stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> a #GOutputStream.
</return>
</function>

<function name="g_unix_mount_compare">
<description>
Compares two unix mounts.


</description>
<parameters>
<parameter name="mount1">
<parameter_description> first #GUnixMountEntry to compare.
</parameter_description>
</parameter>
<parameter name="mount2">
<parameter_description> second #GUnixMountEntry to compare.
</parameter_description>
</parameter>
</parameters>
<return> 1, 0 or -1 if @mount1 is greater than, equal to,
or less than @mount2, respectively. 
</return>
</function>

<function name="g_resolver_free_addresses">
<description>
Frees @addresses (which should be the return value from
g_resolver_lookup_by_name() or g_resolver_lookup_by_name_finish()).
(This is a convenience method; you can also simply free the results
by hand.)

Since: 2.22

</description>
<parameters>
<parameter name="addresses">
<parameter_description> a #GList of #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_vfs_get_local">
<description>
Gets the local #GVfs for the system.


</description>
<parameters>
</parameters>
<return> a #GVfs.
</return>
</function>

<function name="g_async_initable_init_async">
<description>
Starts asynchronous initialization of the object implementing the interface.
This must be done before any real use of the object after initial construction.
If the object also implements #GInitable you can optionally call g_initable_init()
instead.

When the initialization is finished, @callback will be called. You can then call
g_async_initable_init_finish() to get the result of the initialization.

Implementations may also support cancellation. If @cancellable is not %NULL,
then initialization can be cancelled by triggering the cancellable object
from another thread. If the operation was cancelled, the error
%G_IO_ERROR_CANCELLED will be returned. If @cancellable is not %NULL and
the object doesn't support cancellable initialization the error
%G_IO_ERROR_NOT_SUPPORTED will be returned.

If this function is not called, or returns with an error then all
operations on the object should fail, generally returning the
error %G_IO_ERROR_NOT_INITIALIZED.

Implementations of this method must be idempotent, i.e. multiple calls
to this function with the same argument should return the same results.
Only the first call initializes the object, further calls return the result
of the first call. This is so that its safe to implement the singleton
pattern in the GObject constructor function.

For classes that also support the #GInitable interface the default
implementation of this method will run the g_initable_init() function
in a thread, so if you want to support asynchronous initialization via
threads, just implement the #GAsyncInitable interface without overriding
any interface methods.

Since: 2.22

</description>
<parameters>
<parameter name="initable">
<parameter_description> a #GAsyncInitable.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the operation.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_is_native">
<description>
Checks to see if a file is native to the platform.

A native file s one expressed in the platform-native filename format,
e.g. &quot;C:\Windows&quot; or &quot;/usr/bin/&quot;. This does not mean the file is local,
as it might be on a locally mounted remote filesystem.

On some systems non-native files may be available using
the native filesystem via a userspace filesystem (FUSE), in
these cases this call will return %FALSE, but g_file_get_path()
will still return a native path.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if file is native. 
</return>
</function>

<function name="g_file_set_attribute_uint64">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_UINT64 to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile. 
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #guint64 containing the attribute's new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set to @value 
in the @file, %FALSE otherwise.
</return>
</function>

<function name="g_file_info_unset_attribute_mask">
<description>
Unsets a mask set by g_file_info_set_attribute_mask(), if one
is set.

</description>
<parameters>
<parameter name="info">
<parameter_description> #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_drive_is_media_removable">
<description>
Checks if the @drive supports removable media.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @drive supports removable media, %FALSE otherwise.
</return>
</function>

<function name="g_volume_get_icon">
<description>
Gets the icon for @volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon.
The returned object should be unreffed with g_object_unref()
when no longer needed.
</return>
</function>

<function name="g_file_info_get_attribute_data">
<description>
Gets the attribute type, value and status for an attribute key.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> return location for the attribute type, or %NULL
</parameter_description>
</parameter>
<parameter name="value_pp">
<parameter_description> return location for the attribute value, or %NULL
</parameter_description>
</parameter>
<parameter name="status">
<parameter_description> return location for the attribute status, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @info has an attribute named @attribute, 
%FALSE otherwise.
</return>
</function>

<function name="g_seekable_can_truncate">
<description>
Tests if the stream can be truncated.


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stream can be truncated, %FALSE otherwise.
</return>
</function>

<function name="g_output_stream_splice_async">
<description>
Splices a stream asynchronously.
When the operation is finished @callback will be called.
You can then call g_output_stream_splice_finish() to get the 
result of the operation.

For the synchronous, blocking version of this function, see 
g_output_stream_splice().

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #GInputStream. 
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GOutputStreamSpliceFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback. 
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GDataStream">
<description>
The :newline-type property determines what is considered
as a line ending when reading complete lines from the stream.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_data_output_stream_put_byte">
<description>
Puts a byte into the output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #guchar.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_unix_mounts_changed_since">
<description>
Checks if the unix mounts have changed since a given unix time.


</description>
<parameters>
<parameter name="time">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mounts have changed since @time. 
</return>
</function>

<function name="g_socket_get_keepalive">
<description>
Gets the keepalive mode of the socket. For details on this,
see g_socket_set_keepalive().


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if keepalive is active, %FALSE otherwise.

Since: 2.22
</return>
</function>

<function name="g_output_stream_flush">
<description>
Flushed any outstanding buffers in the stream. Will block during 
the operation. Closing the stream will implicitly cause a flush.

This function is optional for inherited classes.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error
</return>
</function>

<function name="g_socket_receive">
<description>
Receive data (up to @size bytes) from a socket. This is mainly used by
connection oriented sockets, it is identical to g_socket_receive_from()
with @address set to %NULL.

If a message is too long to fit in @buffer, excess bytes may be discarded
depending on the type of socket the message is received from.

If the socket is in blocking mode the call will block until there is
some data to receive or there is an error. If there is no data available
and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
will be returned. To be notified of available data, wait for the %G_IO_IN
condition.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least count bytes long).
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes that will be read from the stream
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes read, or -1 on error

Since: 2.22
</return>
</function>

<function name="g_file_io_stream_get_etag">
<description>
Gets the entity tag for the file when it has been written.
This must be called after the stream has been written
and closed, as the etag can change while writing.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileIOStream.
</parameter_description>
</parameter>
</parameters>
<return> the entity tag for the stream.

Since: 2.22
</return>
</function>

<function name="g_io_extension_get_name">
<description>
Gets the name under which @extension was registered.

Note that the same type may be registered as extension
for multiple extension points, under different names.


</description>
<parameters>
<parameter name="extension">
<parameter_description> a #GIOExtension
</parameter_description>
</parameter>
</parameters>
<return> the name of @extension.
</return>
</function>

<function name="g_buffered_input_stream_read_byte">
<description>
Tries to read a single byte from the stream or the buffer. Will block
during this read.

On success, the byte read from the stream is returned. On end of stream
-1 is returned but it's not an exceptional error and @error is not set.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="stream">
<parameter_description> #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> the byte read from the @stream, or -1 on end of stream or error.
</return>
</function>

<function name="g_drive_eject_finish">
<description>
Finishes ejecting a drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drive has been ejected successfully,
%FALSE otherwise.
</return>
</function>

<function name="g_socket_set_blocking">
<description>
Sets the blocking mode of the socket. In blocking mode
all operations block until they succeed or there is an error. In
non-blocking mode all functions return results immediately or
with a %G_IO_ERROR_WOULD_BLOCK error.

All sockets are created in blocking mode. However, note that the
platform level socket is always non-blocking, and blocking mode
is a GSocket level feature.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="blocking">
<parameter_description> Whether to use blocking I/O or not.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_buffered_input_stream_get_buffer_size">
<description>
Gets the size of the input buffer.


</description>
<parameters>
<parameter name="stream">
<parameter_description> #GBufferedInputStream.
</parameter_description>
</parameter>
</parameters>
<return> the current buffer size.
</return>
</function>

<function name="g_file_load_partial_contents_async">
<description>
Reads the partial contents of a file. A #GFileReadMoreCallback should be 
used to stop reading from the file when appropriate, else this function
will behave exactly as g_file_load_contents_async(). This operation 
can be finished by g_file_load_partial_contents_finish().

Users of this function should be aware that @user_data is passed to 
both the @read_more_callback and the @callback.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="read_more_callback">
<parameter_description> a #GFileReadMoreCallback to receive partial data and to specify whether further data should be read.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to the callback functions.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_app_info_can_delete">
<description>
Obtains the information whether the GAppInfo can be deleted.
See g_app_info_delete().


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @appinfo can be deleted

Since: 2.20
</return>
</function>

<function name="g_output_stream_splice_finish">
<description>
Finishes an asynchronous stream splice operation.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #gssize of the number of bytes spliced.
</return>
</function>

<function name="g_winhttp_file_input_stream_new">
<description>

</description>
<parameters>
<parameter name="file">
<parameter_description> the GWinHttpFile being read
</parameter_description>
</parameter>
<parameter name="connection">
<parameter_description> handle to the HTTP connection, as from WinHttpConnect()
</parameter_description>
</parameter>
<parameter name="request">
<parameter_description> handle to the HTTP request, as from WinHttpOpenRequest
</parameter_description>
</parameter>
</parameters>
<return> #GFileInputStream for the given request
</return>
</function>

<function name="g_srv_target_new">
<description>
Creates a new #GSrvTarget with the given parameters.

You should not need to use this; normally #GSrvTarget&lt;!-- --&gt;s are
created by #GResolver.


</description>
<parameters>
<parameter name="hostname">
<parameter_description> the host that the service is running on
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> the port that the service is running on
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> the target's priority
</parameter_description>
</parameter>
<parameter name="weight">
<parameter_description> the target's weight
</parameter_description>
</parameter>
</parameters>
<return> a new #GSrvTarget.

Since: 2.22
</return>
</function>

<function name="g_seekable_truncate">
<description>
Truncates a stream with a given #offset. 

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
<parameter name="offset">
<parameter_description> a #goffset.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present. 
</return>
</function>

<function name="g_file_icon_new">
<description>
Creates a new icon for a file.


</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon for the given @file, or %NULL on error.
</return>
</function>

<function name="g_file_unmount_mountable">
<description>
Unmounts a file of type G_FILE_TYPE_MOUNTABLE.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called. You can then call
g_file_unmount_mountable_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_set_family">
<description>
Sets the socket family of the socket client.
If this is set to something other than %G_SOCKET_FAMILY_INVALID
then the sockets created by this object will be of the specified
family.

This might be useful for instance if you want to force the local
connection to be an ipv4 socket, even though the address might
be an ipv6 mapped to ipv4 address.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="family">
<parameter_description> a #GSocketFamily
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_vfs_get_file_for_uri">
<description>
Gets a #GFile for @uri.

This operation never fails, but the returned object
might not support any I/O operation if the URI 
is malformed or if the URI scheme is not supported.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a#GVfs.
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> a string containing a URI 
</parameter_description>
</parameter>
</parameters>
<return> a #GFile. 
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_app_info_get_default_for_uri_scheme">
<description>
Gets the default application for launching applications 
using this URI scheme. A URI scheme is the initial part 
of the URI, up to but not including the ':', e.g. &quot;http&quot;, 
&quot;ftp&quot; or &quot;sip&quot;.


</description>
<parameters>
<parameter name="uri_scheme">
<parameter_description> a string containing a URI scheme.
</parameter_description>
</parameter>
</parameters>
<return> #GAppInfo for given @uri_scheme or %NULL on error.
</return>
</function>

<function name="g_vfs_get_file_for_path">
<description>
Gets a #GFile for @path.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a #GVfs.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a string containing a VFS path.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile. 
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_set_attributes_finish">
<description>
Finishes setting an attribute started in g_file_set_attributes_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the attributes were set correctly, %FALSE otherwise.
</return>
</function>

<function name="g_socket_get_listen_backlog">
<description>
Gets the listen backlog setting of the socket. For details on this,
see g_socket_set_listen_backlog().


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> the maximum number of pending connections.

Since: 2.22
</return>
</function>

<function name="g_network_service_get_protocol">
<description>
Gets @srv's protocol name (eg, &quot;tcp&quot;).


</description>
<parameters>
<parameter name="srv">
<parameter_description> a #GNetworkService
</parameter_description>
</parameter>
</parameters>
<return> @srv's protocol name

Since: 2.22
</return>
</function>

<function name="g_unix_fd_message_new">
<description>
Creates a new #GUnixFDMessage containing no file descriptors.

</description>
<parameters>
</parameters>
<return> a new #GUnixFDMessage
</return>
</function>

<function name="g_network_address_get_port">
<description>
Gets @addr's port number


</description>
<parameters>
<parameter name="addr">
<parameter_description> a #GNetworkAddress
</parameter_description>
</parameter>
</parameters>
<return> @addr's port (which may be %0)

Since: 2.22
</return>
</function>

<function name="g_data_output_stream_put_uint16">
<description>
Puts an unsigned 16-bit integer into the output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #guint16.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_unix_mount_point_guess_name">
<description>
Guesses the name of a Unix mount point. 
The result is a translated string.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated string that must 
be freed with g_free()
</return>
</function>

<function name="g_socket_client_set_local_address">
<description>
Sets the local address of the socket client.
The sockets created by this object will bound to the
specified address (if not %NULL) before connecting.

This is useful if you want to ensure the the local
side of the connection is on a specific port, or on
a specific interface.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="addres">
<parameter_description> a #GSocketAddress, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_complete">
<description>
Completes an asynchronous I/O job.
Must be called in the main thread, as it invokes the callback that
should be called in the main thread. If you are in a different thread
use g_simple_async_result_complete_in_idle().

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_srv_target_get_port">
<description>
Gets @target's port


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return> @target's port

Since: 2.22
</return>
</function>

<function name="g_drive_get_icon">
<description>
Gets the icon for @drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> #GIcon for the @drive.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_enumerate_children_finish">
<description>
Finishes an async enumerate children operation.
See g_file_enumerate_children_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileEnumerator or %NULL if an error occurred.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_unix_mount_free">
<description>
Frees a unix mount.

</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_input_stream_has_pending">
<description>
Checks if an input stream has pending actions.


</description>
<parameters>
<parameter name="stream">
<parameter_description> input stream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @stream has pending actions.
</return>
</function>

<function name="g_themed_icon_append_name">
<description>
Append a name to the list of icons from within @icon.

&lt;note&gt;&lt;para&gt;
Note that doing so invalidates the hash computed by prior calls
to g_icon_hash().
&lt;/para&gt;&lt;/note&gt;

</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GThemedIcon
</parameter_description>
</parameter>
<parameter name="iconname">
<parameter_description> name of icon to append to list of icons from within @icon.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_listener_add_socket">
<description>
Creates a socket of type @type and protocol @protocol, binds
it to @address and adds it to the set of sockets we're accepting
sockets from.

@source_object will be passed out in the various calls
to accept to identify this particular source, which is
useful if you're listening on multiple addresses and do
different things depending on what address is connected to.


</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a #GSocketAddres
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GSocketType
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> a protocol name, or %NULL
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> Optional #GObject identifying this source
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.

Since: 2.22
</return>
</function>

<function name="g_socket_control_message_get_msg_type">
<description>
Returns: and int describing the level

</description>
<parameters>
<parameter name="message">
<parameter_description> a #GSocketControlMessage
</parameter_description>
</parameter>
</parameters>
<return> and int describing the level

Since: 2.22
</return>
</function>

<function name="g_file_info_get_attribute_byte_string">
<description>
Gets the value of a byte string attribute. If the attribute does 
not contain a byte string, %NULL will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> the contents of the @attribute value as a byte string, or 
%NULL otherwise.
</return>
</function>

<function name="g_buffered_output_stream_new_sized">
<description>
Creates a new buffered output stream with a given buffer size.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
</parameters>
<return> a #GOutputStream with an internal buffer set to @size.
</return>
</function>

<function name="g_data_input_stream_read_uint64">
<description>
Reads an unsigned 64-bit/8-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_stream_get_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 64-bit/8-byte read from @stream or %0 if 
an error occurred. 
</return>
</function>

<function name="g_unix_volume_unset_mount">
<description>

</description>
<parameters>
<parameter name="volume">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="mount">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_emblemed_icon_get_emblems">
<description>
Gets the list of emblems for the @icon.


</description>
<parameters>
<parameter name="emblemed">
<parameter_description> a #GEmblemedIcon
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GEmblem &lt;!-- --&gt;s that is owned by @emblemed

Since: 2.18
</return>
</function>

<function name="g_input_stream_read">
<description>
Tries to read @count bytes from the stream into the buffer starting at
@buffer. Will block during this read.

If count is zero returns zero and does nothing. A value of @count
larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes read into the buffer is returned.
It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file. Zero is returned on end of file
(or if @count is zero),  but never otherwise.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least count bytes long).
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes read, or -1 on error
</return>
</function>

<function name="g_file_io_stream_query_info_finish">
<description>
Finalizes the asynchronous query started
by g_file_io_stream_query_info_async().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileIOStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> A #GFileInfo for the finished query.

Since: 2.22
</return>
</function>

<function name="g_file_hash">
<description>
Creates a hash value for a #GFile.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> #gconstpointer to a #GFile.
</parameter_description>
</parameter>
</parameters>
<return> 0 if @file is not a valid #GFile, otherwise an 
integer that can be used as hash value for the #GFile. 
This function is intended for easily hashing a #GFile to 
add to a #GHashTable or similar data structure.
</return>
</function>

<function name="_ih_startup">
<description>
Initializes the inotify backend.  This must be called before
any other functions in this module.


</description>
<parameters>
</parameters>
<return> #TRUE if initialization succeeded, #FALSE otherwise
</return>
</function>

<function name="g_file_output_stream_query_info">
<description>
Queries a file output stream for the given @attributes. 
This function blocks while querying the stream. For the asynchronous 
version of this function, see g_file_output_stream_query_info_async(). 
While the stream is blocked, the stream will set the pending flag 
internally, and any other operations on the stream will fail with 
%G_IO_ERROR_PENDING.

Can fail if the stream was already closed (with @error being set to 
%G_IO_ERROR_CLOSED), the stream has pending operations (with @error being
set to %G_IO_ERROR_PENDING), or if querying info is not supported for 
the stream's interface (with @error being set to %G_IO_ERROR_NOT_SUPPORTED). In
all cases of failure, %NULL will be returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set, and %NULL will 
be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileOutputStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo for the @stream, or %NULL on error.
</return>
</function>

<function name="g_io_extension_get_type">
<description>
Gets the type associated with @extension.


</description>
<parameters>
<parameter name="extension">
<parameter_description> a #GIOExtension
</parameter_description>
</parameter>
</parameters>
<return> the type of @extension
</return>
</function>

<function name="g_file_info_get_etag">
<description>
Gets the &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; for a given 
#GFileInfo. See %G_FILE_ATTRIBUTE_ETAG_VALUE.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the value of the &quot;etag:value&quot; attribute.
</return>
</function>

<function name="g_unix_mount_monitor_set_rate_limit">
<description>
Sets the rate limit to which the @mount_monitor will report
consecutive change events to the mount and mount point entry files.

Since: 2.18

</description>
<parameters>
<parameter name="mount_monitor">
<parameter_description> a #GUnixMountMonitor
</parameter_description>
</parameter>
<parameter name="limit_msec">
<parameter_description> a integer with the limit in milliseconds to
poll for changes.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_copy">
<description>
Copies the file @source to the location specified by @destination.
Can not handle recursive copies of directories.

If the flag #G_FILE_COPY_OVERWRITE is specified an already
existing @destination file is overwritten.

If the flag #G_FILE_COPY_NOFOLLOW_SYMLINKS is specified then symlinks
will be copied as symlinks, otherwise the target of the
@source symlink will be copied.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If @progress_callback is not %NULL, then the operation can be monitored by
setting this to a #GFileProgressCallback function. @progress_callback_data
will be passed to this function. It is guaranteed that this callback will
be called after all data has been transferred with the total number of bytes
copied during the operation.

If the @source file does not exist then the G_IO_ERROR_NOT_FOUND
error is returned, independent on the status of the @destination.

If #G_FILE_COPY_OVERWRITE is not specified and the target exists, then the
error G_IO_ERROR_EXISTS is returned.

If trying to overwrite a file over a directory the G_IO_ERROR_IS_DIRECTORY
error is returned. If trying to overwrite a directory with a directory the
G_IO_ERROR_WOULD_MERGE error is returned.

If the source is a directory and the target does not exist, or #G_FILE_COPY_OVERWRITE is
specified and the target is a file, then the G_IO_ERROR_WOULD_RECURSE error
is returned.

If you are interested in copying the #GFile object itself (not the on-disk
file), see g_file_dup().


</description>
<parameters>
<parameter name="source">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="destination">
<parameter_description> destination #GFile
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> set of #GFileCopyFlags
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="progress_callback">
<parameter_description> function to callback with progress information
</parameter_description>
</parameter>
<parameter name="progress_callback_data">
<parameter_description> user data to pass to @progress_callback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError to set on error, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE otherwise.
</return>
</function>

<function name="g_data_output_stream_put_int32">
<description>
Puts a signed 32-bit integer into the output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #gint32.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_data_input_stream_get_byte_order">
<description>
Gets the byte order for the data input stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
</parameters>
<return> the @stream's current #GDataStreamByteOrder. 
</return>
</function>

<function name="g_file_set_attribute_int64">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_INT64 to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #guint64 containing the attribute's new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set, %FALSE otherwise.
</return>
</function>

<function name="g_socket_is_closed">
<description>
Checks whether a socket is closed.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if socket is closed, %FALSE otherwise

Since: 2.22
</return>
</function>

<function name="g_filename_completer_set_dirs_only">
<description>
If @dirs_only is %TRUE, @completer will only 
complete directory names, and not file names.

</description>
<parameters>
<parameter name="completer">
<parameter_description> the filename completer.
</parameter_description>
</parameter>
<parameter name="dirs_only">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_enumerator_next_files_finish">
<description>
Finishes the asynchronous operation started with g_file_enumerator_next_files_async().


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GFileInfo&lt;!----&gt;s. You must free the list with 
g_list_free() and unref the infos with g_object_unref when you're 
done with them.
</return>
</function>

<function name="g_simple_async_report_gerror_in_idle">
<description>
Reports an error in an idle function. Similar to 
g_simple_async_report_error_in_idle(), but takes a #GError rather 
than building a new one.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback. 
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> the #GError to report
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_drive_get_name">
<description>
Gets the name of @drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
</parameters>
<return> a string containing @drive's name. The returned 
string should be freed when no longer needed.
</return>
</function>

<function name="g_filter_output_stream_get_close_base_stream">
<description>
Return value: %TRUE if the base stream will be closed.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFilterOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the base stream will be closed.
</return>
</function>

<function name="g_volume_get_activation_root">
<description>
Gets the activation root for a #GVolume if it is known ahead of
mount time. Returns %NULL otherwise. If not %NULL and if @volume
is mounted, then the result of g_mount_get_root() on the
#GMount object obtained from g_volume_get_mount() will always
either be equal or a prefix of what this function returns. In
other words, in code

&lt;programlisting&gt;
GMount *mount;
GFile *mount_root
GFile *volume_activation_root;

mount = g_volume_get_mount (volume); /* mounted, so never NULL */
mount_root = g_mount_get_root (mount);
volume_activation_root = g_volume_get_activation_root(volume); /* assume not NULL */
&lt;/programlisting&gt;

then the expression

&lt;programlisting&gt;
(g_file_has_prefix (volume_activation_root, mount_root) ||
      g_file_equal (volume_activation_root, mount_root))
&lt;/programlisting&gt;

will always be %TRUE.

Activation roots are typically used in #GVolumeMonitor
implementations to find the underlying mount to shadow, see
g_mount_is_shadowed() for more details.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume
</parameter_description>
</parameter>
</parameters>
<return> the activation root of @volume or %NULL. Use
g_object_unref() to free.

Since: 2.18
</return>
</function>

<function name="g_buffered_output_stream_set_auto_grow">
<description>
Sets whether or not the @stream's buffer should automatically grow.
If @auto_grow is true, then each write will just make the buffer
larger, and you must manually flush the buffer to actually write out
the data to the underlying stream.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedOutputStream.
</parameter_description>
</parameter>
<parameter name="auto_grow">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="fdata_add_event">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_is_system_internal">
<description>
Checks if a unix mount is a system path.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the unix mount is for a system path.
</return>
</function>

<function name="missing_add">
<description>
Unsafe, need lock fen_lock.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_socket_service_new">
<description>
Creates a new #GSocketService with no sockets to listen for.
New listeners can be added with e.g. g_socket_listener_add_address()
or g_socket_listener_add_inet_port().


</description>
<parameters>
</parameters>
<return> a new #GSocketService.
 a new #GSocketService.

Since: 2.22
</return>
</function>

<function name="g_file_info_get_content_type">
<description>
Gets the file's content type.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the file's content type.
</return>
</function>

<function name="g_unix_connection_receive_fd">
<description>
Recieves a file descriptor from the sending end of the
connection. The sending end has to call g_unix_connection_send_fd()
for this to work.

As well as reading the fd this also reads a single byte from the
stream, as this is required for fd passing to work on some
implementations.


</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GUnixConnection.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a file descriptor on success, -1 on error.

Since: 2.22
</return>
</function>

<function name="g_file_info_copy_into">
<description>
Copies all of the #GFileAttribute&lt;!-- --&gt;s from @src_info to @dest_info.

</description>
<parameters>
<parameter name="src_info">
<parameter_description> source to copy attributes from.
</parameter_description>
</parameter>
<parameter name="dest_info">
<parameter_description> destination to copy attributes to.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_address_enumerator_next_finish">
<description>
Retrieves the result of a completed call to
g_socket_address_enumerator_next_async(). See
g_socket_address_enumerator_next() for more information about
error handling.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GSocketAddressEnumerator
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddress (owned by the caller), or %NULL on
error (in which case *@error will be set) or if there are no more
addresses.
</return>
</function>

<function name="g_simple_async_result_set_error">
<description>
Sets an error within the asynchronous result without a #GError.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a #GQuark (usually #G_IO_ERROR).
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> an error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a formatted error reporting string.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of variables to fill in @format.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_connection_factory_register_type">
<description>
Looks up the #GType to be used when creating socket connections on
sockets with the specified @family,@type and @protocol_id.

If no type is registered, the #GSocketConnection base type is returned.


</description>
<parameters>
<parameter name="g_type">
<parameter_description> a #GType, inheriting from G_SOCKET_CONNECTION
</parameter_description>
</parameter>
<parameter name="family">
<parameter_description> a #GSocketFamily.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> a #GSocketType
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> a protocol id
</parameter_description>
</parameter>
</parameters>
<return> a #GType
Since: 2.22
</return>
</function>

<function name="g_unix_mount_point_get_device_path">
<description>
Gets the device path for a unix mount point.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the device path.
</return>
</function>

<function name="g_socket_get_family">
<description>
Gets the socket family of the socket.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketFamily

Since: 2.22
</return>
</function>

<function name="g_file_info_set_modification_time">
<description>
Sets the %G_FILE_ATTRIBUTE_TIME_MODIFIED attribute in the file
info to the given time value.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="mtime">
<parameter_description> a #GTimeVal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_remove_attribute">
<description>
Removes all cases of @attribute from @info if it exists.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_new">
<description>
Creates a new data input stream for the @base_stream.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
</parameters>
<return> a new #GDataInputStream.
</return>
</function>

<function name="g_socket_client_get_socket_type">
<description>
Gets the socket type of the socket client.

See g_socket_client_set_socket_type() for details.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketFamily

Since: 2.22
</return>
</function>

<function name="g_app_info_get_executable">
<description>
Gets the executable's name for the installed application.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
</parameters>
<return> a string containing the @appinfo's application 
binary's name
</return>
</function>

<function name="g_file_get_child_for_display_name">
<description>
Gets the child of @file for a given @display_name (i.e. a UTF8
version of the name). If this function fails, it returns %NULL and @error will be 
set. This is very useful when constructing a GFile for a new file
and the user entered the filename in the user interface, for instance
when you select a directory and type a filename in the file selector.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="display_name">
<parameter_description> string to a possible child.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile to the specified child, or 
%NULL if the display name couldn't be converted.  
Free the returned object with g_object_unref().
</return>
</function>

<function name="GUnixInputStream">
<description>
Whether to close the file descriptor when the stream is closed.

Since: 2.20

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_attribute_string">
<description>
Gets the value of a string attribute. If the attribute does 
not contain a string, %NULL will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> the contents of the @attribute value as a string, or 
%NULL otherwise.
</return>
</function>

<function name="g_file_replace_contents_async">
<description>
Starts an asynchronous replacement of @file with the given 
@contents of @length bytes. @etag will replace the document's 
current entity tag.

When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with 
g_file_replace_contents_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If @make_backup is %TRUE, this function will attempt to 
make a backup of @file.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> string of contents to replace the file with.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @contents in bytes.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> a new &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; for the @file, or %NULL
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_content_type_equals">
<description>
Compares two content types for equality.


</description>
<parameters>
<parameter name="type1">
<parameter_description> a content type string.
</parameter_description>
</parameter>
<parameter name="type2">
<parameter_description> a content type string.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the two strings are identical or equivalent,
%FALSE otherwise.
</return>
</function>

<function name="g_file_info_set_size">
<description>
Sets the %G_FILE_ATTRIBUTE_STANDARD_SIZE attribute in the file info 
to the given size.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #goffset containing the file's size.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_eject_mountable_finish">
<description>
Finishes an asynchronous eject operation started by 
g_file_eject_mountable().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @file was ejected successfully. %FALSE 
otherwise.
</return>
</function>

<function name="g_file_find_enclosing_mount">
<description>
Gets a #GMount for the #GFile. 

If the #GFileIface for @file does not have a mount (e.g. possibly a 
remote share), @error will be set to %G_IO_ERROR_NOT_FOUND and %NULL
will be returned.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> a #GMount where the @file is located or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="GFileIcon">
<description>
The file containing the icon.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_socket_bind">
<description>
When a socket is created it is attached to an address family, but it
doesn't have an address in this family. g_socket_bind() assigns the
address (sometimes called name) of the socket.

It is generally required to bind to a local address before you can
receive connections. (See g_socket_listen() and g_socket_accept() ).

If @allow_reuse is %TRUE this allows the bind call to succeed in some
situation where it would otherwise return a %G_IO_ERROR_ADDRESS_IN_USE
error. The main example is for a TCP server socket where there are
outstanding connections in the WAIT state, which are generally safe
to ignore. However, setting it to %TRUE doesn't mean the call will
succeed if there is a socket actively bound to the address.

In general, pass %TRUE if the socket will be used to accept connections,
otherwise pass %FALSE.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a #GSocketAddress specifying the local address.
</parameter_description>
</parameter>
<parameter name="allow_reuse">
<parameter_description> whether to allow reusing this address
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.

Since: 2.22
</return>
</function>

<function name="g_app_info_set_as_default_for_extension">
<description>
Sets the application as the default handler for the given file extention.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
<parameter name="extension">
<parameter_description> a string containing the file extension (without the dot).
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_input_stream_read_all">
<description>
Tries to read @count bytes from the stream into the buffer starting at
@buffer. Will block during this read.

This function is similar to g_input_stream_read(), except it tries to
read as many bytes as requested, only stopping on an error or end of stream.

On a successful read of @count bytes, or if we reached the end of the
stream,  %TRUE is returned, and @bytes_read is set to the number of bytes
read into @buffer.

If there is an error during the operation %FALSE is returned and @error
is set to indicate the error status, @bytes_read is updated to contain
the number of bytes read into @buffer before the error occurred.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least count bytes long).
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream
</parameter_description>
</parameter>
<parameter name="bytes_read">
<parameter_description> location to store the number of bytes that was read from the stream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if there was an error
</return>
</function>

<function name="g_unix_connection_send_fd">
<description>
Passes a file descriptor to the recieving side of the
connection. The recieving end has to call g_unix_connection_receive_fd()
to accept the file descriptor.

As well as sending the fd this also writes a single byte to the
stream, as this is required for fd passing to work on some
implementations.


</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GUnixConnection.
</parameter_description>
</parameter>
<parameter name="fd">
<parameter_description> a file descriptor
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a %TRUE on success, %NULL on error.

Since: 2.22
</return>
</function>

<function name="g_input_stream_close_finish">
<description>
Finishes closing a stream asynchronously, started from g_input_stream_close_async().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the stream was closed successfully.
</return>
</function>

<function name="g_local_file_monitor_new">
<description>

</description>
<parameters>
<parameter name="pathname">
<parameter_description> path name to monitor.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFileMonitorFlags.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFileMonitor for the given @pathname. 
</return>
</function>

<function name="g_resolver_lookup_by_address_finish">
<description>
Retrieves the result of a previous call to
g_resolver_lookup_by_address_async().

If the DNS resolution failed, @error (if non-%NULL) will be set to
a value from #GResolverError. If the operation was cancelled,
@error will be set to %G_IO_ERROR_CANCELLED.


</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the result passed to your #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a hostname (either ASCII-only, or in ASCII-encoded
form), or %NULL on error.

Since: 2.22
</return>
</function>

<function name="g_content_type_is_unknown">
<description>
Checks if the content type is the generic &quot;unknown&quot; type.
On unix this is the &quot;application/octet-stream&quot; mimetype,
while on win32 it is &quot;*&quot;.


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string. 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the type is the unknown type.
</return>
</function>

<function name="g_socket_get_fd">
<description>
Returns: the file descriptor of the socket.

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> the file descriptor of the socket.

Since: 2.22
</return>
</function>

<function name="g_cancellable_pop_current">
<description>
Pops @cancellable off the cancellable stack (verifying that @cancellable 
is on the top of the stack).

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_async_result_get_source_object">
<description>
Gets the source object from a #GAsyncResult.


</description>
<parameters>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> the source object for the @res.
</return>
</function>

<function name="g_file_replace_async">
<description>
Asynchronously overwrites the file, replacing the contents, possibly
creating a backup copy of the file first.

For more details, see g_file_replace() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_replace_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> an &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; for the 
current #GFile, or NULL to ignore.
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_guess_can_eject">
<description>
Guesses whether a Unix mount can be ejected.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMountEntry
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_entry is deemed to be ejectable.
</return>
</function>

<function name="g_socket_control_message_get_size">
<description>
Returns: The number of bytes required.

</description>
<parameters>
<parameter name="message">
<parameter_description> a #GSocketControlMessage
</parameter_description>
</parameter>
</parameters>
<return> The number of bytes required.

Since: 2.22
</return>
</function>

<function name="g_inet_address_to_string">
<description>
Converts @address to string form.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> a representation of @address as a string, which should be
freed after use.

Since: 2.22
</return>
</function>

<function name="g_file_info_list_attributes">
<description>
Lists the file info structure's attributes.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="name_space">
<parameter_description> a file attribute key's namespace.
</parameter_description>
</parameter>
</parameters>
<return> a null-terminated array of strings of all of the 
possible attribute types for the given @name_space, or 
%NULL on error.
</return>
</function>

<function name="g_mount_operation_set_choice">
<description>
Sets a default choice for the mount operation.

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="choice">
<parameter_description> an integer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_int64">
<description>
Reads a 64-bit/8-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_stream_get_byte_order() and g_data_stream_set_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a signed 64-bit/8-byte value read from @stream or %0 if 
an error occurred.  
</return>
</function>

<function name="g_unix_mount_point_get_mount_path">
<description>
Gets the mount path for a unix mount point.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the mount path.
</return>
</function>

<function name="g_mount_get_uuid">
<description>
Gets the UUID for the @mount. The reference is typically based on
the file system UUID for the mount in question and should be
considered an opaque string. Returns %NULL if there is no UUID
available.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> the UUID for @mount or %NULL if no UUID can be computed.
The returned string should be freed with g_free()
when no longer needed.
</return>
</function>

<function name="g_file_output_stream_query_info_finish">
<description>
Finalizes the asynchronous query started 
by g_file_output_stream_query_info_async().


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileOutputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> A #GFileInfo for the finished query.
</return>
</function>

<function name="g_simple_async_result_get_op_res_gpointer">
<description>
Gets a pointer result as returned by the asynchronous function.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> a pointer from the result.
</return>
</function>

<function name="g_resolver_lookup_service">
<description>
Synchronously performs a DNS SRV lookup for the given @service and
@protocol in the given @domain and returns an array of #GSrvTarget.
@domain may be an ASCII-only or UTF-8 hostname. Note also that the
@service and @protocol arguments &lt;emphasis&gt;do not&lt;/emphasis&gt;
include the leading underscore that appears in the actual DNS
entry.

On success, g_resolver_lookup_service() will return a #GList of
#GSrvTarget, sorted in order of preference. (That is, you should
attempt to connect to the first target first, then the second if
the first fails, etc.)

If the DNS resolution fails, @error (if non-%NULL) will be set to
a value from #GResolverError.

If @cancellable is non-%NULL, it can be used to cancel the
operation, in which case @error (if non-%NULL) will be set to
%G_IO_ERROR_CANCELLED.

If you are planning to connect to the service, it is usually easier
to create a #GNetworkService and use its #GSocketConnectable
interface.


</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="service">
<parameter_description> the service type to look up (eg, &quot;ldap&quot;)
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> the networking protocol to use for @service (eg, &quot;tcp&quot;)
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> the DNS domain to look up the service in
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GSrvTarget, or %NULL on error. You must
free each of the targets and the list when you are done with it.
(You can use g_resolver_free_targets() to do this.)

Since: 2.22
</return>
</function>

<function name="g_file_resolve_relative_path">
<description>
Resolves a relative path for @file to an absolute path.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="relative_path">
<parameter_description> a given relative path string.
</parameter_description>
</parameter>
</parameters>
<return> #GFile to the resolved path. %NULL if @relative_path 
is %NULL or if @file is invalid.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_buffered_input_stream_fill">
<description>
Tries to read @count bytes from the stream into the buffer. 
Will block during this read.

If @count is zero, returns zero and does nothing. A value of @count
larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes read into the buffer is returned.
It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file. Zero is returned on end of file
(or if @count is zero),  but never otherwise.

If @count is -1 then the attempted read size is equal to the number of
bytes that are required to fill the buffer.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.

For the asynchronous, non-blocking, version of this function, see 
g_buffered_input_stream_fill_async().


</description>
<parameters>
<parameter name="stream">
<parameter_description> #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes read into @stream's buffer, up to @count, 
or -1 on error.
</return>
</function>

<function name="GInetSocketAddress">
<description>
An IPv4 or IPv6 socket address, corresponding to a &lt;type&gt;struct
sockaddr_in&lt;/type&gt; or &lt;type&gt;struct sockaddr_in6&lt;/type&gt;.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_file_create_readwrite">
<description>
Creates a new file and returns a stream for reading and writing to it.
The file must not already exist.

By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in @flags the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

If a file or directory with this name already exists the G_IO_ERROR_EXISTS
error will be returned.
Some file systems don't allow all file names, and may
return an G_IO_ERROR_INVALID_FILENAME error, and if the name
is to long G_IO_ERROR_FILENAME_TOO_LONG will be returned.
Other errors are possible too, and depend on what kind of
filesystem the file is on.

Note that in many non-local file cases read and write streams are not supported,
so make sure you really need to do read and write streaming, rather than
just opening for reading or writing.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileIOStream for the newly created file, or
%NULL on error.
Free the returned object with g_object_unref().

Since: 2.22
</return>
</function>

<function name="g_file_read_async">
<description>
Asynchronously opens @file for reading.

For more details, see g_file_read() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_read_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_int32">
<description>
Reads a signed 32-bit/4-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_stream_get_byte_order() and g_data_stream_set_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a signed 32-bit/4-byte value read from the @stream or %0 if 
an error occurred. 
</return>
</function>

<function name="g_file_info_set_display_name">
<description>
Sets the display name for the current #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="display_name">
<parameter_description> a string containing a display name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_append_to_finish">
<description>
Finishes an asynchronous file append operation started with 
g_file_append_to_async(). 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a valid #GFileOutputStream or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_socket_receive_from">
<description>
Receive data (up to @size bytes) from a socket.

If @address is non-%NULL then @address will be set equal to the
source address of the received packet.
@address is owned by the caller.

If the socket is in blocking mode the call will block until there is
some data to receive or there is an error. If there is no data available
and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
will be returned. To be notified of available data, wait for the %G_IO_IN
condition.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a pointer to a #GSocketAddress pointer, or %NULL
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least count bytes long).
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes that will be read from the stream
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes read, or -1 on error

Since: 2.22
</return>
</function>

<function name="g_seekable_can_seek">
<description>
Tests if the stream supports the #GSeekableIface.


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @seekable can be seeked. %FALSE otherwise.
</return>
</function>

<function name="g_file_info_set_attribute_object">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a #GObject.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_replace">
<description>
Returns: a #GFileIOStream or %NULL on error.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> an optional &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; for the
current #GFile, or #NULL to ignore.
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileIOStream or %NULL on error.
Free the returned object with g_object_unref().

Since: 2.22
</return>
</function>

<function name="g_mount_operation_new">
<description>
Creates a new mount operation.


</description>
<parameters>
</parameters>
<return> a #GMountOperation.
</return>
</function>

<function name="g_file_monitor_directory">
<description>
Obtains a directory monitor for the given file.
This may fail if directory monitoring is not supported.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileMonitorFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileMonitor for the given @file, or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_attribute_matcher_new">
<description>
Creates a new file attribute matcher, which matches attributes 
against a given string. #GFileAttributeMatcher&lt;!-- --&gt;s are reference 
counted structures, and are created with a reference count of 1. If 
the number of references falls to 0, the #GFileAttributeMatcher is 
automatically destroyed.

The @attribute string should be formatted with specific keys separated
from namespaces with a double colon. Several &quot;namespace::key&quot; strings may be 
concatenated with a single comma (e.g. &quot;standard::type,standard::is-hidden&quot;). 
The wildcard &quot;*&quot; may be used to match all keys and namespaces, or 
&quot;namespace::*&quot; will match all keys in a given namespace. 

Examples of strings to use:
&lt;table&gt;
&lt;title&gt;File Attribute Matcher strings and results&lt;/title&gt;
&lt;tgroup cols='2' align='left'&gt;&lt;thead&gt;
&lt;row&gt;&lt;entry&gt; Matcher String &lt;/entry&gt;&lt;entry&gt; Matches &lt;/entry&gt;&lt;/row&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;row&gt;&lt;entry&gt;&quot;*&quot;&lt;/entry&gt;&lt;entry&gt;matches all attributes.&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;&quot;standard::is-hidden&quot;&lt;/entry&gt;&lt;entry&gt;matches only the key is-hidden in the standard namespace.&lt;/entry&gt;&lt;/row&gt;
&lt;row&gt;&lt;entry&gt;&quot;standard::type,unix::*&quot;&lt;/entry&gt;&lt;entry&gt;matches the type key in the standard namespace and
all keys in the unix namespace.&lt;/entry&gt;&lt;/row&gt;
&lt;/tbody&gt;&lt;/tgroup&gt;
&lt;/table&gt;


</description>
<parameters>
<parameter name="attributes">
<parameter_description> an attribute string to match.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeMatcher.
</return>
</function>

<function name="port_remove">
<description>
&lt; private &gt;
Unsafe, need lock fen_lock.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_io_modules_load_all_in_directory">
<description>
Loads all the modules in the specified directory.


</description>
<parameters>
<parameter name="dirname">
<parameter_description> pathname for a directory containing modules to load.
</parameter_description>
</parameter>
</parameters>
<return> a list of #GIOModules loaded from the directory,
All the modules are loaded into memory, if you want to
unload them (enabling on-demand loading) you must call
g_type_module_unuse() on all the modules. Free the list
with g_list_free().
</return>
</function>

<function name="g_socket_condition_check">
<description>
Checks on the readiness of @socket to perform operations.  The
operations specified in @condition are checked for and masked
against the currently-satisfied conditions on @socket.  The result
is returned.

It is meaningless to specify %G_IO_ERR or %G_IO_HUP in condition;
these conditions will always be set in the output if they are true.

This call never blocks.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="condition">
<parameter_description> a #GIOCondition mask to check
</parameter_description>
</parameter>
</parameters>
<return> the @GIOCondition mask of the current state

Since: 2.22
</return>
</function>

<function name="Get">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_srv_target_get_hostname">
<description>
Gets @target's hostname (in ASCII form; if you are going to present
this to the user, you should use g_hostname_is_ascii_encoded() to
check if it contains encoded Unicode segments, and use
g_hostname_to_unicode() to convert it if it does.)


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return> @target's hostname

Since: 2.22
</return>
</function>

<function name="g_io_extension_point_get_extensions">
<description>
Gets a list of all extensions that implement this extension point.
The list is sorted by priority, beginning with the highest priority.


</description>
<parameters>
<parameter name="extension_point">
<parameter_description> a #GIOExtensionPoint
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GIOExtension&lt;!-- --&gt;s. The list is owned by
GIO and should not be modified
</return>
</function>

<function name="g_volume_mount">
<description>
Mounts a volume. This is an asynchronous operation, and is
finished by calling g_volume_mount_finish() with the @volume
and #GAsyncResult returned in the @callback.

</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data that gets passed to @callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_extension_point_implement">
<description>
Registers @type as extension for the extension point with name
@extension_point_name. 

If @type has already been registered as an extension for this 
extension point, the existing #GIOExtension object is returned.


</description>
<parameters>
<parameter name="extension_point_name">
<parameter_description> the name of the extension point
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the #GType to register as extension 
</parameter_description>
</parameter>
<parameter name="extension_name">
<parameter_description> the name for the extension
</parameter_description>
</parameter>
<parameter name="priority">
<parameter_description> the priority for the extension
</parameter_description>
</parameter>
</parameters>
<return> a #GIOExtension object for #GType
</return>
</function>

<function name="GResolver">
<description>
The object that handles DNS resolution. Use g_resolver_get_default()
to get the default resolver.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_is_readonly">
<description>
Checks if a unix mount is mounted read only.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @mount_entry is read only.
</return>
</function>

<function name="GUnixOutputStream">
<description>
Whether to close the file descriptor when the stream is closed.

Since: 2.20

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_inet_address_new_from_string">
<description>
Parses @string as an IP address and creates a new #GInetAddress.


</description>
<parameters>
<parameter name="string">
<parameter_description> a string representation of an IP address
</parameter_description>
</parameter>
</parameters>
<return> a new #GInetAddress corresponding to @string, or %NULL if
@string could not be parsed.

Since: 2.22
</return>
</function>

<function name="g_file_info_get_attribute_type">
<description>
Gets the attribute type for an attribute key.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeType for the given @attribute, or 
%G_FILE_ATTRIBUTE_TYPE_INVALID if the key is invalid.
</return>
</function>

<function name="g_file_find_enclosing_mount_finish">
<description>
Finishes an asynchronous find mount request. 
See g_file_find_enclosing_mount_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> #GMount for given @file or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_inet_socket_address_get_port">
<description>
Gets @address's port.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetSocketAddress
</parameter_description>
</parameter>
</parameters>
<return> the port for @address

Since: 2.22
</return>
</function>

<function name="GMountOperation">
<description>
The index of the user's choice when a question is asked during the 
mount operation. See the #GMountOperation::ask-question signal.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_file_create">
<description>
Creates a new file and returns an output stream for writing to it.
The file must not already exist.

By default files created are generally readable by everyone,
but if you pass #G_FILE_CREATE_PRIVATE in @flags the file
will be made readable only to the current user, to the level that
is supported on the target filesystem.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If a file or directory with this name already exists the G_IO_ERROR_EXISTS
error will be returned.
Some file systems don't allow all file names, and may
return an G_IO_ERROR_INVALID_FILENAME error, and if the name
is to long G_IO_ERROR_FILENAME_TOO_LONG will be returned.
Other errors are possible too, and depend on what kind of
filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream for the newly created file, or 
%NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_memory_input_stream_add_data">
<description>
Appends @data to data that can be read from the input stream

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GMemoryInputStream
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> input data
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> length of the data, may be -1 if @data is a nul-terminated string
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> function that is called to free @data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_stream_get_output_stream">
<description>
Gets the output stream for this object. This is used for
writing.


</description>
<parameters>
<parameter name="stream">
<parameter_description> input #GIOStream.
</parameter_description>
</parameter>
</parameters>
<return> a #GOutputStream, owned by the #GIOStream do not free.

Since: 2.22
</return>
</function>

<function name="g_content_type_get_description">
<description>
Gets the human readable description of the content type.


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string. 
</parameter_description>
</parameter>
</parameters>
<return> a short description of the content type @type. 
</return>
</function>

<function name="g_file_load_contents">
<description>
Loads the content of the file into memory. The data is always 
zero-terminated, but this is not included in the resultant @length.
The returned @content should be freed with g_free() when no longer
needed.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> a location to place the contents of the file.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a location to place the length of the contents of the file,
or %NULL if the length is not needed
</parameter_description>
</parameter>
<parameter name="etag_out">
<parameter_description> a location to place the current entity tag for the file,
or %NULL if the entity tag is not needed
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @file's contents were successfully loaded.
%FALSE if there were errors.
</return>
</function>

<function name="g_inet_address_get_is_multicast">
<description>
Tests whether @address is a multicast address.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a multicast address.

Since: 2.22
</return>
</function>

<function name="g_data_output_stream_put_int64">
<description>
Puts a signed 64-bit integer into the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> a #gint64.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @data was successfully added to the @stream.
</return>
</function>

<function name="g_inet_socket_address_get_address">
<description>
Gets @address's #GInetAddress.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetSocketAddress
</parameter_description>
</parameter>
</parameters>
<return> the #GInetAddress for @address, which must be
g_object_ref()'d if it will be stored

Since: 2.22
</return>
</function>

<function name="g_file_replace_contents">
<description>
Replaces the contents of @file with @contents of @length bytes.
 
If @etag is specified (not %NULL) any existing file must have that etag, or
the error %G_IO_ERROR_WRONG_ETAG will be returned.

If @make_backup is %TRUE, this function will attempt to make a backup of @file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

The returned @new_etag can be used to verify that the file hasn't changed the
next time it is saved over.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> a string containing the new contents for @file.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> the length of @contents in bytes.
</parameter_description>
</parameter>
<parameter name="etag">
<parameter_description> the old &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; 
for the document, or %NULL
</parameter_description>
</parameter>
<parameter name="make_backup">
<parameter_description> %TRUE if a backup should be created.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="new_etag">
<parameter_description> a location to a new &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt;
for the document. This should be freed with g_free() when no longer 
needed, or %NULL
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present.
</return>
</function>

<function name="g_socket_connectable_enumerate">
<description>
Creates a #GSocketAddressEnumerator for @connectable.


</description>
<parameters>
<parameter name="connectable">
<parameter_description> a #GSocketConnectable
</parameter_description>
</parameter>
</parameters>
<return> a new #GSocketAddressEnumerator.

Since: 2.22
</return>
</function>

<function name="g_emblemed_icon_get_icon">
<description>
Gets the main icon for @emblemed.


</description>
<parameters>
<parameter name="emblemed">
<parameter_description> a #GEmblemedIcon
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon that is owned by @emblemed

Since: 2.18
</return>
</function>

<function name="GSrvTarget">
<description>
A single target host/port that a network service is running on.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_socket_protocol_id_lookup_by_name">
<description>
Tries to look up the protocol id for a given
protocol name. If the protocol name is not known
on this system it returns -1.

If @protocol_name is %NULL (default protocol) then
0 is returned.


</description>
<parameters>
<parameter name="protocol_name">
<parameter_description> The name of a protocol, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a protocol id, or -1 if unknown

Since: 2.22
</return>
</function>

<function name="g_file_info_set_is_symlink">
<description>
Sets the &quot;is_symlink&quot; attribute in a #GFileInfo according to @is_symlink.
See %G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="is_symlink">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_volume_monitor_get_volume_for_uuid">
<description>
Finds a #GVolume object by its UUID (see g_volume_get_uuid())


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
<parameter name="uuid">
<parameter_description> the UUID to look for
</parameter_description>
</parameter>
</parameters>
<return> a #GVolume or %NULL if no such volume is available.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_app_info_launch_uris">
<description>
Launches the application. Passes @uris to the launched application 
as arguments, using the optional @launch_context to get information
about the details of the launcher (like what screen it is on).
On error, @error will be set accordingly.

To lauch the application without arguments pass a %NULL @uris list.

Note that even if the launch is successful the application launched
can fail to start if it runs into problems during startup. There is
no way to detect this.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
<parameter name="uris">
<parameter_description> a #GList containing URIs to launch. 
</parameter_description>
</parameter>
<parameter name="launch_context">
<parameter_description> a #GAppLaunchContext or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful launch, %FALSE otherwise. 
</return>
</function>

<function name="g_network_address_parse">
<description>
Creates a new #GSocketConnectable for connecting to the given
@hostname and @port. May fail and return %NULL in case
parsing @host_and_port fails.

@host_and_port may be in any of a number of recognised formats: an IPv6
address, an IPv4 address, or a domain name (in which case a DNS
lookup is performed).  Quoting with [] is supported for all address
types.  A port override may be specified in the usual way with a
colon.  Ports may be given as decimal numbers or symbolic names (in
which case an /etc/services lookup is performed).

If no port is specified in @host_and_port then @default_port will be
used as the port number to connect to.

In general, @host_and_port is expected to be provided by the user (allowing
them to give the hostname, and a port overide if necessary) and
@default_port is expected to be provided by the application.


</description>
<parameters>
<parameter name="host_and_port">
<parameter_description> the hostname and optionally a port
</parameter_description>
</parameter>
<parameter name="default_port">
<parameter_description> the default port if not in @host_and_port
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> the new #GNetworkAddress, or %NULL on error

Since: 2.22
</return>
</function>

<function name="g_file_open_readwrite">
<description>
Opens an existing file for reading and writing. The result is
a #GFileIOStream that can be used to read and write the contents of the file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
If the file is a directory, the G_IO_ERROR_IS_DIRECTORY error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.
Note that in many non-local file cases read and write streams are not supported,
so make sure you really need to do read and write streaming, rather than
just opening for reading or writing.


</description>
<parameters>
<parameter name="file">
<parameter_description> #GFile to open
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> #GFileIOStream or %NULL on error.
Free the returned object with g_object_unref().

Since: 2.22
</return>
</function>

<function name="g_socket_listener_accept_socket">
<description>
Blocks waiting for a client to connect to any of the sockets added
to the listener. Returns the #GSocket that was accepted.

If you want to accept the high-level #GSocketConnection, not a #GSocket,
which is often the case, then you should use g_socket_listener_accept()
instead.

If @source_object is not %NULL it will be filled out with the source
object specified when the corresponding socket or address was added
to the listener.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error G_IO_ERROR_CANCELLED will be returned.


</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> location where #GObject pointer will be stored, or %NULL
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocket on success, %NULL on error.

Since: 2.22
</return>
</function>

<function name="g_unix_mount_guess_icon">
<description>
Guesses the icon of a Unix mount. 


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMountEntry
</parameter_description>
</parameter>
</parameters>
<return> a #GIcon
</return>
</function>

<function name="g_socket_address_get_family">
<description>
Gets the socket family type of @address.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GSocketAddress
</parameter_description>
</parameter>
</parameters>
<return> the socket family type of @address.

Since: 2.22
</return>
</function>

<function name="Cancels">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_at">
<description>
Gets a #GUnixMountEntry for a given mount path. If @time_read
is set, it will be filled with a unix timestamp for checking
if the mounts have changed since with g_unix_mounts_changed_since().


</description>
<parameters>
<parameter name="mount_path">
<parameter_description> path for a possible unix mount.
</parameter_description>
</parameter>
<parameter name="time_read">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return> a #GUnixMount. 
</return>
</function>

<function name="g_simple_async_result_get_op_res_gssize">
<description>
Gets a gssize from the asynchronous result.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
</parameters>
<return> a gssize returned from the asynchronous function.
</return>
</function>

<function name="g_simple_async_report_error_in_idle">
<description>
Reports an error in an asynchronous function in an idle function by 
directly setting the contents of the #GAsyncResult with the given error
information.

</description>
<parameters>
<parameter name="object">
<parameter_description> a #GObject.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback. 
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a #GQuark containing the error domain (usually #G_IO_ERROR).
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> a specific error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a formatted error reporting string.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of variables to fill in @format.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_append_to_async">
<description>
Asynchronously opens @file for appending.

For more details, see g_file_append_to() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_append_to_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCreateFlags.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_vfs_get_default">
<description>
Gets the default #GVfs for the system.


</description>
<parameters>
</parameters>
<return> a #GVfs. 
</return>
</function>

<function name="g_file_mount_mountable_finish">
<description>
Finishes a mount operation. See g_file_mount_mountable() for details.

Finish an asynchronous mount operation that was started 
with g_file_mount_mountable().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFile or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_drive_poll_for_media_finish">
<description>
Finishes an operation started with g_drive_poll_for_media() on a drive.


</description>
<parameters>
<parameter name="drive">
<parameter_description> a #GDrive.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the drive has been poll_for_mediaed successfully,
%FALSE otherwise.
</return>
</function>

<function name="g_file_monitor_emit_event">
<description>
Emits the #GFileMonitor::changed signal if a change
has taken place. Should be called from file monitor 
implementations only.

The signal will be emitted from an idle handler.

</description>
<parameters>
<parameter name="monitor">
<parameter_description> a #GFileMonitor.
</parameter_description>
</parameter>
<parameter name="child">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
<parameter name="other_file">
<parameter_description> a #GFile.
</parameter_description>
</parameter>
<parameter name="event_type">
<parameter_description> a set of #GFileMonitorEvent flags.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_stream_get_input_stream">
<description>
Gets the input stream for this object. This is used
for reading.


</description>
<parameters>
<parameter name="stream">
<parameter_description> input #GIOStream.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream, owned by the #GIOStream do not free.

Since: 2.22
</return>
</function>

<function name="g_async_initable_new_async">
<description>
Helper function for constructing #GAsyncInitiable object. This is
similar to g_object_new_valist() but also initializes the object asyncronously.

When the initialization is finished, @callback will be called. You can then call
g_async_initable_new_finish() to get new object and check for any errors.

Since: 2.22

</description>
<parameters>
<parameter name="object_type">
<parameter_description> a #GType supporting #GAsyncInitable.
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property, followed by
the value, and other property value pairs, and ended by %NULL.
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> The var args list generated from @first_property_name.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the operation.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the initialization is finished
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_content_type_can_be_executable">
<description>
Checks if a content type can be executable. Note that for instance
things like text files can be executables (i.e. scripts and batch files).


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file type corresponds to a type that
can be executable, %FALSE otherwise. 
</return>
</function>

<function name="g_socket_listener_close">
<description>
Closes all the sockets in the listener.

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_data_input_stream_read_line">
<description>
Reads a line from the data input stream.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a #gsize to get the length of the data read in.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a string with the line that was read in (without the newlines).
Set @length to a #gsize to get the length of the read line.
On an error, it will return %NULL and @error will be set. If there's no
content to read, it will still return %NULL, but @error won't be set.
</return>
</function>

<function name="g_file_info_get_attribute_as_string">
<description>
Gets the value of a attribute, formated as a string.
This escapes things as needed to make the string valid
utf8.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a UTF-8 string associated with the given @attribute.
When you're done with the string it must be freed with g_free().
</return>
</function>

<function name="g_unix_volume_disconnected">
<description>

</description>
<parameters>
<parameter name="volume">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_client_set_protocol">
<description>
Sets the protocol of the socket client.
The sockets created by this object will use of the specified
protocol.

If @protocol is %NULL that means to use the default
protocol for the socket family and type.

Since: 2.22

</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="protocol">
<parameter_description> a string, or %NULL
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="get_viewable_logical_drives">
<description>
Return value: bitmask with same meaning as returned by GetLogicalDrives()

</description>
<parameters>
</parameters>
<return> bitmask with same meaning as returned by GetLogicalDrives()
</return>
</function>

<function name="g_file_info_set_attribute_mask">
<description>
Sets @mask on @info to match specific attribute types.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="mask">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_unmount">
<description>
Unmounts a mount. This is an asynchronous operation, and is 
finished by calling g_mount_unmount_finish() with the @mount 
and #GAsyncResult data returned in the @callback.

</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_query_default_handler">
<description>
Returns: a #GAppInfo if the handle was found, %NULL if there were errors.

</description>
<parameters>
<parameter name="file">
<parameter_description> a #GFile to open.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GAppInfo if the handle was found, %NULL if there were errors.
When you are done with it, release it with g_object_unref()
</return>
</function>

<function name="Adjust">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_app_info_supports_files">
<description>
Checks if the application accepts files as arguments.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @appinfo supports files.
</return>
</function>

<function name="g_file_set_attribute_int32">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_INT32 to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a #gint32 containing the attribute's new value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set to @value 
in the @file, %FALSE otherwise. 
</return>
</function>

<function name="g_unix_mount_point_is_user_mountable">
<description>
Checks if a unix mount point is mountable by the user.


</description>
<parameters>
<parameter name="mount_point">
<parameter_description> a #GUnixMountPoint.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount point is user mountable.
</return>
</function>

<function name="g_app_info_supports_uris">
<description>
Checks if the application supports reading files and directories from URIs.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @appinfo supports URIs.
</return>
</function>

<function name="g_file_info_set_icon">
<description>
Sets the icon for a given #GFileInfo. 
See %G_FILE_ATTRIBUTE_STANDARD_ICON.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="icon">
<parameter_description> a #GIcon.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_attribute_info_list_dup">
<description>
Makes a duplicate of a file attribute info list.


</description>
<parameters>
<parameter name="list">
<parameter_description> a #GFileAttributeInfoList to duplicate.
</parameter_description>
</parameter>
</parameters>
<return> a copy of the given @list.
</return>
</function>

<function name="g_file_input_stream_query_info_async">
<description>
Queries the stream information asynchronously.
When the operation is finished @callback will be called. 
You can then call g_file_input_stream_query_info_finish() 
to get the result of the operation.

For the synchronous version of this function, 
see g_file_input_stream_query_info(). 

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be set


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileInputStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_new_from_fd">
<description>
Creates a new #GSocket from a native file descriptor
or winsock SOCKET handle.

This reads all the settings from the file descriptor so that
all properties should work. Note that the file descriptor
will be set to non-blocking mode, independent on the blocking
mode of the #GSocket.


</description>
<parameters>
<parameter name="fd">
<parameter_description> a native socket file descriptor.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocket or %NULL on error.
Free the returned object with g_object_unref().

Since: 2.22
</return>
</function>

<function name="g_data_input_stream_read_until">
<description>
Reads a string from the data input stream, up to the first
occurrence of any of the stop characters.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="stop_chars">
<parameter_description> characters to terminate the read.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a #gsize to get the length of the data read in.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> a string with the data that was read before encountering
any of the stop characters. Set @length to a #gsize to get the length
of the string. This function will return %NULL on an error.
</return>
</function>

<function name="g_app_launch_context_launch_failed">
<description>
Called when an application has failed to launch, so that it can cancel
the application startup notification started in g_app_launch_context_get_startup_notify_id().


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GAppLaunchContext.
</parameter_description>
</parameter>
<parameter name="startup_notify_id">
<parameter_description> the startup notification id that was returned by g_app_launch_context_get_startup_notify_id().
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_connect">
<description>
Convenience function to connect to the #GCancellable::cancelled
signal. Also handles the race condition that may happen
if the cancellable is cancelled right before connecting.

@callback is called at most once, either directly at the
time of the connect if @cancellable is already cancelled,
or when @cancellable is cancelled in some thread.

@data_destroy_func will be called when the handler is
disconnected, or immediately if the cancellable is already
cancelled.

See #GCancellable::cancelled for details on how to use this.


</description>
<parameters>
<parameter name="cancellable">
<parameter_description> A #GCancellable.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> The #GCallback to connect.
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> Data to pass to @callback.
</parameter_description>
</parameter>
<parameter name="data_destroy_func">
<parameter_description> Free function for @data or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> The id of the signal handler or 0 if @cancellable has already
been cancelled.

Since: 2.22
</return>
</function>

<function name="g_emblem_new">
<description>
Creates a new emblem for @icon.


</description>
<parameters>
<parameter name="icon">
<parameter_description> a GIcon containing the icon.
</parameter_description>
</parameter>
</parameters>
<return> a new #GEmblem.

Since: 2.18
</return>
</function>

<function name="g_socket_get_blocking">
<description>
Gets the blocking mode of the socket. For details on blocking I/O,
see g_socket_set_blocking().


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if blocking I/O is used, %FALSE otherwise.

Since: 2.22
</return>
</function>

<function name="g_network_address_new">
<description>
Creates a new #GSocketConnectable for connecting to the given
@hostname and @port.


</description>
<parameters>
<parameter name="hostname">
<parameter_description> the hostname
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> the port
</parameter_description>
</parameter>
</parameters>
<return> the new #GNetworkAddress

Since: 2.22
</return>
</function>

<function name="g_app_launch_context_new">
<description>
Creates a new application launch context. This is not normally used,
instead you instantiate a subclass of this, such as #GdkAppLaunchContext.


</description>
<parameters>
</parameters>
<return> a #GAppLaunchContext.
</return>
</function>

<function name="g_simple_async_result_set_op_res_gpointer">
<description>
Sets the operation result within the asynchronous result to a pointer.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="op_res">
<parameter_description> a pointer result from an asynchronous function.
</parameter_description>
</parameter>
<parameter name="destroy_op_res">
<parameter_description> a #GDestroyNotify function.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_buffered_input_stream_set_buffer_size">
<description>
Sets the size of the internal buffer of @stream to @size, or to the 
size of the contents of the buffer. The buffer can never be resized 
smaller than its current contents.

</description>
<parameters>
<parameter name="stream">
<parameter_description> #GBufferedInputStream.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_has_uri_scheme">
<description>
Checks to see if a #GFile has a given URI scheme.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="uri_scheme">
<parameter_description> a string containing a URI scheme.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if #GFile's backend supports the
given URI scheme, %FALSE if URI scheme is %NULL,
not supported, or #GFile is invalid.
</return>
</function>

<function name="g_unix_mount_get_device_path">
<description>
Gets the device path for a unix mount.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the device path.
</return>
</function>

<function name="If">
<description>
Unsafe, need lock.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_is_hidden">
<description>
Sets the &quot;is_hidden&quot; attribute in a #GFileInfo according to @is_symlink.
See %G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="is_hidden">
<parameter_description> a #gboolean.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_socket_get_protocol_name">
<description>
Gets the socket protocol type name the socket was created with.
This can be %NULL if the socket was created with a NULL protocol.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> a string or %NULL, free with g_free

Since: 2.22
</return>
</function>

<function name="g_themed_icon_prepend_name">
<description>
Prepend a name to the list of icons from within @icon.

&lt;note&gt;&lt;para&gt;
Note that doing so invalidates the hash computed by prior calls
to g_icon_hash().
&lt;/para&gt;&lt;/note&gt;

Since: 2.18

</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GThemedIcon
</parameter_description>
</parameter>
<parameter name="iconname">
<parameter_description> name of icon to prepend to list of icons from within @icon.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_themed_icon_new_from_names">
<description>
Creates a new themed icon for @iconnames.


</description>
<parameters>
<parameter name="iconnames">
<parameter_description> an array of strings containing icon names.
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the length of the @iconnames array, or -1 if @iconnames is 
%NULL-terminated
</parameter_description>
</parameter>
</parameters>
<return> a new #GThemedIcon
</return>
</function>

<function name="g_buffered_input_stream_new_sized">
<description>
Creates a new #GBufferedInputStream from the given @base_stream, 
with a buffer set to @size.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
</parameters>
<return> a #GInputStream.
</return>
</function>

<function name="g_file_query_settable_attributes">
<description>
Obtain the list of settable attributes for the file.

Returns: a #GFileAttributeInfoList describing the settable attributes.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeInfoList describing the settable attributes.
When you are done with it, release it with g_file_attribute_info_list_unref()
</return>
</function>

<function name="g_io_error_from_errno">
<description>
Converts errno.h error codes into GIO error codes.


</description>
<parameters>
<parameter name="err_no">
<parameter_description> Error number as defined in errno.h.
</parameter_description>
</parameter>
</parameters>
<return> #GIOErrorEnum value for the given errno.h error number.
</return>
</function>

<function name="g_file_mount_enclosing_volume">
<description>
Starts a @mount_operation, mounting the volume that contains the file @location. 

When this operation has completed, @callback will be called with
@user_user data, and the operation can be finalized with 
g_file_mount_enclosing_volume_finish().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

</description>
<parameters>
<parameter name="location">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_can_eject">
<description>
Checks if @mount can be eject.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @mount can be ejected.
</return>
</function>

<function name="g_file_get_uri_scheme">
<description>
Gets the URI scheme for a #GFile.
RFC 3986 decodes the scheme as:
&lt;programlisting&gt;
URI = scheme &quot;:&quot; hier-part [ &quot;?&quot; query ] [ &quot;#&quot; fragment ] 
&lt;/programlisting&gt;
Common schemes include &quot;file&quot;, &quot;http&quot;, &quot;ftp&quot;, etc. 

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the URI scheme for the given 
#GFile. The returned string should be freed with g_free() 
when no longer needed.
</return>
</function>

<function name="g_file_enumerate_children">
<description>
Gets the requested information about the files in a directory. The result
is a #GFileEnumerator object that will give out #GFileInfo objects for
all the files in the directory.

The @attribute value is a string that specifies the file attributes that
should be gathered. It is not an error if it's not possible to read a particular
requested attribute from a file - it just won't be set. @attribute should
be a comma-separated list of attribute or attribute wildcards. The wildcard &quot;*&quot;
means all attributes, and a wildcard like &quot;standard::*&quot; means all attributes in the standard
namespace. An example attribute query be &quot;standard::*,owner::user&quot;.
The standard attributes are available as defines, like #G_FILE_ATTRIBUTE_STANDARD_NAME.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
If the file is not a directory, the G_FILE_ERROR_NOTDIR error will be returned.
Other errors are possible too.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> A #GFileEnumerator if successful, %NULL on error. 
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_app_info_reset_type_associations">
<description>
Removes all changes to the type associations done by
g_app_info_set_as_default_for_type(), 
g_app_info_set_as_default_for_extension(), 
g_app_info_add_supports_type() of g_app_info_remove_supports_type().

Since: 2.20

</description>
<parameters>
<parameter name="content_type">
<parameter_description> a content type 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_output_stream_clear_pending">
<description>
Clears the pending flag on @stream.

</description>
<parameters>
<parameter name="stream">
<parameter_description> output stream
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_name">
<description>
Gets the name for a file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the file name.
</return>
</function>

<function name="g_mount_operation_get_anonymous">
<description>
Check to see whether the mount operation is being used 
for an anonymous user.


</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if mount operation is anonymous. 
</return>
</function>

<function name="g_socket_is_connected">
<description>
Check whether the socket is connected. This is only useful for
connection-oriented sockets.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if socket is connected, %FALSE otherwise.

Since: 2.22
</return>
</function>

<function name="g_socket_get_remote_address">
<description>
Try to get the remove address of a connected socket. This is only
useful for connection oriented sockets that have been connected.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddress or %NULL on error.

Since: 2.22
</return>
</function>

<function name="g_io_scheduler_job_send_to_mainloop">
<description>
Used from an I/O job to send a callback to be run in the 
main loop (main thread), waiting for the result (and thus 
blocking the I/O job).


</description>
<parameters>
<parameter name="job">
<parameter_description> a #GIOSchedulerJob
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GSourceFunc callback that will be called in the main thread
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> data to pass to @func
</parameter_description>
</parameter>
<parameter name="notify">
<parameter_description> a #GDestroyNotify for @user_data, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> The return value of @func
</return>
</function>

<function name="g_unix_mount_get_fs_type">
<description>
Gets the filesystem type for the unix mount.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMount.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the file system type.
</return>
</function>

<function name="g_data_input_stream_read_uint32">
<description>
Reads an unsigned 32-bit/4-byte value from @stream.

In order to get the correct byte order for this read operation, 
see g_data_stream_get_byte_order() and g_data_stream_set_byte_order().

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a given #GDataInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 32-bit/4-byte value read from the @stream or %0 if 
an error occurred. 
</return>
</function>

<function name="g_unix_input_stream_get_fd">
<description>
Return the UNIX file descriptor that the stream reads from.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GUnixInputStream
</parameter_description>
</parameter>
</parameters>
<return> The file descriptor of @stream

Since: 2.20
</return>
</function>

<function name="g_socket_client_get_family">
<description>
Gets the socket family of the socket client.

See g_socket_client_set_family() for details.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketFamily

Since: 2.22
</return>
</function>

<function name="g_volume_get_uuid">
<description>
Gets the UUID for the @volume. The reference is typically based on
the file system UUID for the volume in question and should be
considered an opaque string. Returns %NULL if there is no UUID
available.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> the UUID for @volume or %NULL if no UUID can be computed.
The returned string should be freed with g_free() 
when no longer needed.
</return>
</function>

<function name="g_file_attribute_matcher_unref">
<description>
Unreferences @matcher. If the reference count falls below 1, 
the @matcher is automatically freed.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_content_type_get_mime_type">
<description>
Gets the mime-type for the content type. If one is registered


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string. 
</parameter_description>
</parameter>
</parameters>
<return> the registered mime-type for the given @type, or NULL if unknown.
</return>
</function>

<function name="g_resolver_error_quark">
<description>
Gets the #GResolver Error Quark.


</description>
<parameters>
</parameters>
<return> a #GQuark.

Since: 2.22
</return>
</function>

<function name="g_input_stream_clear_pending">
<description>
Clears the pending flag on @stream.

</description>
<parameters>
<parameter name="stream">
<parameter_description> input stream
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_copy_finish">
<description>
Finishes copying the file started with 
g_file_copy_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a %TRUE on success, %FALSE on error.
</return>
</function>

<function name="g_file_open_readwrite_async">
<description>
Asynchronously opens @file for reading and writing.

For more details, see g_file_open_readwrite() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_open_readwrite_finish() to get the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_get_name">
<description>
Gets the name of @mount.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> the name for the given @mount. 
The returned string should be freed with g_free()
when no longer needed.
</return>
</function>

<function name="g_file_info_set_attribute_boolean">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a boolean value.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_set_name">
<description>
Sets the name attribute for the current #GFileInfo. 
See %G_FILE_ATTRIBUTE_STANDARD_NAME.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="name">
<parameter_description> a string containing a name.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_app_info_should_show">
<description>
Checks if the application info should be shown in menus that 
list available applications.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @appinfo should be shown, %FALSE otherwise.
</return>
</function>

<function name="g_inet_address_new_loopback">
<description>
Creates a #GInetAddress for the loopback address for @family.


</description>
<parameters>
<parameter name="family">
<parameter_description> the address family
</parameter_description>
</parameter>
</parameters>
<return> a new #GInetAddress corresponding to the loopback address
for @family.

Since: 2.22
</return>
</function>

<function name="g_file_attribute_matcher_matches">
<description>
Checks if an attribute will be matched by an attribute matcher. If 
the matcher was created with the &quot;*&quot; matching string, this function
will always return %TRUE.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @attribute matches @matcher. %FALSE otherwise.
</return>
</function>

<function name="g_app_info_get_all">
<description>
Gets a list of all of the applications currently registered 
on this system.

For desktop files, this includes applications that have 
&lt;literal&gt;NoDisplay=true&lt;/literal&gt; set or are excluded from 
display by means of &lt;literal&gt;OnlyShowIn&lt;/literal&gt; or
&lt;literal&gt;NotShowIn&lt;/literal&gt;. See g_app_info_should_show().
The returned list does not include applications which have
the &lt;literal&gt;Hidden&lt;/literal&gt; key set. 


</description>
<parameters>
</parameters>
<return> a newly allocated #GList of references to #GAppInfo&lt;!----&gt;s.
</return>
</function>

<function name="g_socket_send">
<description>
Tries to send @size bytes from @buffer on the socket. This is mainly used by
connection oriented sockets, it is identical to g_socket_send_to()
with @address set to %NULL.

If the socket is in blocking mode the call will block until there is
space for the data in the socket queue. If there is no space available
and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
will be returned. To be notified of available space, wait for the %G_IO_OUT
condition.

Note that on Windows you can't rely on a %G_IO_OUT condition
not producing a %G_IO_ERROR_WOULD_BLOCK error, as this is how Winsock
write notification works. However, robust apps should always be able to
handle this since it can easily appear in other cases too.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the buffer containing the data to send.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> the number of bytes to send
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes read, or -1 on error

Since: 2.22
</return>
</function>

<function name="g_resolver_lookup_service_finish">
<description>
Retrieves the result of a previous call to
g_resolver_lookup_service_async().

If the DNS resolution failed, @error (if non-%NULL) will be set to
a value from #GResolverError. If the operation was cancelled,
@error will be set to %G_IO_ERROR_CANCELLED.


</description>
<parameters>
<parameter name="resolver">
<parameter_description> a #GResolver
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> the result passed to your #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> return location for a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GList of #GSrvTarget, or %NULL on error. See
g_resolver_lookup_service() for more details.

Since: 2.22
</return>
</function>

<function name="g_volume_get_drive">
<description>
Gets the drive for the @volume.


</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume.
</parameter_description>
</parameter>
</parameters>
<return> a #GDrive or %NULL if @volume is not associated with a drive.
The returned object should be unreffed with g_object_unref()
when no longer needed.
</return>
</function>

<function name="g_desktop_app_info_lookup_get_default_for_uri_scheme">
<description>
Gets the default application for launching applications 
using this URI scheme for a particular GDesktopAppInfoLookup
implementation.

The GDesktopAppInfoLookup interface and this function is used
to implement g_app_info_get_default_for_uri_scheme() backends
in a GIO module. There is no reason for applications to use it
directly. Applications should use g_app_info_get_default_for_uri_scheme().


</description>
<parameters>
<parameter name="lookup">
<parameter_description> a #GDesktopAppInfoLookup
</parameter_description>
</parameter>
<parameter name="uri_scheme">
<parameter_description> a string containing a URI scheme.
</parameter_description>
</parameter>
</parameters>
<return> #GAppInfo for given @uri_scheme or %NULL on error.
</return>
</function>

<function name="g_file_info_set_attribute_int32">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> a signed 32-bit integer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_open_readwrite_finish">
<description>
Finishes an asynchronous file read operation started with
g_file_open_readwrite_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileIOStream or %NULL on error.
Free the returned object with g_object_unref().

Since: 2.22
</return>
</function>

<function name="g_buffered_output_stream_get_auto_grow">
<description>
Checks if the buffer automatically grows as data is added.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @stream's buffer automatically grows,
%FALSE otherwise.
</return>
</function>

<function name="g_memory_output_stream_get_data">
<description>
Gets any loaded data from the @ostream. 

Note that the returned pointer may become invalid on the next 
write or truncate operation on the stream. 


</description>
<parameters>
<parameter name="ostream">
<parameter_description> a #GMemoryOutputStream
</parameter_description>
</parameter>
</parameters>
<return> pointer to the stream's data
</return>
</function>

<function name="_g_winhttp_file_new">
<description>

</description>
<parameters>
<parameter name="vfs">
<parameter_description> GWinHttpVfs to use
</parameter_description>
</parameter>
<parameter name="uri">
<parameter_description> URI of the GWinHttpFile to create.
</parameter_description>
</parameter>
</parameters>
<return> new winhttp #GFile.
</return>
</function>

<function name="g_socket_new">
<description>
Creates a new #GSocket with the defined family, type and protocol.
If @protocol is %NULL the default protocol type for the family and
type is used.

The @protocol is a family and type specific int that specifies what
kind of protocol to use. Many families only support one protocol,
and use 0 for this, others support several and using 0 means
to use the default protocol for the family and type. To use
other protocol, you can use g_socket_protocol_id_lookup_by_name()
to look up the protocol by name, or if you known the system specific
protocol id you can use that.


</description>
<parameters>
<parameter name="family">
<parameter_description> the socket family to use, e.g. %G_SOCKET_FAMILY_IPV4.
</parameter_description>
</parameter>
<parameter name="type">
<parameter_description> the socket type to use.
</parameter_description>
</parameter>
<parameter name="protocol_id">
<parameter_description> the id of the protocol to use, or 0 for default.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocket or %NULL on error.
Free the returned object with g_object_unref().

Since: 2.22
</return>
</function>

<function name="g_file_get_basename">
<description>
Gets the base name (the last component of the path) for a given #GFile.

If called for the top level of a system (such as the filesystem root
or a uri like sftp://host/) it will return a single directory separator
(and on Windows, possibly a drive letter).

The base name is a byte string (*not* UTF-8). It has no defined encoding
or rules other than it may not contain zero bytes.  If you want to use
filenames in a user interface you should use the display name that you
can get by requesting the %G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME
attribute with g_file_query_info().

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> string containing the #GFile's base name, or %NULL 
if given #GFile is invalid. The returned string should be 
freed with g_free() when no longer needed.
</return>
</function>

<function name="g_volume_monitor_get_mount_for_uuid">
<description>
Finds a #GMount object by its UUID (see g_mount_get_uuid())


</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
<parameter name="uuid">
<parameter_description> the UUID to look for
</parameter_description>
</parameter>
</parameters>
<return> a #GMount or %NULL if no such mount is available.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_attribute_matcher_enumerate_next">
<description>
Gets the next matched attribute from a #GFileAttributeMatcher.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the next attribute or %NULL if 
no more attribute exist.
</return>
</function>

<function name="g_file_info_get_attribute_int64">
<description>
Gets a signed 64-bit integer contained within the attribute. If the 
attribute does not contain an signed 64-bit integer, or is invalid, 
0 will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a signed 64-bit integer from the attribute. 
</return>
</function>

<function name="g_icon_to_string">
<description>
Generates a textual representation of @icon that can be used for
serialization such as when passing @icon to a different process or
saving it to persistent storage. Use g_icon_new_for_string() to
get @icon back from the returned string.

The encoding of the returned string is proprietary to #GIcon except
in the following two cases

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;
If @icon is a #GFileIcon, the returned string is a native path
(such as &lt;literal&gt;/path/to/my icon.png&lt;/literal&gt;) without escaping
if the #GFile for @icon is a native file.  If the file is not
native, the returned string is the result of g_file_get_uri()
(such as &lt;literal&gt;sftp://path/to/my%%20icon.png&lt;/literal&gt;).
&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;
If @icon is a #GThemedIcon with exactly one name, the encoding is
simply the name (such as &lt;literal&gt;network-server&lt;/literal&gt;).
&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;


</description>
<parameters>
<parameter name="icon">
<parameter_description> a #GIcon.
</parameter_description>
</parameter>
</parameters>
<return> An allocated NUL-terminated UTF8 string or %NULL if @icon can't
be serialized. Use g_free() to free.

Since: 2.20
</return>
</function>

<function name="g_file_mount_mountable">
<description>
Mounts a file of type G_FILE_TYPE_MOUNTABLE.
Using @mount_operation, you can request callbacks when, for instance, 
passwords are needed during authentication.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.

When the operation is finished, @callback will be called. You can then call
g_file_mount_mountable_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> flags affecting the operation
</parameter_description>
</parameter>
<parameter name="mount_operation">
<parameter_description> a #GMountOperation, or %NULL to avoid user interaction.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied, or %NULL.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_volume_monitor_adopt_orphan_mount">
<description>
This function should be called by any #GVolumeMonitor
implementation when a new #GMount object is created that is not
associated with a #GVolume object. It must be called just before
emitting the @mount_added signal.

If the return value is not %NULL, the caller must associate the
returned #GVolume object with the #GMount. This involves returning
it in its g_mount_get_volume() implementation. The caller must
also listen for the &quot;removed&quot; signal on the returned object
and give up its reference when handling that signal

Similary, if implementing g_volume_monitor_adopt_orphan_mount(),
the implementor must take a reference to @mount and return it in
its g_volume_get_mount() implemented. Also, the implementor must
listen for the &quot;unmounted&quot; signal on @mount and give up its
reference upon handling that signal.

There are two main use cases for this function.

One is when implementing a user space file system driver that reads
blocks of a block device that is already represented by the native
volume monitor (for example a CD Audio file system driver). Such
a driver will generate its own #GMount object that needs to be
assoicated with the #GVolume object that represents the volume.

The other is for implementing a #GVolumeMonitor whose sole purpose
is to return #GVolume objects representing entries in the users
&quot;favorite servers&quot; list or similar.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount object to find a parent for
</parameter_description>
</parameter>
</parameters>
<return> the #GVolume object that is the parent for @mount or %NULL
if no wants to adopt the #GMount.

Deprecated: 2.20: Instead of using this function, #GVolumeMonitor
implementations should instead create shadow mounts with the URI of
the mount they intend to adopt. See the proxy volume monitor in
gvfs for an example of this. Also see g_mount_is_shadowed(),
g_mount_shadow() and g_mount_unshadow() functions.
</return>
</function>

<function name="g_file_enumerator_close">
<description>
Releases all resources used by this enumerator, making the
enumerator return %G_IO_ERROR_CLOSED on all calls.

This will be automatically called when the last reference
is dropped, but you might want to call this function to make 
sure resources are released as early as possible.


</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> #TRUE on success or #FALSE on error.
</return>
</function>

<function name="g_socket_connect">
<description>
Connect the socket to the specified remote address.

For connection oriented socket this generally means we attempt to make
a connection to the @address. For a connection-less socket it sets
the default address for g_socket_send() and discards all incoming datagrams
from other sources.

Generally connection oriented sockets can only connect once, but connection-less
sockets can connect multiple times to change the default address.

If the connect call needs to do network I/O it will block, unless
non-blocking I/O is enabled. Then %G_IO_ERROR_PENDING is returned
and the user can be notified of the connection finishing by waiting
for the G_IO_OUT condition. The result of the connection can then be
checked with g_socket_check_pending_error().


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a #GSocketAddress specifying the remote address.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if connected, %FALSE on error.

Since: 2.22
</return>
</function>

<function name="g_file_io_stream_query_info_async">
<description>
Asynchronously queries the @stream for a #GFileInfo. When completed,
@callback will be called with a #GAsyncResult which can be used to
finish the operation with g_file_io_stream_query_info_finish().

For the synchronous version of this function, see
g_file_io_stream_query_info().

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileIOStream.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> a file attribute query string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;gio-GIOScheduler&quot;&gt;I/O priority&lt;/link&gt;
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_icon_equal">
<description>
Checks if two icons are equal.


</description>
<parameters>
<parameter name="icon1">
<parameter_description> pointer to the first #GIcon.
</parameter_description>
</parameter>
<parameter name="icon2">
<parameter_description> pointer to the second #GIcon.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @icon1 is equal to @icon2. %FALSE otherwise.
</return>
</function>

<function name="g_volume_should_automount">
<description>
Returns: %TRUE if the volume should be automatically mounted.

</description>
<parameters>
<parameter name="volume">
<parameter_description> a #GVolume
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the volume should be automatically mounted.
</return>
</function>

<function name="g_seekable_tell">
<description>
Tells the current position within the stream.


</description>
<parameters>
<parameter name="seekable">
<parameter_description> a #GSeekable.
</parameter_description>
</parameter>
</parameters>
<return> the offset from the beginning of the buffer.
</return>
</function>

<function name="g_file_set_attributes_from_info">
<description>
Tries to set all attributes in the #GFileInfo on the target values, 
not stopping on the first error.

If there is any error during this operation then @error will be set to
the first error. Error on particular fields are flagged by setting 
the &quot;status&quot; field in the attribute value to 
%G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING, which means you can also detect
further errors.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFileQueryInfoFlags
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if there was any error, %FALSE otherwise.
</return>
</function>

<function name="g_simple_async_result_new_error">
<description>
Creates a new #GSimpleAsyncResult with a set error.


</description>
<parameters>
<parameter name="source_object">
<parameter_description> a #GObject, or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback. 
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a #GQuark.
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> an error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a string with format characters.
</parameter_description>
</parameter>
<parameter name="Varargs">
<parameter_description> a list of values to insert into @format.
</parameter_description>
</parameter>
</parameters>
<return> a #GSimpleAsyncResult.
</return>
</function>

<function name="g_socket_listener_add_inet_port">
<description>
Helper function for g_socket_listener_add_address() that
creates a TCP/IP socket listening on IPv4 and IPv6 (if
supported) on the specified port on all interfaces.

@source_object will be passed out in the various calls
to accept to identify this particular source, which is
useful if you're listening on multiple addresses and do
different things depending on what address is connected to.


</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="port">
<parameter_description> an ip port number
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> Optional #GObject identifying this source
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on error.

Since: 2.22
</return>
</function>

<function name="g_unix_mount_get_mount_path">
<description>
Gets the mount path for a unix mount.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> input #GUnixMountEntry to get the mount path for.
</parameter_description>
</parameter>
</parameters>
<return> the mount path for @mount_entry.
</return>
</function>

<function name="g_socket_listener_accept_socket_finish">
<description>
Finishes an async accept operation. See g_socket_listener_accept_socket_async()


</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> Optional #GObject identifying this source
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocket on success, %NULL on error.

Since: 2.22
</return>
</function>

<function name="g_app_info_get_all_for_type">
<description>
Gets a list of all #GAppInfo s for a given content type.


</description>
<parameters>
<parameter name="content_type">
<parameter_description> the content type to find a #GAppInfo for
</parameter_description>
</parameter>
</parameters>
<return> #GList of #GAppInfo s for given @content_type
or %NULL on error.
</return>
</function>

<function name="g_socket_get_socket_type">
<description>
Gets the socket type of the socket.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketType

Since: 2.22
</return>
</function>

<function name="g_socket_client_connect_to_host">
<description>
This is a helper function for g_socket_client_connect().

Attempts to create a TCP connection to the named host.

@host_and_port may be in any of a number of recognised formats: an IPv6
address, an IPv4 address, or a domain name (in which case a DNS
lookup is performed).  Quoting with [] is supported for all address
types.  A port override may be specified in the usual way with a
colon.  Ports may be given as decimal numbers or symbolic names (in
which case an /etc/services lookup is performed).

If no port override is given in @host_and_port then @default_port will be
used as the port number to connect to.

In general, @host_and_port is expected to be provided by the user (allowing
them to give the hostname, and a port overide if necessary) and
@default_port is expected to be provided by the application.

In the case that an IP address is given, a single connection
attempt is made.  In the case that a name is given, multiple
connection attempts may be made, in turn and according to the
number of address records in DNS, until a connection succeeds.

Upon a successful connection, a new #GSocketConnection is constructed
and returned.  The caller owns this new object and must drop their
reference to it when finished with it.

In the event of any failure (DNS error, service not found, no hosts
connectable) %NULL is returned and @error (if non-%NULL) is set
accordingly.

 Returns: a #GSocketConnection on success, %NULL on error.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GTcpClient
</parameter_description>
</parameter>
<parameter name="host_and_port">
<parameter_description> the name and optionally port of the host to connect to
</parameter_description>
</parameter>
<parameter name="default_port">
<parameter_description> the default port to connect to
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a pointer to a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection if successful, or %NULL on error
</return>
</function>

<function name="g_file_info_set_attribute_uint64">
<description>
Sets the @attribute to contain the given @attr_value, 
if possible.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
<parameter name="attr_value">
<parameter_description> an unsigned 64-bit integer.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_inet_address_new_from_bytes">
<description>
Creates a new #GInetAddress from the given @family and @bytes.
@bytes should be 4 bytes for %G_INET_ADDRESS_IPV4 and 16 bytes for
%G_INET_ADDRESS_IPV6.


</description>
<parameters>
<parameter name="bytes">
<parameter_description> raw address data
</parameter_description>
</parameter>
<parameter name="family">
<parameter_description> the address family of @bytes
</parameter_description>
</parameter>
</parameters>
<return> a new #GInetAddress corresponding to @family and @bytes.

Since: 2.22
</return>
</function>

<function name="g_unix_mount_points_get">
<description>
Gets a #GList of strings containing the unix mount points. 
If @time_read is set, it will be filled with the mount timestamp,
allowing for checking if the mounts have changed with 
g_unix_mounts_points_changed_since().


</description>
<parameters>
<parameter name="time_read">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return> a #GList of the UNIX mountpoints. 
</return>
</function>

<function name="g_file_attribute_info_list_unref">
<description>
Removes a reference from the given @list. If the reference count
falls to zero, the @list is deleted.

</description>
<parameters>
<parameter name="list">
<parameter_description> The #GFileAttributeInfoList to unreference.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_cancellable_cancel">
<description>
Will set @cancellable to cancelled, and will emit the
#GCancellable::cancelled signal. (However, see the warning about
race conditions in the documentation for that signal if you are
planning to connect to it.)

This function is thread-safe. In other words, you can safely call
it from a thread other than the one running the operation that was
passed the @cancellable.

The convention within gio is that cancelling an asynchronous
operation causes it to complete asynchronously. That is, if you
cancel the operation from the same thread in which it is running,
then the operation's #GAsyncReadyCallback will not be invoked until
the application returns to the main loop.

</description>
<parameters>
<parameter name="cancellable">
<parameter_description> a #GCancellable object.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_guess_content_type_sync">
<description>
Tries to guess the type of content stored on @mount. Returns one or
more textual identifiers of well-known content types (typically
prefixed with &quot;x-content/&quot;), e.g. x-content/image-dcf for camera 
memory cards. See the &lt;ulink url=&quot;http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec&quot;&gt;shared-mime-info&lt;/ulink&gt;
specification for more on x-content types.

This is an synchronous operation and as such may block doing IO;
see g_mount_guess_content_type() for the asynchronous version.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount
</parameter_description>
</parameter>
<parameter name="force_rescan">
<parameter_description> Whether to force a rescan of the content.
Otherwise a cached result will be used if available
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of content types or %NULL on error.
Caller should free this array with g_strfreev() when done with it.

Since: 2.18
</return>
</function>

<function name="g_async_initable_init_finish">
<description>
Finishes asynchronous initialization and returns the result.
See g_async_initable_init_async().


</description>
<parameters>
<parameter name="initable">
<parameter_description> a #GAsyncInitable.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if successful. If an error
has occurred, this function will return %FALSE and set @error
appropriately if present.

Since: 2.22
</return>
</function>

<function name="g_input_stream_skip_async">
<description>
Request an asynchronous skip of @count bytes from the stream.
When the operation is finished @callback will be called. 
You can then call g_input_stream_skip_finish() to get the result of the 
operation.

During an async request no other sync and async calls are allowed, and will
result in %G_IO_ERROR_PENDING errors. 

A value of @count larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes skipped will be passed to the
callback. It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file, but generally we try to skip
as many bytes as requested. Zero is returned on end of file
(or if @count is zero), but never otherwise.

Any outstanding i/o request with higher priority (lower numerical value) will
be executed before an outstanding request with lower priority. Default
priority is %G_PRIORITY_DEFAULT.

The asyncronous methods have a default fallback that uses threads to implement
asynchronicity, so they are optional for inheriting classes. However, if you
override one you must override all.

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GInputStream.
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be skipped from the stream
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_mount_guess_content_type_finish">
<description>
Finishes guessing content types of @mount. If any errors occured
during the operation, @error will be set to contain the errors and
%FALSE will be returned. In particular, you may get an 
%G_IO_ERROR_NOT_SUPPORTED if the mount does not support content 
guessing.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore
</parameter_description>
</parameter>
</parameters>
<return> a %NULL-terminated array of content types or %NULL on error. 
Caller should free this array with g_strfreev() when done with it.

Since: 2.18
</return>
</function>

<function name="g_file_new_for_path">
<description>
Constructs a #GFile for a given path. This operation never
fails, but the returned object might not support any I/O
operation if @path is malformed.


</description>
<parameters>
<parameter name="path">
<parameter_description> a string containing a relative or absolute path.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFile for the given @path. 
</return>
</function>

<function name="g_file_copy_attributes">
<description>
Copies the file attributes from @source to @destination. 

Normally only a subset of the file attributes are copied,
those that are copies in a normal file copy operation
(which for instance does not include e.g. owner). However
if #G_FILE_COPY_ALL_METADATA is specified in @flags, then
all the metadata that is possible to copy is copied. This
is useful when implementing move by copy + delete source.


</description>
<parameters>
<parameter name="source">
<parameter_description> a #GFile with attributes.
</parameter_description>
</parameter>
<parameter name="destination">
<parameter_description> a #GFile to copy attributes to.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileCopyFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the attributes were copied successfully, %FALSE otherwise.
</return>
</function>

<function name="g_file_query_exists">
<description>
Utility function to check if a particular file exists. This is
implemented using g_file_query_info() and as such does blocking I/O.

Note that in many cases it is racy to first check for file existence
and then execute something based on the outcome of that, because the
file might have been created or removed in between the operations. The
general approach to handling that is to not check, but just do the
operation and handle the errors as they come.

As an example of race-free checking, take the case of reading a file, and
if it doesn't exist, creating it. There are two racy versions: read it, and
on error create it; and: check if it exists, if not create it. These
can both result in two processes creating the file (with perhaps a partially
written file as the result). The correct approach is to always try to create
the file with g_file_create() which will either atomically create the file
or fail with a G_IO_ERROR_EXISTS error.

However, in many cases an existence check is useful in a user
interface, for instance to make a menu item sensitive/insensitive, so that
you don't have to fool users that something is possible and then just show
and error dialog. If you do this, you should make sure to also handle the
errors that can happen due to races when you execute the operation.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the file exists (and can be detected without error), %FALSE otherwise (or if cancelled).
</return>
</function>

<function name="g_inet_address_get_is_any">
<description>
Tests whether @address is the &quot;any&quot; address for its family.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is the &quot;any&quot; address for its family.

Since: 2.22
</return>
</function>

<function name="g_file_input_stream_query_info_finish">
<description>
Finishes an asynchronous info query operation.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, 
or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> #GFileInfo. 
</return>
</function>

<function name="g_unix_input_stream_set_close_fd">
<description>
Sets whether the file descriptor of @stream shall be closed
when the stream is closed.

Since: 2.20

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GUnixInputStream
</parameter_description>
</parameter>
<parameter name="close_fd">
<parameter_description> %TRUE to close the file descriptor when done
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_extension_ref_class">
<description>
Gets a reference to the class for the type that is 
associated with @extension.


</description>
<parameters>
<parameter name="extension">
<parameter_description> a #GIOExtension
</parameter_description>
</parameter>
</parameters>
<return> the #GTypeClass for the type of @extension
</return>
</function>

<function name="g_app_info_get_default_for_type">
<description>
Gets the #GAppInfo that correspond to a given content type.


</description>
<parameters>
<parameter name="content_type">
<parameter_description> the content type to find a #GAppInfo for
</parameter_description>
</parameter>
<parameter name="must_support_uris">
<parameter_description> if %TRUE, the #GAppInfo is expected to
support URIs
</parameter_description>
</parameter>
</parameters>
<return> #GAppInfo for given @content_type or %NULL on error.
</return>
</function>

<function name="g_file_query_filesystem_info">
<description>
Similar to g_file_query_info(), but obtains information
about the filesystem the @file is on, rather than the file itself.
For instance the amount of space available and the type of
the filesystem.

The @attribute value is a string that specifies the file attributes that
should be gathered. It is not an error if it's not possible to read a particular
requested attribute from a file - it just won't be set. @attribute should
be a comma-separated list of attribute or attribute wildcards. The wildcard &quot;*&quot;
means all attributes, and a wildcard like &quot;fs:*&quot; means all attributes in the fs
namespace. The standard namespace for filesystem attributes is &quot;fs&quot;.
Common attributes of interest are #G_FILE_ATTRIBUTE_FILESYSTEM_SIZE
(the total size of the filesystem in bytes), #G_FILE_ATTRIBUTE_FILESYSTEM_FREE (number of
bytes available), and #G_FILE_ATTRIBUTE_FILESYSTEM_TYPE (type of the filesystem).

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description>  an attribute query string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError. 
</parameter_description>
</parameter>
</parameters>
<return> a #GFileInfo or %NULL if there was an error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_socket_control_message_serialize">
<description>
Converts the data in the message to bytes placed in the
message.

@data is guaranteed to have enough space to fit the size
returned by g_socket_control_message_get_size() on this
object.

Since: 2.22

</description>
<parameters>
<parameter name="message">
<parameter_description> a #GSocketControlMessage
</parameter_description>
</parameter>
<parameter name="data">
<parameter_description> A buffer to write data to
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_set_attribute_string">
<description>
Sets @attribute of type %G_FILE_ATTRIBUTE_TYPE_STRING to @value. 
If @attribute is of a different type, this operation will fail.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a string containing the attribute's name.
</parameter_description>
</parameter>
<parameter name="value">
<parameter_description> a string containing the attribute's value.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> #GFileQueryInfoFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the @attribute was successfully set, %FALSE otherwise.
</return>
</function>

<function name="g_socket_listener_accept_finish">
<description>
Sets the listen backlog on the sockets in the listener.

See g_socket_set_listen_backlog() for details

Since: 2.22

</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="listen_backlog">
<parameter_description> an integer
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_symlink_target">
<description>
Gets the symlink target for a given #GFileInfo.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the symlink target.
</return>
</function>

<function name="g_unix_mount_guess_name">
<description>
Guesses the name of a Unix mount. 
The result is a translated string.


</description>
<parameters>
<parameter name="mount_entry">
<parameter_description> a #GUnixMountEntry
</parameter_description>
</parameter>
</parameters>
<return> A newly allocated string that must
be freed with g_free()
</return>
</function>

<function name="g_simple_async_result_run_in_thread">
<description>
Runs the asynchronous job in a separated thread.

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="func">
<parameter_description> a #GSimpleAsyncThreadFunc.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_load_partial_contents_finish">
<description>
Finishes an asynchronous partial load operation that was started
with g_file_load_partial_contents_async(). The data is always 
zero-terminated, but this is not included in the resultant @length.
The returned @content should be freed with g_free() when no longer
needed.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> a location to place the contents of the file.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a location to place the length of the contents of the file,
or %NULL if the length is not needed
</parameter_description>
</parameter>
<parameter name="etag_out">
<parameter_description> a location to place the current entity tag for the file,
or %NULL if the entity tag is not needed
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the load was successful. If %FALSE and @error is 
present, it will be set appropriately. 
</return>
</function>

<function name="g_output_stream_write">
<description>
Tries to write @count bytes from @buffer into the stream. Will block
during the operation.

If count is zero returns zero and does nothing. A value of @count
larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes written to the stream is returned.
It is not an error if this is not the same as the requested size, as it
can happen e.g. on a partial i/o error, or if there is not enough
storage in the stream. All writes either block until at least one byte
is written, so zero is never returned (unless @count is zero).

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error G_IO_ERROR_CANCELLED will be returned. If an
operation was partially finished when the operation was cancelled the
partial result will be returned, without an error.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the buffer containing the data to write. 
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes to write
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes written, or -1 on error
</return>
</function>

<function name="g_output_stream_write_all">
<description>
Tries to write @count bytes from @buffer into the stream. Will block
during the operation.

This function is similar to g_output_stream_write(), except it tries to
write as many bytes as requested, only stopping on an error.

On a successful write of @count bytes, %TRUE is returned, and @bytes_written
is set to @count.

If there is an error during the operation FALSE is returned and @error
is set to indicate the error status, @bytes_written is updated to contain
the number of bytes written into the stream before the error occurred.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> the buffer containing the data to write. 
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes to write
</parameter_description>
</parameter>
<parameter name="bytes_written">
<parameter_description> location to store the number of bytes that was 
written to the stream
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE if there was an error
</return>
</function>

<function name="g_file_get_path">
<description>
Gets the local pathname for #GFile, if one exists. 

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> string containing the #GFile's path, or %NULL if 
no such path exists. The returned string should be 
freed with g_free() when no longer needed.
</return>
</function>

<function name="g_file_monitor_file">
<description>
Obtains a file monitor for the given file. If no file notification
mechanism exists, then regular polling of the file is used.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileMonitorFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileMonitor for the given @file, or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_async_initable_new_finish">
<description>
Finishes the async construction for the various g_async_initable_new calls,
returning the created object or %NULL on error.


</description>
<parameters>
<parameter name="initable">
<parameter_description> the #GAsyncInitable from the callback
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> the #GAsyncResult.from the callback
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a newly created #GObject, or %NULL on error. Free with g_object_unref().

Since: 2.22
</return>
</function>

<function name="g_file_output_stream_get_etag">
<description>
Gets the entity tag for the file when it has been written.
This must be called after the stream has been written
and closed, as the etag can change while writing.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GFileOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> the entity tag for the stream.
</return>
</function>

<function name="g_file_move">
<description>

Tries to move the file or directory @source to the location specified by @destination.
If native move operations are supported then this is used, otherwise a copy + delete
fallback is used. The native implementation may support moving directories (for instance
on moves inside the same filesystem), but the fallback code does not.

If the flag #G_FILE_COPY_OVERWRITE is specified an already
existing @destination file is overwritten.

If the flag #G_FILE_COPY_NOFOLLOW_SYMLINKS is specified then symlinks
will be copied as symlinks, otherwise the target of the
@source symlink will be copied.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If @progress_callback is not %NULL, then the operation can be monitored by
setting this to a #GFileProgressCallback function. @progress_callback_data
will be passed to this function. It is guaranteed that this callback will
be called after all data has been transferred with the total number of bytes
copied during the operation.

If the @source file does not exist then the G_IO_ERROR_NOT_FOUND
error is returned, independent on the status of the @destination.

If #G_FILE_COPY_OVERWRITE is not specified and the target exists, then the
error G_IO_ERROR_EXISTS is returned.

If trying to overwrite a file over a directory the G_IO_ERROR_IS_DIRECTORY
error is returned. If trying to overwrite a directory with a directory the
G_IO_ERROR_WOULD_MERGE error is returned.

If the source is a directory and the target does not exist, or #G_FILE_COPY_OVERWRITE is
specified and the target is a file, then the G_IO_ERROR_WOULD_RECURSE error
may be returned (if the native move operation isn't available).


</description>
<parameters>
<parameter name="source">
<parameter_description> #GFile pointing to the source location.
</parameter_description>
</parameter>
<parameter name="destination">
<parameter_description> #GFile pointing to the destination location.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> set of #GFileCopyFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="progress_callback">
<parameter_description> #GFileProgressCallback function for updates.
</parameter_description>
</parameter>
<parameter name="progress_callback_data">
<parameter_description> gpointer to user data for the callback function.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for returning error conditions, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on successful move, %FALSE otherwise.
</return>
</function>

<function name="g_socket_connection_get_local_address">
<description>
Try to get the local address of a socket connection.


</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GSocketConnection.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddress or %NULL on error.

Since: 2.22
</return>
</function>

<function name="g_inet_address_get_is_mc_link_local">
<description>
Tests whether @address is a link-local multicast address.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a link-local multicast address.

Since: 2.22
</return>
</function>

<function name="g_buffered_output_stream_new">
<description>
Creates a new buffered output stream for a base stream.


</description>
<parameters>
<parameter name="base_stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> a #GOutputStream for the given @base_stream.
</return>
</function>

<function name="g_file_info_get_edit_name">
<description>
Gets the edit name for a file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the edit name.
</return>
</function>

<function name="_g_mount_get_for_mount_path">
<description>

</description>
<parameters>
<parameter name="mountpoint">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GMount for given @mount_path or %NULL.  
</return>
</function>

<function name="g_file_enumerator_close_async">
<description>
Asynchronously closes the file enumerator. 

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned in 
g_file_enumerator_close_finish(). 

</description>
<parameters>
<parameter name="enumerator">
<parameter_description> a #GFileEnumerator.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_filename_completer_get_completion_suffix">
<description>
Obtains a completion for @initial_text from @completer.


</description>
<parameters>
<parameter name="completer">
<parameter_description> the filename completer.
</parameter_description>
</parameter>
<parameter name="initial_text">
<parameter_description> text to be completed.
</parameter_description>
</parameter>
</parameters>
<return> a completed string, or %NULL if no completion exists. 
This string is not owned by GIO, so remember to g_free() it 
when finished.
</return>
</function>

<function name="g_output_stream_splice">
<description>
Splices an input stream into an output stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GOutputStream.
</parameter_description>
</parameter>
<parameter name="source">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GOutputStreamSpliceFlags.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #gssize containing the size of the data spliced.
</return>
</function>

<function name="g_file_read">
<description>
Opens a file for reading. The result is a #GFileInputStream that
can be used to read the contents of the file.

If @cancellable is not %NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. 

If the file does not exist, the G_IO_ERROR_NOT_FOUND error will be returned.
If the file is a directory, the G_IO_ERROR_IS_DIRECTORY error will be returned.
Other errors are possible too, and depend on what kind of filesystem the file is on.


</description>
<parameters>
<parameter name="file">
<parameter_description> #GFile to read.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> #GFileInputStream or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_app_info_dup">
<description>
Creates a duplicate of a #GAppInfo.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> a duplicate of @appinfo.
</return>
</function>

<function name="g_socket_receive_message">
<description>
Receive data from a socket.  This is the most complicated and
fully-featured version of this call. For easier use, see
g_socket_receive() and g_socket_receive_from().

If @address is non-%NULL then @address will be set equal to the
source address of the received packet.
@address is owned by the caller.

@vector must point to an array of #GInputVector structs and
@num_vectors must be the length of this array.  These structs
describe the buffers that received data will be scattered into.
If @num_vector is -1, then @vector is assumed to be terminated
by a #GInputVector with a %NULL buffer pointer.

As a special case, if the size of the array is zero (in which case,
@vectors may of course be %NULL), then a single byte is received
and discarded.  This is to facilitate the common practice of
sending a single '\0' byte for the purposes of transferring
ancillary data.

@messages, if non-%NULL, is taken to point to a pointer that will
be set to point to a newly-allocated array of
#GSocketControlMessage instances.  These correspond to the control
messages received from the kernel, one #GSocketControlMessage per
message from the kernel.  This array is %NULL-terminated and must be
freed by the caller using g_free().

@num_messages, if non-%NULL, will be set to the number of control
messages received.

If both @messages and @num_messages are non-%NULL, then
@num_messages gives the number of #GSocketControlMessage instances
in @messages (ie: not including the %NULL terminator).

@flags is an in/out parameter. The commonly available arguments
for this is available in the #GSocketMsgFlags enum, but the
values there are the same as the system values, and the flags
are passed in as-is, so you can pass in system specific flags too.

If the socket is in blocking mode the call will block until there is
some data to receive or there is an error. If there is no data available
and the socket is in non-blocking mode a %G_IO_ERROR_WOULD_BLOCK error
will be returned. To be notified of available data, wait for the %G_IO_IN
condition.

On error -1 is returned and @error is set accordingly.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket
</parameter_description>
</parameter>
<parameter name="address">
<parameter_description> a pointer to a #GSocketAddress pointer, or %NULL
</parameter_description>
</parameter>
<parameter name="vectors">
<parameter_description> an array of #GInputVector structs
</parameter_description>
</parameter>
<parameter name="num_vectors">
<parameter_description> the number of elements in @vectors, or -1
</parameter_description>
</parameter>
<parameter name="messages">
<parameter_description> a pointer which will be filled with an array of
#GSocketControlMessages, or %NULL
</parameter_description>
</parameter>
<parameter name="num_messages">
<parameter_description> a pointer which will be filled with the number of
elements in @messages, or %NULL
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a pointer to an int containing #GSocketMsgFlags flags
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError pointer, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> Number of bytes read, or -1 on error

Since: 2.22
</return>
</function>

<function name="g_srv_target_copy">
<description>
Copies @target


</description>
<parameters>
<parameter name="target">
<parameter_description> a #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return> a copy of @target

Since: 2.22
</return>
</function>

<function name="g_inet_address_get_is_mc_site_local">
<description>
Tests whether @address is a site-local multicast address.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is a site-local multicast address.

Since: 2.22
</return>
</function>

<function name="g_simple_async_result_propagate_error">
<description>
Propagates an error from within the simple asynchronous result to
a given destination.


</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="dest">
<parameter_description> a location to propegate the error to.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the error was propegated to @dest. %FALSE otherwise.
</return>
</function>

<function name="g_file_replace_readwrite_finish">
<description>
Finishes an asynchronous file replace operation started with
g_file_replace_readwrite_async().


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileIOStream, or %NULL on error.
Free the returned object with g_object_unref().

Since: 2.22
</return>
</function>

<function name="GInetAddress">
<description>
An IPv4 or IPv6 internet address.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_app_launch_context_get_display">
<description>
Gets the display string for the display. This is used to ensure new
applications are started on the same display as the launching 
application.


</description>
<parameters>
<parameter name="context">
<parameter_description> a #GAppLaunchContext
</parameter_description>
</parameter>
<parameter name="info">
<parameter_description> a #GAppInfo
</parameter_description>
</parameter>
<parameter name="files">
<parameter_description> a #GList of #GFile objects
</parameter_description>
</parameter>
</parameters>
<return> a display string for the display.
</return>
</function>

<function name="g_desktop_app_info_get_is_hidden">
<description>
A desktop file is hidden if the Hidden key in it is
set to True.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GDesktopAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if hidden, %FALSE otherwise. 
</return>
</function>

<function name="g_socket_service_stop">
<description>
Stops the service, i.e. stops accepting connections
from the added sockets when the mainloop runs.

This call is threadsafe, so it may be called from a thread
handling an incomming client request.

Since: 2.22

</description>
<parameters>
<parameter name="service">
<parameter_description> a #GSocketService
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_g_local_file_new">
<description>

</description>
<parameters>
<parameter name="filename">
<parameter_description> filename of the file to create.
</parameter_description>
</parameter>
</parameters>
<return> new local #GFile.
</return>
</function>

<function name="g_data_output_stream_put_string">
<description>
Puts a string into the output stream. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GDataOutputStream.
</parameter_description>
</parameter>
<parameter name="str">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @string was successfully added to the @stream.
</return>
</function>

<function name="g_file_info_get_attribute_uint32">
<description>
Gets an unsigned 32-bit integer contained within the attribute. If the 
attribute does not contain an unsigned 32-bit integer, or is invalid, 
0 will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> an unsigned 32-bit integer from the attribute. 
</return>
</function>

<function name="g_vfs_parse_name">
<description>
This operation never fails, but the returned object might 
not support any I/O operations if the @parse_name cannot 
be parsed by the #GVfs module.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a #GVfs.
</parameter_description>
</parameter>
<parameter name="parse_name">
<parameter_description> a string to be parsed by the VFS module.
</parameter_description>
</parameter>
</parameters>
<return> a #GFile for the given @parse_name.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_vfs_is_active">
<description>
Checks if the VFS is active.


</description>
<parameters>
<parameter name="vfs">
<parameter_description> a #GVfs.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if construction of the @vfs was successful and it is now active.
</return>
</function>

<function name="g_simple_async_result_set_error_va">
<description>
Sets an error within the asynchronous result without a #GError. 
Unless writing a binding, see g_simple_async_result_set_error().

</description>
<parameters>
<parameter name="simple">
<parameter_description> a #GSimpleAsyncResult.
</parameter_description>
</parameter>
<parameter name="domain">
<parameter_description> a #GQuark (usually #G_IO_ERROR).
</parameter_description>
</parameter>
<parameter name="code">
<parameter_description> an error code.
</parameter_description>
</parameter>
<parameter name="format">
<parameter_description> a formatted error reporting string.
</parameter_description>
</parameter>
<parameter name="args">
<parameter_description> va_list of arguments. 
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_srv_target_free">
<description>
Frees @target

Since: 2.22

</description>
<parameters>
<parameter name="target">
<parameter_description> a #GSrvTarget
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_io_extension_point_register">
<description>
Registers an extension point.


</description>
<parameters>
<parameter name="name">
<parameter_description> The name of the extension point
</parameter_description>
</parameter>
</parameters>
<return> the new #GIOExtensionPoint. This object is owned by GIO
and should not be freed
</return>
</function>

<function name="g_async_initable_newv_async">
<description>
Helper function for constructing #GAsyncInitiable object. This is
similar to g_object_newv() but also initializes the object asyncronously.

When the initialization is finished, @callback will be called. You can then call
g_async_initable_new_finish() to get new object and check for any errors.

Since: 2.22

</description>
<parameters>
<parameter name="object_type">
<parameter_description> a #GType supporting #GAsyncInitable.
</parameter_description>
</parameter>
<parameter name="n_parameters">
<parameter_description> the number of parameters in @parameters
</parameter_description>
</parameter>
<parameter name="parameters">
<parameter_description> the parameters to use to construct the object
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt;
of the operation.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the initialization is finished
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_simple_async_result_new_from_error">
<description>
Creates a #GSimpleAsyncResult from an error condition.


</description>
<parameters>
<parameter name="source_object">
<parameter_description> a #GObject, or %NULL.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback.
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data passed to @callback.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location.
</parameter_description>
</parameter>
</parameters>
<return> a #GSimpleAsyncResult.
</return>
</function>

<function name="GThemedIcon">
<description>
Whether to use the default fallbacks found by shortening the icon name 
at '-' characters. If the &quot;names&quot; array has more than one element, 
ignores any past the first.

For example, if the icon name was &quot;gnome-dev-cdrom-audio&quot;, the array 
would become
|[
{
&quot;gnome-dev-cdrom-audio&quot;,
&quot;gnome-dev-cdrom&quot;,
&quot;gnome-dev&quot;,
&quot;gnome&quot;,
NULL
};
]|

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_content_type_guess_for_tree">
<description>
Tries to guess the type of the tree with root @root, by
looking at the files it contains. The result is an array
of content types, with the best guess coming first.

The types returned all have the form x-content/foo, e.g.
x-content/audio-cdda (for audio CDs) or x-content/image-dcf 
(for a camera memory card). See the &lt;ulink url=&quot;http://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec&quot;&gt;shared-mime-info&lt;/ulink&gt;
specification for more on x-content types.

This function is useful in the implementation of g_mount_guess_content_type().


</description>
<parameters>
<parameter name="root">
<parameter_description> the root of the tree to guess a type for
</parameter_description>
</parameter>
</parameters>
<return> an %NULL-terminated array of zero or more content types, or %NULL. 
Free with g_strfreev()

Since: 2.18
</return>
</function>

<function name="g_input_stream_read_async">
<description>
Request an asynchronous read of @count bytes from the stream into the buffer
starting at @buffer. When the operation is finished @callback will be called. 
You can then call g_input_stream_read_finish() to get the result of the 
operation.

During an async request no other sync and async calls are allowed, and will
result in %G_IO_ERROR_PENDING errors. 

A value of @count larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.

On success, the number of bytes read into the buffer will be passed to the
callback. It is not an error if this is not the same as the requested size, as it
can happen e.g. near the end of a file, but generally we try to read
as many bytes as requested. Zero is returned on end of file
(or if @count is zero),  but never otherwise.

Any outstanding i/o request with higher priority (lower numerical value) will
be executed before an outstanding request with lower priority. Default
priority is %G_PRIORITY_DEFAULT.

The asyncronous methods have a default fallback that uses threads to implement
asynchronicity, so they are optional for inheriting classes. However, if you
override one you must override all.

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GInputStream.
</parameter_description>
</parameter>
<parameter name="buffer">
<parameter_description> a buffer to read data into (which should be at least count bytes long).
</parameter_description>
</parameter>
<parameter name="count">
<parameter_description> the number of bytes that will be read from the stream
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_sort_order">
<description>
Gets the value of the sort_order attribute from the #GFileInfo.
See %G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a #gint32 containing the value of the &quot;standard::sort_order&quot; attribute.
</return>
</function>

<function name="g_themed_icon_new">
<description>
Creates a new themed icon for @iconname.


</description>
<parameters>
<parameter name="iconname">
<parameter_description> a string containing an icon name.
</parameter_description>
</parameter>
</parameters>
<return> a new #GThemedIcon.
</return>
</function>

<function name="g_file_load_contents_finish">
<description>
Finishes an asynchronous load of the @file's contents. 
The contents are placed in @contents, and @length is set to the 
size of the @contents string. The @content should be freed with
g_free() when no longer needed. If @etag_out is present, it will be 
set to the new entity tag for the @file.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="contents">
<parameter_description> a location to place the contents of the file.
</parameter_description>
</parameter>
<parameter name="length">
<parameter_description> a location to place the length of the contents of the file,
or %NULL if the length is not needed
</parameter_description>
</parameter>
<parameter name="etag_out">
<parameter_description> a location to place the current entity tag for the file,
or %NULL if the entity tag is not needed
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the load was successful. If %FALSE and @error is 
present, it will be set appropriately. 
</return>
</function>

<function name="g_file_get_uri">
<description>
Gets the URI for the @file.

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the #GFile's URI.
The returned string should be freed with g_free() when no longer needed.
</return>
</function>

<function name="g_file_replace_contents_finish">
<description>
Finishes an asynchronous replace of the given @file. See
g_file_replace_contents_async(). Sets @new_etag to the new entity 
tag for the document, if present.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="new_etag">
<parameter_description> a location of a new &lt;link linkend=&quot;gfile-etag&quot;&gt;entity tag&lt;/link&gt; 
for the document. This should be freed with g_free() when it is no 
longer needed, or %NULL
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL 
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure.
</return>
</function>

<function name="g_mount_get_volume">
<description>
Gets the volume for the @mount.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
</parameters>
<return> a #GVolume or %NULL if @mount is not associated with a volume.
The returned object should be unreffed with 
g_object_unref() when no longer needed.
</return>
</function>

<function name="g_buffered_input_stream_get_available">
<description>
Gets the size of the available data within the stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> #GBufferedInputStream.
</parameter_description>
</parameter>
</parameters>
<return> size of the available stream. 
</return>
</function>

<function name="missing_remove">
<description>
Unsafe, need lock fen_lock.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_memory_output_stream_new">
<description>
Creates a new #GMemoryOutputStream. 

If @data is non-%NULL, the stream  will use that for its internal storage.
If @realloc_fn is non-%NULL, it will be used for resizing the internal
storage when necessary. To construct a fixed-size output stream, 
pass %NULL as @realloc_fn.
|[
/* a stream that can grow */
stream = g_memory_output_stream_new (NULL, 0, realloc, free);

/* a fixed-size stream */
data = malloc (200);
stream2 = g_memory_output_stream_new (data, 200, NULL, free);
]|


</description>
<parameters>
<parameter name="data">
<parameter_description> pointer to a chunk of memory to use, or %NULL
</parameter_description>
</parameter>
<parameter name="len">
<parameter_description> the size of @data
</parameter_description>
</parameter>
<parameter name="realloc_fn">
<parameter_description> a function with realloc() semantics to be called when 
@data needs to be grown, or %NULL
</parameter_description>
</parameter>
<parameter name="destroy">
<parameter_description> a function to be called on @data when the stream is finalized,
or %NULL
</parameter_description>
</parameter>
</parameters>
<return> A newly created #GMemoryOutputStream object.
</return>
</function>

<function name="delete">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="_g_unix_volume_monitor_lookup_volume_for_mount_path">
<description>

</description>
<parameters>
<parameter name="monitor">
<parameter_description>
</parameter_description>
</parameter>
<parameter name="mount_path">
<parameter_description>
</parameter_description>
</parameter>
</parameters>
<return>  #GUnixVolume for the given @mount_path.
</return>
</function>

<function name="g_inet_address_get_is_mc_org_local">
<description>
Tests whether @address is an organization-local multicast address.


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GInetAddress
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @address is an organization-local multicast address.

Since: 2.22
</return>
</function>

<function name="g_socket_client_connect_to_host_async">
<description>
This is the asynchronous version of g_socket_client_connect_to_host().

When the operation is finished @callback will be
called. You can then call g_socket_client_connect_to_host_finish() to get
the result of the operation.

Since: 2.22

</description>
<parameters>
<parameter name="client">
<parameter_description> a #GTcpClient
</parameter_description>
</parameter>
<parameter name="host_and_port">
<parameter_description> the name and optionally the port of the host to connect to
</parameter_description>
</parameter>
<parameter name="default_port">
<parameter_description> the default port to connect to
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> a #GCancellable, or %NULL
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> user data for the callback
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_volume_eject_finish">
<description>
Finishes ejecting a volume. If any errors occured during the operation,
@error will be set to contain the errors and %FALSE will be returned.


</description>
<parameters>
<parameter name="volume">
<parameter_description> pointer to a #GVolume.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store an error, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE, %FALSE if operation failed.
</return>
</function>

<function name="g_file_dup">
<description>
Duplicates a #GFile handle. This operation does not duplicate 
the actual file or directory represented by the #GFile; see 
g_file_copy() if attempting to copy a file. 

This call does no blocking i/o.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
</parameters>
<return> a new #GFile that is a duplicate of the given #GFile. 
</return>
</function>

<function name="g_buffered_output_stream_set_buffer_size">
<description>
Sets the size of the internal buffer to @size.

</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedOutputStream.
</parameter_description>
</parameter>
<parameter name="size">
<parameter_description> a #gsize.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_unix_mount_points_changed_since">
<description>
Checks if the unix mount points have changed since a given unix time.


</description>
<parameters>
<parameter name="time">
<parameter_description> guint64 to contain a timestamp.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount points have changed since @time. 
</return>
</function>

<function name="g_socket_client_connect_finish">
<description>
Finishes an async connect operation. See g_socket_client_connect_async()


</description>
<parameters>
<parameter name="client">
<parameter_description> a #GSocketClient.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection on success, %NULL on error.

Since: 2.22
</return>
</function>

<function name="g_file_query_file_type">
<description>
Utility function to inspect the #GFileType of a file. This is
implemented using g_file_query_info() and as such does blocking I/O.

The primary use case of this method is to check if a file is a regular file,
directory, or symlink.


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="flags">
<parameter_description> a set of #GFileQueryInfoFlags passed to g_file_query_info().
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> The #GFileType of the file and #G_FILE_TYPE_UNKNOWN if the file
does not exist

Since: 2.18
</return>
</function>

<function name="g_mount_unmount_finish">
<description>
Finishes unmounting a mount. If any errors occurred during the operation, 
@error will be set to contain the errors and %FALSE will be returned.


</description>
<parameters>
<parameter name="mount">
<parameter_description> a #GMount.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if the mount was successfully unmounted. %FALSE otherwise.
</return>
</function>

<function name="g_buffered_output_stream_get_buffer_size">
<description>
Gets the size of the buffer in the @stream.


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GBufferedOutputStream.
</parameter_description>
</parameter>
</parameters>
<return> the current size of the buffer.
</return>
</function>

<function name="g_icon_hash">
<description>
Gets a hash for an icon.


</description>
<parameters>
<parameter name="icon">
<parameter_description> #gconstpointer to an icon object.
</parameter_description>
</parameter>
</parameters>
<return> a #guint containing a hash for the @icon, suitable for 
use in a #GHashTable or similar data structure.
</return>
</function>

<function name="g_file_info_get_attribute_object">
<description>
Gets the value of a #GObject attribute. If the attribute does 
not contain a #GObject, %NULL will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a #GObject associated with the given @attribute, or
%NULL otherwise.
</return>
</function>

<function name="g_memory_output_stream_get_data_size">
<description>
Returns: the number of bytes written to the stream

</description>
<parameters>
<parameter name="ostream">
<parameter_description> a #GMemoryOutputStream
</parameter_description>
</parameter>
</parameters>
<return> the number of bytes written to the stream

Since: 2.18
</return>
</function>

<function name="g_file_attribute_matcher_ref">
<description>
References a file attribute matcher.


</description>
<parameters>
<parameter name="matcher">
<parameter_description> a #GFileAttributeMatcher.
</parameter_description>
</parameter>
</parameters>
<return> a #GFileAttributeMatcher.
</return>
</function>

<function name="g_mount_shadow">
<description>
Increments the shadow count on @mount. Usually used by
#GVolumeMonitor implementations when creating a shadow mount for
@mount, see g_mount_is_shadowed() for more information. The caller
will need to emit the #GMount::changed signal on @mount manually.

Since: 2.20

</description>
<parameters>
<parameter name="mount">
<parameter_description> A #GMount.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="GFilenameCompleter">
<description>
Emitted when the file name completion information comes available.

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_app_info_get_id">
<description>
Gets the ID of an application. An id is a string that
identifies the application. The exact format of the id is
platform dependent. For instance, on Unix this is the
desktop file id from the xdg menu specification.

Note that the returned ID may be %NULL, depending on how
the @appinfo has been constructed.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the application's ID.
</return>
</function>

<function name="g_file_replace_finish">
<description>
Finishes an asynchronous file replace operation started with 
g_file_replace_async(). 


</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="res">
<parameter_description> a #GAsyncResult. 
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError, or %NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GFileOutputStream, or %NULL on error.
Free the returned object with g_object_unref().
</return>
</function>

<function name="g_file_info_new">
<description>
Creates a new file info structure.


</description>
<parameters>
</parameters>
<return> a #GFileInfo.
</return>
</function>

<function name="g_unix_output_stream_new">
<description>
Creates a new #GUnixOutputStream for the given @fd. 

If @close_fd, is %TRUE, the file descriptor will be closed when 
the output stream is destroyed.


</description>
<parameters>
<parameter name="fd">
<parameter_description> a UNIX file descriptor
</parameter_description>
</parameter>
<parameter name="close_fd">
<parameter_description> %TRUE to close the file descriptor when done
</parameter_description>
</parameter>
</parameters>
<return> a new #GOutputStream
</return>
</function>

<function name="g_socket_connection_get_remote_address">
<description>
Try to get the remove address of a socket connection.


</description>
<parameters>
<parameter name="connection">
<parameter_description> a #GSocketConnection.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketAddress or %NULL on error.

Since: 2.22
</return>
</function>

<function name="g_socket_service_start">
<description>
Starts the service, i.e. start accepting connections
from the added sockets when the mainloop runs.

This call is threadsafe, so it may be called from a thread
handling an incomming client request.

Since: 2.22

</description>
<parameters>
<parameter name="service">
<parameter_description> a #GSocketService
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_input_stream_close">
<description>
Closes the stream, releasing resources related to it.

Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
Closing a stream multiple times will not return an error.

Streams will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure 
resources are released as early as possible.

Some streams might keep the backing store of the stream (e.g. a file descriptor)
open after the stream is closed. See the documentation for the individual
stream for details.

On failure the first error that happened will be reported, but the close
operation will finish as much as possible. A stream that failed to
close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
is important to check and report the error to the user.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
Cancelling a close will still leave the stream closed, but some streams
can use a faster close that doesn't block to e.g. check errors. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GInputStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure
</return>
</function>

<function name="g_initable_new_valist">
<description>
Helper function for constructing #GInitiable object. This is
similar to g_object_new_valist() but also initializes the object
and returns %NULL, setting an error on failure.


</description>
<parameters>
<parameter name="object_type">
<parameter_description> a #GType supporting #GInitable.
</parameter_description>
</parameter>
<parameter name="first_property_name">
<parameter_description> the name of the first property, followed by
the value, and other property value pairs, and ended by %NULL.
</parameter_description>
</parameter>
<parameter name="var_args">
<parameter_description> The var args list generated from @first_property_name.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to
ignore.
</parameter_description>
</parameter>
</parameters>
<return> a newly allocated #GObject, or %NULL on error

Since: 2.22
</return>
</function>

<function name="g_socket_accept">
<description>
Accept incoming connections on a connection-based socket. This removes
the first outstanding connection request from the listening socket and
creates a #GSocket object for it.

The @socket must be bound to a local address with g_socket_bind() and
must be listening for incoming connections (g_socket_listen()).

If there are no outstanding connections then the operation will block
or return %G_IO_ERROR_WOULD_BLOCK if non-blocking I/O is enabled.
To be notified of an incoming connection, wait for the %G_IO_IN condition.


</description>
<parameters>
<parameter name="socket">
<parameter_description> a #GSocket.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a new #GSocket, or %NULL on error.
Free the returned object with g_object_unref().

Since: 2.22
</return>
</function>

<function name="g_file_set_display_name_async">
<description>
Asynchronously sets the display name for a given #GFile.

For more details, see g_file_set_display_name() which is
the synchronous version of this call.

When the operation is finished, @callback will be called. You can then call
g_file_set_display_name_finish() to get the result of the operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="display_name">
<parameter_description> a string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request. 
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_file_info_get_display_name">
<description>
Gets a display name for a file.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
</parameters>
<return> a string containing the display name.
</return>
</function>

<function name="g_socket_address_get_native_size">
<description>
Gets the size of @address's native &lt;type&gt;struct sockaddr&lt;/type&gt;.
You can use this to allocate memory to pass to
g_socket_address_to_native().


</description>
<parameters>
<parameter name="address">
<parameter_description> a #GSocketAddress
</parameter_description>
</parameter>
</parameters>
<return> the size of the native &lt;type&gt;struct sockaddr&lt;/type&gt; that
@address represents

Since: 2.22
</return>
</function>

<function name="g_file_info_get_attribute_uint64">
<description>
Gets a unsigned 64-bit integer contained within the attribute. If the 
attribute does not contain an unsigned 64-bit integer, or is invalid, 
0 will be returned.


</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="attribute">
<parameter_description> a file attribute key.
</parameter_description>
</parameter>
</parameters>
<return> a unsigned 64-bit integer from the attribute. 
</return>
</function>

<function name="g_io_stream_close">
<description>
Closes the stream, releasing resources related to it. This will also
closes the individual input and output streams, if they are not already
closed.

Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
Closing a stream multiple times will not return an error.

Closing a stream will automatically flush any outstanding buffers in the
stream.

Streams will be automatically closed when the last reference
is dropped, but you might want to call this function to make sure
resources are released as early as possible.

Some streams might keep the backing store of the stream (e.g. a file descriptor)
open after the stream is closed. See the documentation for the individual
stream for details.

On failure the first error that happened will be reported, but the close
operation will finish as much as possible. A stream that failed to
close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
is important to check and report the error to the user, otherwise
there might be a loss of data as all data might not be written.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
Cancelling a close will still leave the stream closed, but some streams
can use a faster close that doesn't block to e.g. check errors.

The default implementation of this method just calls close on the
individual input/output streams.


</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GIOStream.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> location to store the error occuring, or %NULL to ignore
</parameter_description>
</parameter>
</parameters>
<return> %TRUE on success, %FALSE on failure

Since: 2.22
</return>
</function>

<function name="g_socket_listener_accept">
<description>
Blocks waiting for a client to connect to any of the sockets added
to the listener. Returns a #GSocketConnection for the socket that was
accepted.

If @source_object is not %NULL it will be filled out with the source
object specified when the corresponding socket or address was added
to the listener.

If @cancellable is not NULL, then the operation can be cancelled by
triggering the cancellable object from another thread. If the operation
was cancelled, the error G_IO_ERROR_CANCELLED will be returned.


</description>
<parameters>
<parameter name="listener">
<parameter_description> a #GSocketListener
</parameter_description>
</parameter>
<parameter name="source_object">
<parameter_description> location where #GObject pointer will be stored, or %NULL
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> #GError for error reporting, or %NULL to ignore.
</parameter_description>
</parameter>
</parameters>
<return> a #GSocketConnection on success, %NULL on error.

Since: 2.22
</return>
</function>

<function name="g_app_info_can_remove_supports_type">
<description>
Checks if a supported content type can be removed from an application.


</description>
<parameters>
<parameter name="appinfo">
<parameter_description> a #GAppInfo.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if it is possible to remove supported 
content types from a given @appinfo, %FALSE if not.
</return>
</function>

<function name="g_file_info_get_modification_time">
<description>
Gets the modification time of the current @info and sets it
in @result.

</description>
<parameters>
<parameter name="info">
<parameter_description> a #GFileInfo.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GTimeVal.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_input_stream_read_finish">
<description>
Finishes an asynchronous stream read operation. 


</description>
<parameters>
<parameter name="stream">
<parameter_description> a #GInputStream.
</parameter_description>
</parameter>
<parameter name="result">
<parameter_description> a #GAsyncResult.
</parameter_description>
</parameter>
<parameter name="error">
<parameter_description> a #GError location to store the error occuring, or %NULL to 
ignore.
</parameter_description>
</parameter>
</parameters>
<return> number of bytes read in, or -1 on error.
</return>
</function>

<function name="g_mount_operation_set_username">
<description>
Sets the user name within @op to @username.

</description>
<parameters>
<parameter name="op">
<parameter_description> a #GMountOperation.
</parameter_description>
</parameter>
<parameter name="username">
<parameter_description> input username.
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="_g_win32_mount_new">
<description>

</description>
<parameters>
<parameter name="volume_monitor">
<parameter_description> a #GVolumeMonitor.
</parameter_description>
</parameter>
<parameter name="path">
<parameter_description> a win32 path.
</parameter_description>
</parameter>
<parameter name="volume">
<parameter_description> ususally NULL
</parameter_description>
</parameter>
</parameters>
<return> a #GWin32Mount for the given win32 path.
</return>
</function>

<function name="depth">
<description>

</description>
<parameters>
</parameters>
<return></return>
</function>

<function name="g_io_stream_close_async">
<description>
Requests an asynchronous close of the stream, releasing resources
related to it. When the operation is finished @callback will be
called. You can then call g_io_stream_close_finish() to get
the result of the operation.

For behaviour details see g_io_stream_close().

The asyncronous methods have a default fallback that uses threads
to implement asynchronicity, so they are optional for inheriting
classes. However, if you override one you must override all.

Since: 2.22

</description>
<parameters>
<parameter name="stream">
<parameter_description> A #GIOStream.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the io priority of the request.
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> callback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional cancellable object
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

<function name="g_content_type_is_a">
<description>
Determines if @type is a subset of @supertype.  


</description>
<parameters>
<parameter name="type">
<parameter_description> a content type string. 
</parameter_description>
</parameter>
<parameter name="supertype">
<parameter_description> a string.
</parameter_description>
</parameter>
</parameters>
<return> %TRUE if @type is a kind of @supertype,
%FALSE otherwise. 
</return>
</function>

<function name="g_file_query_filesystem_info_async">
<description>
Asynchronously gets the requested information about the filesystem
that the specified @file is on. The result is a #GFileInfo object
that contains key-value attributes (such as type or size for the
file).

For more details, see g_file_query_filesystem_info() which is the
synchronous version of this call.

When the operation is finished, @callback will be called. You can
then call g_file_query_info_finish() to get the result of the
operation.

</description>
<parameters>
<parameter name="file">
<parameter_description> input #GFile.
</parameter_description>
</parameter>
<parameter name="attributes">
<parameter_description> an attribute query string.
</parameter_description>
</parameter>
<parameter name="io_priority">
<parameter_description> the &lt;link linkend=&quot;io-priority&quot;&gt;I/O priority&lt;/link&gt; 
of the request.
</parameter_description>
</parameter>
<parameter name="cancellable">
<parameter_description> optional #GCancellable object, %NULL to ignore. 
</parameter_description>
</parameter>
<parameter name="callback">
<parameter_description> a #GAsyncReadyCallback to call when the request is satisfied
</parameter_description>
</parameter>
<parameter name="user_data">
<parameter_description> the data to pass to callback function
</parameter_description>
</parameter>
</parameters>
<return></return>
</function>

</root>
