// -*- Mode: C++; indent-tabs-mode: nil; c-basic-offset: 2 -*-

/* Copyright (C) 2007 The gtkmm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gio/gio.h>
#include <giomm/file.h>

namespace Gio
{

#ifdef GLIBMM_EXCEPTIONS_ENABLED
Glib::RefPtr<AppInfo>
AppInfo::create_from_commandline(const std::string& commandline,
                                 const std::string& application_name,
                                 AppInfoCreateFlags flags)
#else
Glib::RefPtr<AppInfo>
AppInfo::create_from_commandline(const std::string& commandline,
                                 const std::string& application_name,
                                 AppInfoCreateFlags flags,
                                 std::auto_ptr<Glib::Error>& error)
#endif // GLIBMM_EXCEPTIONS_ENABLED
{
  GAppInfo* capp_info = 0;
  GError* gerror = 0;

  capp_info = g_app_info_create_from_commandline(commandline.c_str(),
                                                 application_name.c_str(),
                                                 static_cast<GAppInfoCreateFlags>(flags),
                                                 &gerror);

  if (gerror)
#ifdef GLIBMM_EXCEPTIONS_ENABLED
    ::Glib::Error::throw_exception(gerror);
#else
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  return Glib::wrap(capp_info);
}

#ifdef GLIBMM_EXCEPTIONS_ENABLED
bool AppInfo::launch_default_for_uri(const std::string& uri)
#else
bool AppInfo::launch_default_for_uri(const std::string& uri, std::auto_ptr<Glib::Error>& error)
#endif //GLIBMM_EXCEPTIONS_ENABLED
{
  GError* gerror = 0;
  bool retvalue = g_app_info_launch_default_for_uri(uri.c_str(), NULL, &(gerror));

#ifdef GLIBMM_EXCEPTIONS_ENABLED
  if(gerror)
    ::Glib::Error::throw_exception(gerror);
#else
  if(gerror)
    error = ::Glib::Error::throw_exception(gerror);
#endif //GLIBMM_EXCEPTIONS_ENABLED

  return retvalue;
}


} // namespace Gio
